import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        double[] doubleArray11 = new double[] { 100L, (-1.0d), (short) -1, 1.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = realMatrixImpl2.solve(doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, -1.0, -1.0, 1.0]");
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        double[] doubleArray16 = new double[] { 10.0d, (byte) 10, (short) -1 };
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray17 = bigMatrixImpl12.solve(doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0, -1.0]");
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        java.math.BigDecimal bigDecimal13 = null;
        java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal13 };
        java.math.BigDecimal bigDecimal15 = null;
        java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal15 };
        java.math.BigDecimal bigDecimal17 = null;
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal19 = null;
        java.math.BigDecimal[] bigDecimalArray20 = new java.math.BigDecimal[] { bigDecimal19 };
        java.math.BigDecimal bigDecimal21 = null;
        java.math.BigDecimal[] bigDecimalArray22 = new java.math.BigDecimal[] { bigDecimal21 };
        java.math.BigDecimal[][] bigDecimalArray23 = new java.math.BigDecimal[][] { bigDecimalArray14, bigDecimalArray16, bigDecimalArray18, bigDecimalArray20, bigDecimalArray22 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl12.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl17.add(realMatrixImpl27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl2.multiply(realMatrixImpl29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        java.math.BigDecimal bigDecimal13 = null;
        java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal13 };
        java.math.BigDecimal bigDecimal15 = null;
        java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal15 };
        java.math.BigDecimal bigDecimal17 = null;
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal19 = null;
        java.math.BigDecimal[] bigDecimalArray20 = new java.math.BigDecimal[] { bigDecimal19 };
        java.math.BigDecimal bigDecimal21 = null;
        java.math.BigDecimal[] bigDecimalArray22 = new java.math.BigDecimal[] { bigDecimal21 };
        java.math.BigDecimal[][] bigDecimalArray23 = new java.math.BigDecimal[][] { bigDecimalArray14, bigDecimalArray16, bigDecimalArray18, bigDecimalArray20, bigDecimalArray22 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = bigMatrixImpl12.add(bigMatrixImpl25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        java.math.BigDecimal bigDecimal13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl12.scalarAdd(bigDecimal13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix13 = bigMatrixImpl12.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl6.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        java.math.BigDecimal bigDecimal1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix2 = bigMatrixImpl0.scalarMultiply(bigDecimal1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl12.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int[] intArray18 = new int[] { (byte) 100, '4', (byte) 0, 35, (short) 100 };
        int[] intArray19 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix20 = bigMatrixImpl12.getSubMatrix(intArray18, intArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 52, 0, 35, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        java.math.BigDecimal bigDecimal19 = null;
        java.math.BigDecimal[] bigDecimalArray20 = new java.math.BigDecimal[] { bigDecimal19 };
        java.math.BigDecimal bigDecimal21 = null;
        java.math.BigDecimal[] bigDecimalArray22 = new java.math.BigDecimal[] { bigDecimal21 };
        java.math.BigDecimal bigDecimal23 = null;
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal bigDecimal25 = null;
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal27 = null;
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal[][] bigDecimalArray29 = new java.math.BigDecimal[][] { bigDecimalArray20, bigDecimalArray22, bigDecimalArray24, bigDecimalArray26, bigDecimalArray28 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray29, true);
        bigMatrixImpl31.setScale((int) (short) 0);
        bigMatrixImpl31.setRoundingMode(0);
        bigMatrixImpl31.setScale((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = bigMatrixImpl12.subtract(bigMatrixImpl31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = realMatrixImpl5.getRow((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = realMatrixImpl5.add(realMatrixImpl8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl8.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.multiply(realMatrixImpl8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl9);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrixImpl6.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        double[] doubleArray23 = new double[] { (short) -1, 35, 1, 0 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = realMatrixImpl16.operate(doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 35.0, 1.0, 0.0]");
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int[] intArray15 = new int[] { '#', '4' };
        int[] intArray17 = new int[] { (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrixImpl12.getSubMatrix(intArray15, intArray17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[35, 52]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10]");
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = realMatrixImpl5.preMultiply(doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double19 = realMatrixImpl2.getEntry((int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl12.getSubMatrix(1, (int) (byte) 0, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double17 = realMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        double[] doubleArray6 = new double[] { 100L, '4', (short) 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = realMatrixImpl2.solve(doubleArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 52.0, 1.0]");
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int[] intArray25 = new int[] { 1, '#', 'a', '4' };
        int[] intArray27 = new int[] { (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl20.getSubMatrix(intArray25, intArray27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 35, 97, 52]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        double[] doubleArray15 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray16 = bigMatrixImpl12.solve(doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = realMatrixImpl9.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = realMatrixImpl12.getRow((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl15.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl19);
        boolean boolean21 = realMatrixImpl8.equals((java.lang.Object) realMatrixImpl19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = realMatrixImpl2.multiply(realMatrixImpl19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal15 = bigMatrixImpl12.getEntry((int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "hi!", "", "" };
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "hi!", "", "" };
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "", "" };
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "", "" };
        java.lang.String[][] strArray24 = new java.lang.String[][] { strArray5, strArray11, strArray17, strArray23 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(strArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        java.math.BigDecimal bigDecimal13 = null;
        java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal13 };
        java.math.BigDecimal bigDecimal15 = null;
        java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal15 };
        java.math.BigDecimal bigDecimal17 = null;
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal19 = null;
        java.math.BigDecimal[] bigDecimalArray20 = new java.math.BigDecimal[] { bigDecimal19 };
        java.math.BigDecimal bigDecimal21 = null;
        java.math.BigDecimal[] bigDecimalArray22 = new java.math.BigDecimal[] { bigDecimal21 };
        java.math.BigDecimal[][] bigDecimalArray23 = new java.math.BigDecimal[][] { bigDecimalArray14, bigDecimalArray16, bigDecimalArray18, bigDecimalArray20, bigDecimalArray22 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23, true);
        bigMatrixImpl25.setScale((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl12.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray10 = new double[] { 0L, 0.0d, 0.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = realMatrixImpl5.preMultiply(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0]");
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl19.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        int int45 = bigMatrixImpl44.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = bigMatrixImpl21.multiply(bigMatrixImpl44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl2.getSubMatrix((int) (byte) 100, (int) (byte) 100, (-1), 35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        double[][] doubleArray0 = new double[][] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must have at least one row.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl19.getColumnMatrix((int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = bigMatrixImpl12.getColumnAsDoubleArray(2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = realMatrixImpl2.getColumn((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        double[] doubleArray31 = realMatrixImpl28.getColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray32 = bigMatrixImpl21.solve(doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = bigMatrixImpl12.transpose();
        double[] doubleArray16 = new double[] { 1, (byte) 10 };
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[][] doubleArray32 = new double[][] { doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28, doubleArray31 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = bigMatrixImpl12.multiply(bigMatrixImpl35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getColumnMatrix((int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl0 = new org.apache.commons.math.linear.RealMatrixImpl();
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix16 = bigMatrixImpl12.getColumnMatrix((int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        boolean boolean18 = realMatrixImpl17.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl12.add(realMatrixImpl17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal bigDecimal24 = null;
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal26 = null;
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal28 = null;
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal30 = null;
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal bigDecimal32 = null;
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray25, bigDecimalArray27, bigDecimalArray29, bigDecimalArray31, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34, true);
        bigMatrixImpl36.setScale((int) (short) 0);
        bigMatrixImpl36.setRoundingMode(0);
        boolean boolean41 = bigMatrixImpl36.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = bigMatrixImpl20.add(bigMatrixImpl36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        java.math.BigDecimal bigDecimal25 = null;
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal27 = null;
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal bigDecimal29 = null;
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal31 = null;
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal bigDecimal33 = null;
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal[][] bigDecimalArray35 = new java.math.BigDecimal[][] { bigDecimalArray26, bigDecimalArray28, bigDecimalArray30, bigDecimalArray32, bigDecimalArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35, true);
        int int38 = bigMatrixImpl37.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = bigMatrixImpl20.subtract(bigMatrixImpl37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 64 + "'", int38 == 64);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        int[] intArray15 = new int[] {};
        int[] intArray22 = new int[] { '#', '#', 35, 10, (byte) 1, (-1) };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl12.getSubMatrix(intArray15, intArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[35, 35, 35, 10, 1, -1]");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl43.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray48 = bigMatrixImpl21.solve(bigDecimalArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        java.math.BigDecimal bigDecimal23 = null;
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal bigDecimal25 = null;
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal27 = null;
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal bigDecimal29 = null;
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal31 = null;
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal[][] bigDecimalArray33 = new java.math.BigDecimal[][] { bigDecimalArray24, bigDecimalArray26, bigDecimalArray28, bigDecimalArray30, bigDecimalArray32 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray33, true);
        int int36 = bigMatrixImpl35.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = bigMatrixImpl21.add(bigMatrixImpl35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 64 + "'", int36 == 64);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal19 = bigMatrixImpl12.getEntry((int) '4', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal21 = null;
        java.math.BigDecimal[] bigDecimalArray22 = new java.math.BigDecimal[] { bigDecimal21 };
        java.math.BigDecimal bigDecimal23 = null;
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal bigDecimal25 = null;
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal27 = null;
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal bigDecimal29 = null;
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal[][] bigDecimalArray31 = new java.math.BigDecimal[][] { bigDecimalArray22, bigDecimalArray24, bigDecimalArray26, bigDecimalArray28, bigDecimalArray30 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31, true);
        bigMatrixImpl33.setScale((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl20.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getSubMatrix(0, (int) (byte) 0, (-1), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = realMatrixImpl6.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        double[] doubleArray18 = new double[] { 4, (-1.0d), ' ', 100.0d, 0.0f };
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray19 = bigMatrixImpl12.operate(doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[4.0, -1.0, 32.0, 100.0, 0.0]");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl16.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = realMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal22 = null;
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal bigDecimal24 = null;
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal26 = null;
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal28 = null;
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal30 = null;
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal[][] bigDecimalArray32 = new java.math.BigDecimal[][] { bigDecimalArray23, bigDecimalArray25, bigDecimalArray27, bigDecimalArray29, bigDecimalArray31 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray32, true);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.setSubMatrix(bigDecimalArray32, (int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        boolean boolean3 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl16.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl20);
        boolean boolean22 = realMatrixImpl16.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl25.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
        int int30 = realMatrixImpl28.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl16.subtract(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl9.subtract(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl32.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl54.add(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl57.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        boolean boolean63 = realMatrixImpl57.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrixImpl66.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl69);
        int int71 = realMatrixImpl69.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = realMatrixImpl57.subtract(realMatrixImpl69);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl50.subtract(realMatrixImpl72);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = realMatrixImpl76.add(realMatrixImpl79);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrixImpl79.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix85 = realMatrixImpl73.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl79);
        org.apache.commons.math.linear.RealMatrix realMatrix86 = realMatrixImpl38.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = realMatrixImpl2.add(realMatrixImpl79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl72);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(realMatrixImpl80);
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertNotNull(realMatrix85);
        org.junit.Assert.assertNotNull(realMatrix86);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = bigMatrixImpl12.getEntryAsDouble((int) (byte) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        double[] doubleArray19 = new double[] { 64, 1.0f, (-1L), (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = realMatrixImpl14.solve(doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[64.0, 1.0, -1.0, 10.0]");
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        boolean boolean17 = bigMatrixImpl12.isSquare();
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[][] doubleArray36 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        java.math.BigDecimal bigDecimal41 = bigMatrixImpl38.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray42 = bigMatrixImpl38.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl12.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = bigMatrixImpl12.transpose();
        double[] doubleArray17 = new double[] { 100, (byte) -1, (short) -1 };
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray18 = bigMatrixImpl12.operate(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl21.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[][] doubleArray35 = new double[][] { doubleArray19, doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl37.getEntry(0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl12.scalarMultiply(bigDecimal40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigDecimal40);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        boolean boolean17 = bigMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        double[] doubleArray26 = realMatrixImpl23.getColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray27 = bigMatrixImpl12.operate(doubleArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        java.math.BigDecimal bigDecimal42 = bigMatrixImpl39.getEntry(0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl12.scalarAdd(bigDecimal42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(bigDecimal42);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray46 = bigMatrixImpl42.getRowAsDoubleArray((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal22 = bigMatrixImpl21.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray46 = bigMatrixImpl44.getColumn((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        double[] doubleArray53 = realMatrixImpl50.getColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray54 = bigMatrixImpl44.operate(doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        boolean boolean3 = realMatrixImpl2.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl2.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[] doubleArray27 = new double[] { (short) 10, (byte) 1, (short) 0 };
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray28 = bigMatrixImpl20.solve(doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 1.0, 0.0]");
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal22 = null;
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal bigDecimal24 = null;
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal26 = null;
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal28 = null;
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal30 = null;
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal[][] bigDecimalArray32 = new java.math.BigDecimal[][] { bigDecimalArray23, bigDecimalArray25, bigDecimalArray27, bigDecimalArray29, bigDecimalArray31 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray32, true);
        bigMatrixImpl34.setScale((int) (short) 0);
        bigMatrixImpl34.setRoundingMode(0);
        boolean boolean39 = bigMatrixImpl34.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl21.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl2.add(realMatrix27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        boolean boolean40 = realMatrixImpl34.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        int int48 = realMatrixImpl46.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl34.subtract(realMatrixImpl46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl2.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl44.getColumnMatrix((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = realMatrixImpl2.getEntry((int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl12.getSubMatrix((int) '4', (-1), 1, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean14 = realMatrixImpl13.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = realMatrixImpl5.multiply(realMatrixImpl13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal27 = bigMatrixImpl20.getEntry((int) (byte) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        java.math.BigDecimal bigDecimal3 = null;
        java.math.BigDecimal[] bigDecimalArray4 = new java.math.BigDecimal[] { bigDecimal3 };
        java.math.BigDecimal bigDecimal5 = null;
        java.math.BigDecimal[] bigDecimalArray6 = new java.math.BigDecimal[] { bigDecimal5 };
        java.math.BigDecimal bigDecimal7 = null;
        java.math.BigDecimal[] bigDecimalArray8 = new java.math.BigDecimal[] { bigDecimal7 };
        java.math.BigDecimal bigDecimal9 = null;
        java.math.BigDecimal[] bigDecimalArray10 = new java.math.BigDecimal[] { bigDecimal9 };
        java.math.BigDecimal bigDecimal11 = null;
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal11 };
        java.math.BigDecimal[][] bigDecimalArray13 = new java.math.BigDecimal[][] { bigDecimalArray4, bigDecimalArray6, bigDecimalArray8, bigDecimalArray10, bigDecimalArray12 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray13, true);
        bigMatrixImpl15.setRoundingMode((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrixImpl2.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigDecimalArray6);
        org.junit.Assert.assertNotNull(bigDecimalArray8);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = realMatrixImpl11.add(realMatrixImpl14);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = realMatrixImpl18.add(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl25);
        boolean boolean27 = realMatrixImpl21.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl30.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        int int35 = realMatrixImpl33.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl21.subtract(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl14.subtract(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl52.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        boolean boolean68 = realMatrixImpl62.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl71.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        int int76 = realMatrixImpl74.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl62.subtract(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = realMatrixImpl55.subtract(realMatrixImpl77);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl85 = realMatrixImpl81.add(realMatrixImpl84);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl88 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl84.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl88);
        org.apache.commons.math.linear.RealMatrix realMatrix90 = realMatrixImpl78.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl84);
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrixImpl43.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl84);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix92 = realMatrixImpl5.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl15);
        org.junit.Assert.assertNotNull(realMatrixImpl22);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl78);
        org.junit.Assert.assertNotNull(realMatrixImpl85);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertNotNull(realMatrix91);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        double[] doubleArray49 = realMatrixImpl46.getColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray50 = realMatrixImpl34.solve(doubleArray49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl27.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double double3 = realMatrixImpl2.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        int int11 = realMatrixImpl5.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl5.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        java.math.BigDecimal[][] bigDecimalArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl12.setSubMatrix(bigDecimalArray13, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        java.lang.Class<?> wildcardClass9 = realMatrixImpl5.getClass();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal21 = bigMatrixImpl12.getEntry((int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        int[] intArray29 = new int[] { (-1), 100, (byte) 10, 0 };
        int[] intArray36 = new int[] { (-1), (short) -1, (short) 1, 100, 10, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl20.getSubMatrix(intArray29, intArray36);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100, 10, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1, 1, 100, 10, 0]");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = realMatrixImpl5.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        int int66 = bigMatrixImpl65.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = bigMatrixImpl43.add(bigMatrixImpl65);
        boolean boolean68 = bigMatrixImpl67.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl21.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        int int66 = bigMatrixImpl65.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = bigMatrixImpl43.add(bigMatrixImpl65);
        boolean boolean68 = bigMatrixImpl67.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrixImpl67.getRowMatrix(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl21.add(bigMatrix70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(bigMatrix70);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrixImpl6.copy();
        int[] intArray9 = new int[] { ' ' };
        int[] intArray10 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl6.getSubMatrix(intArray9, intArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl12.getRowMatrix(10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        java.lang.Class<?> wildcardClass25 = bigMatrixImpl24.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl2.add(realMatrix27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl2.getRowMatrix((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal45 = bigMatrixImpl44.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl16.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl20);
        boolean boolean22 = realMatrixImpl16.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl25.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
        int int30 = realMatrixImpl28.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl16.subtract(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl9.subtract(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl32.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl2.preMultiply(realMatrix44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = realMatrixImpl5.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "" };
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "" };
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "" };
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "" };
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "" };
        java.lang.String[][] strArray18 = new java.lang.String[][] { strArray2, strArray5, strArray8, strArray11, strArray14, strArray17 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(strArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double19 = realMatrixImpl2.getEntry(97, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getScale();
        java.math.BigDecimal bigDecimal23 = null;
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal bigDecimal25 = null;
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal27 = null;
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal bigDecimal29 = null;
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal31 = null;
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal[][] bigDecimalArray33 = new java.math.BigDecimal[][] { bigDecimalArray24, bigDecimalArray26, bigDecimalArray28, bigDecimalArray30, bigDecimalArray32 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray33, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl21.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl28.getSubMatrix((int) (byte) 10, 2, 4, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl22.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray27 = realMatrixImpl26.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl22.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray27);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl29.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        int int43 = realMatrixImpl41.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl29.subtract(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl22.subtract(realMatrixImpl44);
        double[] doubleArray47 = realMatrixImpl22.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray48 = realMatrixImpl12.preMultiply(doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrixImpl5.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        double[] doubleArray15 = new double[] { 1, (byte) 10 };
        double[] doubleArray18 = new double[] { 1, (byte) 10 };
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[][] doubleArray31 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24, doubleArray27, doubleArray30 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray31);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray31);
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[][] doubleArray52 = new double[][] { doubleArray36, doubleArray39, doubleArray42, doubleArray45, doubleArray48, doubleArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        int int56 = bigMatrixImpl55.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = bigMatrixImpl33.add(bigMatrixImpl55);
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl55.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl12.scalarMultiply(bigDecimal58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl57);
        org.junit.Assert.assertNotNull(bigDecimal58);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray17 = bigMatrixImpl12.getDataAsDoubleArray();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        int[] intArray13 = new int[] { (short) 10, (short) -1, ' ' };
        int[] intArray14 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl5.getSubMatrix(intArray13, intArray14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, -1, 32]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl46.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl37.multiply(realMatrixImpl46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(realMatrix60);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray26 = bigMatrixImpl24.getColumn((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl48.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.setSubMatrix(bigDecimalArray49, (int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl26.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        boolean boolean32 = realMatrixImpl26.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl35.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        int int40 = realMatrixImpl38.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl26.subtract(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl19.subtract(realMatrixImpl41);
        double[] doubleArray44 = realMatrixImpl19.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray45 = bigMatrixImpl12.operate(doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[][] doubleArray33 = new double[][] { doubleArray17, doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[][] doubleArray54 = new double[][] { doubleArray38, doubleArray41, doubleArray44, doubleArray47, doubleArray50, doubleArray53 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray54);
        int int58 = bigMatrixImpl57.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = bigMatrixImpl35.add(bigMatrixImpl57);
        java.math.BigDecimal bigDecimal60 = bigMatrixImpl57.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl12.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl59);
        org.junit.Assert.assertNotNull(bigDecimal60);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl2.add(realMatrix27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean32 = realMatrixImpl31.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl2.multiply(realMatrixImpl31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        double[] doubleArray29 = realMatrixImpl26.getColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = realMatrixImpl5.solve(doubleArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl14.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl17.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl5.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = bigMatrixImpl21.getColumnAsDoubleArray(4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 100, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = realMatrixImpl5.add(realMatrixImpl8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl15.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl19);
        boolean boolean21 = realMatrixImpl15.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl24.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl27);
        int int29 = realMatrixImpl27.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl15.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl8.subtract(realMatrixImpl30);
        double[] doubleArray33 = realMatrixImpl8.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray34 = bigMatrixImpl2.solve(doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl2.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        boolean boolean3 = realMatrixImpl2.isSquare();
        int int4 = realMatrixImpl2.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl7 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = realMatrixImpl7.add(realMatrixImpl10);
        double[] doubleArray13 = realMatrixImpl10.getColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = realMatrixImpl2.solve(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(realMatrixImpl11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        boolean boolean25 = bigMatrixImpl20.isSquare();
        java.lang.Class<?> wildcardClass26 = bigMatrixImpl20.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getScale();
        java.math.BigDecimal bigDecimal26 = null;
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal28 = null;
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal30 = null;
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal bigDecimal32 = null;
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal bigDecimal34 = null;
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal[][] bigDecimalArray36 = new java.math.BigDecimal[][] { bigDecimalArray27, bigDecimalArray29, bigDecimalArray31, bigDecimalArray33, bigDecimalArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36, true);
        bigMatrixImpl38.setScale((int) (short) 0);
        int int41 = bigMatrixImpl38.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = bigMatrixImpl24.add(bigMatrixImpl38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 64 + "'", int25 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getRoundingMode();
        java.math.BigDecimal bigDecimal14 = null;
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal16 = null;
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal18 = null;
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal20 = null;
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        java.math.BigDecimal bigDecimal22 = null;
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray15, bigDecimalArray17, bigDecimalArray19, bigDecimalArray21, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, true);
        int int27 = bigMatrixImpl26.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl12.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 64 + "'", int27 == 64);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = null;
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal bigDecimal47 = null;
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal49 = null;
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal51 = null;
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal bigDecimal53 = null;
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal[][] bigDecimalArray55 = new java.math.BigDecimal[][] { bigDecimalArray46, bigDecimalArray48, bigDecimalArray50, bigDecimalArray52, bigDecimalArray54 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl44.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = realMatrixImpl5.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = bigMatrixImpl19.getRowAsDoubleArray((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        int int66 = bigMatrixImpl65.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = bigMatrixImpl43.add(bigMatrixImpl65);
        java.math.BigDecimal bigDecimal68 = bigMatrixImpl65.getNorm();
        java.math.BigDecimal[] bigDecimalArray69 = new java.math.BigDecimal[] { bigDecimal68 };
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray70 = bigMatrixImpl21.preMultiply(bigDecimalArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl67);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.transpose();
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal bigDecimal10 = null;
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal12 = null;
        java.math.BigDecimal[] bigDecimalArray13 = new java.math.BigDecimal[] { bigDecimal12 };
        java.math.BigDecimal[][] bigDecimalArray14 = new java.math.BigDecimal[][] { bigDecimalArray5, bigDecimalArray7, bigDecimalArray9, bigDecimalArray11, bigDecimalArray13 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray14, true);
        int int17 = bigMatrixImpl16.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrixImpl2.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 64 + "'", int17 == 64);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = realMatrixImpl42.getEntry((int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrixImpl6.copy();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = realMatrixImpl6.getColumn(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl40.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl41.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        boolean boolean47 = realMatrixImpl41.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl50.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl53);
        int int55 = realMatrixImpl53.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl41.subtract(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl21.add(realMatrixImpl53);
        double[][] doubleArray58 = realMatrixImpl57.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl61.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = realMatrixImpl68.add(realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl61.add(realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl61.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = realMatrixImpl78.add(realMatrixImpl81);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl85 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix86 = realMatrixImpl81.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl85);
        org.apache.commons.math.linear.RealMatrix realMatrix87 = realMatrixImpl61.add(realMatrix86);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl88 = realMatrixImpl57.subtract(realMatrixImpl61);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl16.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl72);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(realMatrixImpl82);
        org.junit.Assert.assertNotNull(realMatrix86);
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertNotNull(realMatrixImpl88);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = bigMatrixImpl67.multiply(bigMatrixImpl90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl46.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.setSubMatrix(bigDecimalArray47, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl12.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = bigMatrixImpl40.getEntryAsDouble((int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        java.math.BigDecimal[][] bigDecimalArray15 = bigMatrixImpl12.getDataRef();
        double[] doubleArray18 = new double[] { 1, (byte) 10 };
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[][] doubleArray34 = new double[][] { doubleArray18, doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl36.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl36.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl36.getRowMatrix(1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl12.preMultiply(bigMatrix42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigMatrix42);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.math.BigDecimal[] bigDecimalArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl1 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        int[] intArray29 = new int[] {};
        int[] intArray30 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl5.getSubMatrix(intArray29, intArray30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl44.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        int[] intArray19 = new int[] { (-1), (short) -1, 10, (short) -1 };
        int[] intArray26 = new int[] { (short) 1, (byte) 100, (byte) 100, (short) 10, (short) 100, (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl12.getSubMatrix(intArray19, intArray26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1, 10, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 100, 100, 10, 100, 100]");
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        int int15 = bigMatrixImpl12.getRowDimension();
        double[] doubleArray18 = new double[] { 1, (byte) 10 };
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[][] doubleArray34 = new double[][] { doubleArray18, doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        int int38 = bigMatrixImpl37.getRoundingMode();
        int int39 = bigMatrixImpl37.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = bigMatrixImpl12.multiply(bigMatrixImpl37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 64 + "'", int39 == 64);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = realMatrixImpl38.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        java.math.BigDecimal bigDecimal15 = null;
        java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal15 };
        java.math.BigDecimal bigDecimal17 = null;
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal19 = null;
        java.math.BigDecimal[] bigDecimalArray20 = new java.math.BigDecimal[] { bigDecimal19 };
        java.math.BigDecimal bigDecimal21 = null;
        java.math.BigDecimal[] bigDecimalArray22 = new java.math.BigDecimal[] { bigDecimal21 };
        java.math.BigDecimal bigDecimal23 = null;
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal[][] bigDecimalArray25 = new java.math.BigDecimal[][] { bigDecimalArray16, bigDecimalArray18, bigDecimalArray20, bigDecimalArray22, bigDecimalArray24 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = bigMatrixImpl12.add(bigMatrixImpl27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        bigMatrixImpl21.setRoundingMode((int) (short) 0);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl46.getData();
        bigMatrixImpl46.setScale((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl46);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(6, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        int int17 = realMatrixImpl12.getColumnDimension();
        double[] doubleArray20 = new double[] { 1.0d, 0.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = realMatrixImpl12.preMultiply(doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0]");
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl28.getColumnMatrix(0);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = realMatrixImpl28.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrix30);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl20.scalarMultiply(bigDecimal48);
        int[] intArray53 = new int[] { (short) 1, (byte) 100, (short) -1 };
        int[] intArray59 = new int[] { (byte) 1, 35, (byte) 1, 97, 'a' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl20.getSubMatrix(intArray53, intArray59);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1, 100, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 35, 1, 97, 97]");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl38.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl21.getSubMatrix((int) ' ', (int) 'a', 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        java.math.BigDecimal bigDecimal71 = null;
        java.math.BigDecimal[] bigDecimalArray72 = new java.math.BigDecimal[] { bigDecimal71 };
        java.math.BigDecimal bigDecimal73 = null;
        java.math.BigDecimal[] bigDecimalArray74 = new java.math.BigDecimal[] { bigDecimal73 };
        java.math.BigDecimal bigDecimal75 = null;
        java.math.BigDecimal[] bigDecimalArray76 = new java.math.BigDecimal[] { bigDecimal75 };
        java.math.BigDecimal bigDecimal77 = null;
        java.math.BigDecimal[] bigDecimalArray78 = new java.math.BigDecimal[] { bigDecimal77 };
        java.math.BigDecimal bigDecimal79 = null;
        java.math.BigDecimal[] bigDecimalArray80 = new java.math.BigDecimal[] { bigDecimal79 };
        java.math.BigDecimal[][] bigDecimalArray81 = new java.math.BigDecimal[][] { bigDecimalArray72, bigDecimalArray74, bigDecimalArray76, bigDecimalArray78, bigDecimalArray80 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl83 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray81, true);
        bigMatrixImpl83.setScale((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = bigMatrixImpl70.multiply(bigMatrixImpl83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigDecimalArray80);
        org.junit.Assert.assertNotNull(bigDecimalArray81);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        bigMatrixImpl21.setRoundingMode((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        boolean boolean43 = realMatrixImpl37.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl46.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        int int51 = realMatrixImpl49.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl37.subtract(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl30.subtract(realMatrixImpl52);
        double[] doubleArray55 = realMatrixImpl30.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray56 = bigMatrixImpl21.operate(doubleArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        java.math.BigDecimal bigDecimal46 = null;
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal bigDecimal48 = null;
        java.math.BigDecimal[] bigDecimalArray49 = new java.math.BigDecimal[] { bigDecimal48 };
        java.math.BigDecimal bigDecimal50 = null;
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal bigDecimal52 = null;
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal bigDecimal54 = null;
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal[][] bigDecimalArray56 = new java.math.BigDecimal[][] { bigDecimalArray47, bigDecimalArray49, bigDecimalArray51, bigDecimalArray53, bigDecimalArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56, true);
        int int59 = bigMatrixImpl58.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl44.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 64 + "'", int59 == 64);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl38.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.transpose();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal4 = bigMatrixImpl2.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix3);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = bigMatrixImpl12.getColumnAsDoubleArray((int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.getColumnMatrix((int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray23 = bigMatrixImpl20.getRow((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        int[] intArray20 = new int[] { (short) 0, 6, 'a', '4', (short) 1 };
        int[] intArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl12.getSubMatrix(intArray20, intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 6, 97, 52, 1]");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) -1, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        double double20 = realMatrixImpl5.getNorm();
        java.lang.Class<?> wildcardClass21 = realMatrixImpl5.getClass();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal3 = bigMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = null;
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal bigDecimal47 = null;
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal49 = null;
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal51 = null;
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal bigDecimal53 = null;
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal[][] bigDecimalArray55 = new java.math.BigDecimal[][] { bigDecimalArray46, bigDecimalArray48, bigDecimalArray50, bigDecimalArray52, bigDecimalArray54 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55, true);
        bigMatrixImpl57.setScale((int) (short) 0);
        bigMatrixImpl57.setRoundingMode(0);
        boolean boolean62 = bigMatrixImpl57.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl20.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        double[] doubleArray53 = realMatrixImpl50.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray55 = bigMatrixImpl20.operate(doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal bigDecimal27 = null;
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal bigDecimal29 = null;
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal31 = null;
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal bigDecimal33 = null;
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal bigDecimal35 = null;
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal[][] bigDecimalArray37 = new java.math.BigDecimal[][] { bigDecimalArray28, bigDecimalArray30, bigDecimalArray32, bigDecimalArray34, bigDecimalArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray37, true);
        bigMatrixImpl39.setRoundingMode((int) (short) 100);
        int int42 = bigMatrixImpl39.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl20.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.preMultiply(realMatrix9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        int[] intArray10 = new int[] { 35, (short) 0, (byte) -1 };
        int[] intArray17 = new int[] { 97, (byte) 10, (short) 10, ' ', 0, 2 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.getSubMatrix(intArray10, intArray17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[35, 0, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[97, 10, 10, 32, 0, 2]");
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        int[] intArray21 = new int[] { (short) 0, 10 };
        int[] intArray23 = new int[] { 'a' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl2.getSubMatrix(intArray21, intArray23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 10]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[97]");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray15 = bigMatrixImpl12.getColumn((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray22 = realMatrixImpl21.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl5.multiply(realMatrixImpl21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        boolean boolean41 = realMatrixImpl28.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl28.getRowMatrix((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = null;
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal bigDecimal47 = null;
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal49 = null;
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal51 = null;
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal bigDecimal53 = null;
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal[][] bigDecimalArray55 = new java.math.BigDecimal[][] { bigDecimalArray46, bigDecimalArray48, bigDecimalArray50, bigDecimalArray52, bigDecimalArray54 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl57.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl20.preMultiply(bigMatrix58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigMatrix58);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        int[] intArray46 = new int[] { '#' };
        int[] intArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl44.getSubMatrix(intArray46, intArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        boolean boolean17 = bigMatrixImpl12.isSquare();
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[][] doubleArray36 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        java.math.BigDecimal bigDecimal41 = bigMatrixImpl38.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray42 = bigMatrixImpl38.getData();
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[][] doubleArray61 = new double[][] { doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        java.math.BigDecimal bigDecimal66 = bigMatrixImpl63.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrixImpl38.scalarMultiply(bigDecimal66);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = bigMatrixImpl12.multiply(bigMatrixImpl38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigMatrix67);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', (int) '4');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = realMatrixImpl5.add(realMatrixImpl8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl5.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl15.scalarMultiply(1.0d);
        double[] doubleArray21 = realMatrixImpl15.getRow((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray22 = bigMatrixImpl2.solve(doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl67.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = realMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray72 = bigMatrixImpl42.getColumn(35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = realMatrixImpl5.add(realMatrixImpl8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl5.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl15.scalarMultiply(1.0d);
        double[] doubleArray21 = realMatrixImpl15.getRow((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = realMatrixImpl2.operate(doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        int[] intArray47 = new int[] { 35 };
        int[] intArray51 = new int[] { (byte) 10, 64, 'a' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl42.getSubMatrix(intArray47, intArray51);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[35]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10, 64, 97]");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = bigMatrixImpl44.getEntryAsDouble((int) '4', 64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl1 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) '#');
        int[] intArray20 = new int[] { 64, 10, (short) 1 };
        int[] intArray27 = new int[] { (short) 0, (byte) 100, 10, (byte) -1, 2, 5 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl2.getSubMatrix(intArray20, intArray27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[64, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 100, 10, -1, 2, 5]");
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl34.transpose();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int3 = bigMatrixImpl2.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl10.scalarMultiply((double) (byte) 0);
        boolean boolean13 = bigMatrixImpl2.equals((java.lang.Object) realMatrixImpl10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[][] doubleArray36 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray36);
        int int41 = realMatrixImpl40.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl40.scalarMultiply((double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(realMatrix43);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        double[] doubleArray27 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray28 = bigMatrixImpl21.solve(doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl6.multiply(realMatrix25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl6.scalarMultiply((double) (byte) 0);
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[][] doubleArray27 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20, doubleArray23, doubleArray26 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray27);
        int int32 = realMatrixImpl31.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl31.scalarMultiply((double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl6.add(realMatrixImpl31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl47.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray51 = bigMatrixImpl47.getData();
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        java.math.BigDecimal bigDecimal75 = bigMatrixImpl72.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl47.scalarMultiply(bigDecimal75);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl26.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigMatrix76);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray9 = new double[] { 1, (byte) 10 };
        double[] doubleArray12 = new double[] { 1, (byte) 10 };
        double[] doubleArray15 = new double[] { 1, (byte) 10 };
        double[] doubleArray18 = new double[] { 1, (byte) 10 };
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[][] doubleArray25 = new double[][] { doubleArray9, doubleArray12, doubleArray15, doubleArray18, doubleArray21, doubleArray24 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        int int28 = bigMatrixImpl27.getRowDimension();
        double[] doubleArray30 = bigMatrixImpl27.getColumnAsDoubleArray(1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray31 = realMatrixImpl5.preMultiply(doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        boolean boolean3 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl6.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl6.scalarAdd((double) (byte) 1);
        double[] doubleArray22 = realMatrixImpl6.getColumn((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = realMatrixImpl2.operate(doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        double[][] doubleArray17 = realMatrixImpl2.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl2.getSubMatrix((int) (short) 0, (int) (short) 100, 35, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        int int40 = realMatrixImpl38.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray42 = realMatrixImpl38.getColumn((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl17.solve(realMatrix27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl16.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl20);
        boolean boolean22 = realMatrixImpl16.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl25.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
        int int30 = realMatrixImpl28.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl16.subtract(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl34.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl34.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl28.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl9.multiply(realMatrix48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setScale(35);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = bigMatrixImpl20.getEntryAsDouble(0, 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = bigMatrixImpl24.getColumnAsDoubleArray((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        double[] doubleArray16 = realMatrixImpl14.getColumn(10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl26.scalarAdd((double) 4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl14.solve(realMatrix29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix29);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        int int11 = realMatrixImpl5.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl14.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl18.scalarMultiply((double) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl18.scalarMultiply((double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl5.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal bigDecimal22 = null;
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal bigDecimal24 = null;
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal26 = null;
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal28 = null;
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal30 = null;
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal[][] bigDecimalArray32 = new java.math.BigDecimal[][] { bigDecimalArray23, bigDecimalArray25, bigDecimalArray27, bigDecimalArray29, bigDecimalArray31 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray32, true);
        java.math.BigDecimal[][] bigDecimalArray35 = bigMatrixImpl34.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl20.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl20.getSubMatrix(0, 4, (int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        java.lang.Class<?> wildcardClass16 = bigMatrixImpl12.getClass();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = realMatrixImpl28.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl6.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl6.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl26.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        boolean boolean32 = realMatrixImpl26.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl35.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        int int40 = realMatrixImpl38.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl26.subtract(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl6.add(realMatrixImpl38);
        double[][] doubleArray43 = realMatrixImpl42.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl46.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl46.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl63.add(realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl66.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl70);
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrixImpl46.add(realMatrix71);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl42.subtract(realMatrixImpl46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl2.multiply(realMatrixImpl42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl15.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl19);
        boolean boolean21 = realMatrixImpl8.equals((java.lang.Object) realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl8.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl2.multiply(realMatrix22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        double[] doubleArray39 = realMatrixImpl37.getColumn(10);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray40 = bigMatrixImpl20.solve(doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.transpose();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl27.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl27.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl47.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl51);
        boolean boolean53 = realMatrixImpl47.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl56.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl59);
        int int61 = realMatrixImpl59.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl47.subtract(realMatrixImpl59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl27.add(realMatrixImpl59);
        double[][] doubleArray64 = realMatrixImpl63.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        boolean boolean66 = bigMatrixImpl21.equals((java.lang.Object) doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl28.getSubMatrix((int) 'a', (int) ' ', 2, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl2.add(realMatrix27);
        int[] intArray31 = new int[] { 10, (byte) 0 };
        int[] intArray35 = new int[] { ' ', 4, 5 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl2.getSubMatrix(intArray31, intArray35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[32, 4, 5]");
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[] doubleArray87 = new double[] { 1, (byte) 10 };
        double[][] doubleArray88 = new double[][] { doubleArray72, doubleArray75, doubleArray78, doubleArray81, doubleArray84, doubleArray87 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray88);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray88);
        int int91 = bigMatrixImpl90.getRowDimension();
        double[] doubleArray93 = bigMatrixImpl90.getColumnAsDoubleArray(1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray94 = realMatrixImpl42.operate(doubleArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 6 + "'", int91 == 6);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = realMatrixImpl5.getColumn(35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = realMatrixImpl9.getEntry(100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = bigMatrixImpl45.add(bigMatrixImpl67);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl67.getNorm();
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        int int93 = bigMatrixImpl92.getColumnDimension();
        int int94 = bigMatrixImpl92.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = bigMatrixImpl67.subtract(bigMatrixImpl92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl20.subtract(bigMatrixImpl67);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal99 = bigMatrixImpl67.getEntry((int) (byte) 0, 35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 64 + "'", int94 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl95);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        int int23 = realMatrixImpl22.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl22.getRowMatrix(0);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.multiply(realMatrix26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[][] doubleArray35 = new double[][] { doubleArray19, doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl38.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl12.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl70.getColumnMatrix((int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        double[] doubleArray30 = realMatrixImpl5.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl37.getSubMatrix((int) (short) 0, (int) (short) 1, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix38);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        java.math.BigDecimal bigDecimal29 = null;
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal31 = null;
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal bigDecimal33 = null;
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal bigDecimal35 = null;
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal37 = null;
        java.math.BigDecimal[] bigDecimalArray38 = new java.math.BigDecimal[] { bigDecimal37 };
        java.math.BigDecimal[][] bigDecimalArray39 = new java.math.BigDecimal[][] { bigDecimalArray30, bigDecimalArray32, bigDecimalArray34, bigDecimalArray36, bigDecimalArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray39, true);
        bigMatrixImpl41.setScale((int) (short) 0);
        int int44 = bigMatrixImpl41.getRoundingMode();
        int int45 = bigMatrixImpl41.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl28.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray14 = bigMatrixImpl12.getDataRef();
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[][] doubleArray33 = new double[][] { doubleArray17, doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        java.math.BigDecimal bigDecimal38 = bigMatrixImpl35.getEntry(0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl12.scalarMultiply(bigDecimal38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigDecimal38);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int3 = bigMatrixImpl2.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(35, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl5.transpose();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = realMatrixImpl5.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setScale(35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl36.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl29.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl29.scalarAdd((double) (byte) 1);
        double[] doubleArray45 = realMatrixImpl29.getColumn((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray46 = bigMatrixImpl20.operate(doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl22.add(realMatrixImpl25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl36.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl29.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl29.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl26.add(realMatrix43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl5.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrixImpl26);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl44.getRowMatrix(0);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl44.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigMatrix47);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int[] intArray5 = new int[] { 100, 97 };
        int[] intArray8 = new int[] { (short) 100, 'a' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix9 = bigMatrixImpl2.getSubMatrix(intArray5, intArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[100, 97]");
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl2.getSubMatrix(10, 1, (int) (short) -1, 2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray3);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        double[] doubleArray7 = new double[] { 1, (byte) 10 };
        double[] doubleArray10 = new double[] { 1, (byte) 10 };
        double[] doubleArray13 = new double[] { 1, (byte) 10 };
        double[] doubleArray16 = new double[] { 1, (byte) 10 };
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[][] doubleArray23 = new double[][] { doubleArray7, doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        int int26 = bigMatrixImpl25.getRowDimension();
        double[] doubleArray28 = bigMatrixImpl25.getColumnAsDoubleArray(1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray29 = realMatrixImpl2.preMultiply(doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = realMatrixImpl5.add(realMatrixImpl8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl15.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl19);
        boolean boolean21 = realMatrixImpl15.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl24.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl27);
        int int29 = realMatrixImpl27.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl15.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl8.subtract(realMatrixImpl30);
        double[] doubleArray33 = realMatrixImpl8.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray34 = realMatrixImpl2.preMultiply(doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = bigMatrixImpl12.getColumnAsDoubleArray((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = bigMatrixImpl45.add(bigMatrixImpl67);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl67.getNorm();
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        int int93 = bigMatrixImpl92.getColumnDimension();
        int int94 = bigMatrixImpl92.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = bigMatrixImpl67.subtract(bigMatrixImpl92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl20.subtract(bigMatrixImpl67);
        bigMatrixImpl67.setScale((int) '4');
        java.math.BigDecimal[][] bigDecimalArray99 = bigMatrixImpl67.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 64 + "'", int94 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl95);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
        org.junit.Assert.assertNotNull(bigDecimalArray99);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = bigMatrixImpl12.getRowAsDoubleArray((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl12.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        java.math.BigDecimal bigDecimal94 = bigMatrixImpl91.getEntry(0, (int) (short) 0);
        boolean boolean95 = bigMatrixImpl91.isSingular();
        java.math.BigDecimal[][] bigDecimalArray96 = bigMatrixImpl91.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl70.setSubMatrix(bigDecimalArray96, 0, 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray96);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl26.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl26.getColumn((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(bigMatrix50);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        java.lang.Object obj17 = null;
        boolean boolean18 = realMatrixImpl2.equals(obj17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.transpose();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal4 = bigMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix3);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl5.transpose();
        int int13 = realMatrixImpl5.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix(64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray46 = bigMatrixImpl44.getRow((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        double[][] doubleArray16 = realMatrixImpl2.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        int int15 = bigMatrixImpl12.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray16 = bigMatrixImpl12.getDataAsDoubleArray();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl6.getColumnMatrix((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getRowDimension();
        java.math.BigDecimal bigDecimal22 = null;
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal bigDecimal24 = null;
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal26 = null;
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal28 = null;
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal30 = null;
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal[][] bigDecimalArray32 = new java.math.BigDecimal[][] { bigDecimalArray23, bigDecimalArray25, bigDecimalArray27, bigDecimalArray29, bigDecimalArray31 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray32, true);
        bigMatrixImpl34.setScale((int) (short) 0);
        int int37 = bigMatrixImpl34.getRoundingMode();
        int int38 = bigMatrixImpl34.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = bigMatrixImpl20.multiply(bigMatrixImpl34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl5.scalarAdd((double) 97);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = realMatrixImpl5.getEntry((int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal71 = bigMatrixImpl42.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = realMatrixImpl2.solve(doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl34.getRowMatrix(10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = realMatrixImpl2.getEntry(35, 5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl36.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl29.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl29.scalarAdd((double) (byte) 1);
        double[] doubleArray45 = realMatrixImpl29.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray47 = bigMatrixImpl20.solve(doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl44.transpose();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal47 = bigMatrixImpl44.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigMatrix46);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = bigMatrixImpl12.transpose();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        double[] doubleArray22 = realMatrixImpl19.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl12.solve(doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.getColumnMatrix(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl20.getSubMatrix((int) (short) -1, 0, (int) (byte) 0, 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int3 = bigMatrixImpl2.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl10.scalarMultiply((double) (byte) 0);
        boolean boolean13 = bigMatrixImpl2.equals((java.lang.Object) realMatrixImpl10);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal16 = bigMatrixImpl2.getEntry(64, 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        java.lang.String str19 = bigMatrixImpl12.toString();
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[][] doubleArray38 = new double[][] { doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl39.getNorm();
        java.math.BigDecimal[] bigDecimalArray41 = new java.math.BigDecimal[] { bigDecimal40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray44 = bigMatrixImpl12.operate(bigDecimalArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "BigMatrixImpl{{null},{null},{null},{null},{null}}" + "'", str19, "BigMatrixImpl{{null},{null},{null},{null},{null}}");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        java.lang.String[] strArray4 = new java.lang.String[] { "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{null},{null},{null},{null},{null}}", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{null},{null},{null},{null},{null}}", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{null},{null},{null},{null},{null}}", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "" };
        java.lang.String[] strArray19 = new java.lang.String[] { "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{null},{null},{null},{null},{null}}", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "" };
        java.lang.String[] strArray24 = new java.lang.String[] { "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{null},{null},{null},{null},{null}}", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "" };
        java.lang.String[] strArray29 = new java.lang.String[] { "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{null},{null},{null},{null},{null}}", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "" };
        java.lang.String[][] strArray30 = new java.lang.String[][] { strArray4, strArray9, strArray14, strArray19, strArray24, strArray29 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(strArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl73.add(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl85 = realMatrixImpl73.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix87 = realMatrixImpl73.scalarAdd((double) (byte) 1);
        double[] doubleArray89 = realMatrixImpl73.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray93 = bigMatrixImpl67.operate(doubleArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrixImpl85);
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = realMatrixImpl28.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal21 = bigMatrixImpl19.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        int int17 = realMatrixImpl2.getRowDimension();
        int[] intArray22 = new int[] { 10, 97, 5, 4 };
        int[] intArray24 = new int[] { (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl2.getSubMatrix(intArray22, intArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[10, 97, 5, 4]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1]");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray72 = bigMatrixImpl70.getColumnAsDoubleArray(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl5.getColumnMatrix(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl20.getSubMatrix(100, (int) (byte) 0, (int) (short) 0, 5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        double[] doubleArray18 = realMatrixImpl2.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl27.scalarMultiply((double) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl27.scalarMultiply((double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl20.add(realMatrix31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix31);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl23.getRow((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[][] doubleArray35 = new double[][] { doubleArray19, doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        int int39 = bigMatrixImpl38.getRoundingMode();
        int int40 = bigMatrixImpl38.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl38.transpose();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl44.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl44.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl61.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrixImpl64.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl68);
        boolean boolean70 = realMatrixImpl64.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl73.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl76);
        int int78 = realMatrixImpl76.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = realMatrixImpl64.subtract(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = realMatrixImpl44.add(realMatrixImpl76);
        double[][] doubleArray81 = realMatrixImpl80.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray81);
        boolean boolean83 = bigMatrixImpl38.equals((java.lang.Object) doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix84 = bigMatrixImpl12.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 64 + "'", int40 == 64);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl79);
        org.junit.Assert.assertNotNull(realMatrixImpl80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl19.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        bigMatrixImpl20.setScale(5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl20.getRowMatrix((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl26.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[][] doubleArray69 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65, doubleArray68 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl72.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73, false);
        int int76 = bigMatrixImpl75.getRoundingMode();
        int int77 = bigMatrixImpl75.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = bigMatrixImpl26.multiply(bigMatrixImpl75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        bigMatrixImpl12.setRoundingMode((int) (byte) 100);
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[][] doubleArray36 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl39.getData();
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[][] doubleArray59 = new double[][] { doubleArray43, doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        java.math.BigDecimal bigDecimal64 = bigMatrixImpl61.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl39.scalarAdd(bigDecimal64);
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[] doubleArray83 = new double[] { 1, (byte) 10 };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray84);
        java.math.BigDecimal bigDecimal86 = bigMatrixImpl85.getNorm();
        java.math.BigDecimal[] bigDecimalArray87 = new java.math.BigDecimal[] { bigDecimal64, bigDecimal86 };
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray88 = bigMatrixImpl12.preMultiply(bigDecimalArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigDecimalArray87);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl2.getSubMatrix(64, (int) (short) -1, (int) '#', (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal27 = bigMatrixImpl20.getEntry((int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl46.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl50);
        boolean boolean52 = realMatrixImpl46.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl55.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl58);
        int int60 = realMatrixImpl58.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl46.subtract(realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl71.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl64.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl64.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl58.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = realMatrixImpl40.multiply(realMatrixImpl58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrix78);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) (byte) 1);
        double[] doubleArray37 = realMatrixImpl21.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray41 = realMatrixImpl16.solve(doubleArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setScale(35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl20.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.getColumnMatrix(0);
        java.lang.Class<?> wildcardClass47 = bigMatrix46.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        java.math.BigDecimal[] bigDecimalArray4 = new java.math.BigDecimal[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray5 = bigMatrixImpl2.solve(bigDecimalArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        double[] doubleArray30 = realMatrixImpl5.getRow((int) (short) 0);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        int int23 = realMatrixImpl22.getRowDimension();
        int[] intArray25 = new int[] { (short) 1 };
        int[] intArray31 = new int[] { 1, (short) 10, (-1), 5, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl22.getSubMatrix(intArray25, intArray31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1, 10, -1, 5, 100]");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        int int40 = realMatrixImpl38.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double41 = realMatrixImpl38.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        double[] doubleArray18 = realMatrixImpl2.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl24.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl24.scalarAdd((double) (byte) 1);
        double[] doubleArray40 = realMatrixImpl24.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray42 = realMatrixImpl21.operate(doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        double[][] doubleArray37 = realMatrixImpl36.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl36.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(doubleArray37);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        boolean boolean17 = bigMatrixImpl12.isSquare();
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[][] doubleArray36 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[][] doubleArray57 = new double[][] { doubleArray41, doubleArray44, doubleArray47, doubleArray50, doubleArray53, doubleArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        int int61 = bigMatrixImpl60.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = bigMatrixImpl38.add(bigMatrixImpl60);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl38.getColumnMatrix(0);
        double[] doubleArray66 = bigMatrixImpl38.getRowAsDoubleArray((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray67 = bigMatrixImpl12.operate(doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl62);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 100, (int) (byte) 10);
        java.math.BigDecimal bigDecimal5 = bigMatrixImpl2.getEntry((int) '4', 2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl2.getRowMatrix((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(bigDecimal5);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        bigMatrixImpl20.setScale(5);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal27 = bigMatrixImpl20.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = bigMatrixImpl2.getRowAsDoubleArray((int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        double double11 = realMatrixImpl9.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = realMatrixImpl9.getColumn(2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.add(bigMatrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        bigMatrixImpl12.setRoundingMode((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = bigMatrixImpl12.getColumnAsDoubleArray((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getRowDimension();
        double[] doubleArray23 = bigMatrixImpl20.getColumnAsDoubleArray(1);
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] {};
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.setSubMatrix(bigDecimalArray24, (int) (short) 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must have at least one row.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray24);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = bigMatrixImpl24.getRowAsDoubleArray((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[][] doubleArray21 = new double[][] { doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl22.getNorm();
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray27 = bigMatrixImpl2.preMultiply(bigDecimalArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        int[] intArray27 = new int[] { (short) -1 };
        int[] intArray32 = new int[] { '4', (byte) 10, (byte) -1, (short) 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl24.getSubMatrix(intArray27, intArray32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[52, 10, -1, 10]");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        java.math.BigDecimal bigDecimal47 = bigMatrixImpl46.getNorm();
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48);
        java.math.BigDecimal[] bigDecimalArray51 = bigMatrixImpl49.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl21.operate(bigDecimalArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl2.copy();
        boolean boolean40 = realMatrixImpl2.isSquare();
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[][] doubleArray59 = new double[][] { doubleArray43, doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        java.math.BigDecimal bigDecimal64 = bigMatrixImpl61.getEntry(0, (int) (short) 0);
        double[][] doubleArray65 = bigMatrixImpl61.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl2.setSubMatrix(doubleArray65, (-1), 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(doubleArray65);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        boolean boolean20 = realMatrixImpl5.equals((java.lang.Object) 0.0d);
        boolean boolean21 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl31.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl31.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl28.add(realMatrix45);
        int int47 = realMatrixImpl28.getRowDimension();
        double[][] doubleArray48 = realMatrixImpl28.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl5.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(doubleArray48);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl2.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        java.lang.Class<?> wildcardClass8 = realMatrixImpl6.getClass();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl5.getColumnMatrix((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl50.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl54);
        boolean boolean56 = realMatrixImpl50.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl59.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl62);
        int int64 = realMatrixImpl62.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl50.subtract(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl43.subtract(realMatrixImpl65);
        double[] doubleArray68 = realMatrixImpl43.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl71.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = realMatrixImpl23.multiply(realMatrixImpl78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix77);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal32 = bigMatrixImpl20.getEntry(4, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        java.math.BigDecimal[][] bigDecimalArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl1 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        double[] doubleArray30 = realMatrixImpl27.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray32 = bigMatrixImpl20.solve(doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        boolean boolean17 = bigMatrixImpl12.isSquare();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int21 = bigMatrixImpl20.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl12.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl5.getRowMatrix(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[][] doubleArray63 = new double[][] { doubleArray47, doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        int int66 = bigMatrixImpl65.getScale();
        java.math.BigDecimal[][] bigDecimalArray67 = bigMatrixImpl65.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.setSubMatrix(bigDecimalArray67, 4, 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 64 + "'", int66 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        java.lang.Class<?> wildcardClass41 = realMatrixImpl28.getClass();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        boolean boolean19 = realMatrixImpl2.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl2.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray14 = bigMatrixImpl12.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix16 = bigMatrixImpl12.getColumnMatrix(64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl5.getSubMatrix(97, (int) (short) 100, (-1), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl20.getRowMatrix((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal25 = bigMatrixImpl22.getEntry((int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl44.getRowMatrix(0);
        boolean boolean48 = bigMatrixImpl44.isSquare();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        java.math.BigDecimal[][] bigDecimalArray52 = bigMatrixImpl51.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl44.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        double[] doubleArray30 = realMatrixImpl5.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        double double39 = realMatrixImpl37.getNorm();
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[][] doubleArray58 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray58);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray58);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray58);
        int int62 = bigMatrixImpl61.getRoundingMode();
        int int63 = bigMatrixImpl61.getScale();
        int int64 = bigMatrixImpl61.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = realMatrixImpl67.add(realMatrixImpl70);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = realMatrixImpl74.add(realMatrixImpl77);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl85 = realMatrixImpl81.add(realMatrixImpl84);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl86 = realMatrixImpl74.add(realMatrixImpl84);
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl74.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl71.add(realMatrix88);
        double[] doubleArray91 = realMatrixImpl71.getRow((int) (byte) 1);
        boolean boolean92 = bigMatrixImpl61.equals((java.lang.Object) doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray93 = realMatrixImpl37.preMultiply(doubleArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 64 + "'", int63 == 64);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 64 + "'", int64 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl71);
        org.junit.Assert.assertNotNull(realMatrixImpl78);
        org.junit.Assert.assertNotNull(realMatrixImpl85);
        org.junit.Assert.assertNotNull(realMatrixImpl86);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl40.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl50.scalarMultiply(1.0d);
        double[] doubleArray56 = realMatrixImpl50.getRow((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl17.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        bigMatrixImpl21.setRoundingMode((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl21.getSubMatrix(100, 5, (int) (byte) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl2.getSubMatrix((int) (byte) 100, (int) (byte) -1, (int) ' ', (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = bigMatrixImpl12.getEntryAsDouble((int) (byte) 0, 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = realMatrixImpl2.getEntry(5, 64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        int int25 = realMatrixImpl6.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl6.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal47 = bigMatrixImpl42.getEntry(0, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = bigMatrixImpl25.getColumnAsDoubleArray(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.scalarMultiply((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = realMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrix38);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 100, (int) (byte) 10);
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[][] doubleArray21 = new double[][] { doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl24.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl2.setSubMatrix(bigDecimalArray25, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl26.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        java.math.BigDecimal[] bigDecimalArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl48.preMultiply(bigDecimalArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(bigMatrix50);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl44.transpose();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl44.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigMatrix46);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl5.scalarAdd((double) 97);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        double[] doubleArray30 = realMatrixImpl27.getColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray31 = realMatrixImpl5.operate(doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        bigMatrixImpl21.setRoundingMode((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal25 = bigMatrixImpl21.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        boolean boolean42 = bigMatrixImpl41.isSquare();
        java.math.BigDecimal[][] bigDecimalArray43 = bigMatrixImpl41.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.setSubMatrix(bigDecimalArray43, (int) (short) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        boolean boolean50 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal54 = bigMatrixImpl21.getEntry((int) (short) 0, 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray72 = bigMatrixImpl42.getColumnAsDoubleArray(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        boolean boolean14 = bigMatrixImpl12.isSingular();
        int int15 = bigMatrixImpl12.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl12.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = bigMatrixImpl2.getEntryAsDouble((int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = bigMatrixImpl20.getRowAsDoubleArray(6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl12.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setScale(35);
        java.math.BigDecimal bigDecimal27 = null;
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal bigDecimal29 = null;
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal31 = null;
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal bigDecimal33 = null;
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal bigDecimal35 = null;
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal[][] bigDecimalArray37 = new java.math.BigDecimal[][] { bigDecimalArray28, bigDecimalArray30, bigDecimalArray32, bigDecimalArray34, bigDecimalArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray37, true);
        bigMatrixImpl39.setScale((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl20.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray40 = realMatrixImpl38.getColumn(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        int int41 = realMatrixImpl40.getRowDimension();
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[][] doubleArray60 = new double[][] { doubleArray44, doubleArray47, doubleArray50, doubleArray53, doubleArray56, doubleArray59 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray60);
        int int65 = realMatrixImpl64.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl64.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl64.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrixImpl40.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int20 = bigMatrixImpl19.getRoundingMode();
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        java.math.BigDecimal bigDecimal41 = bigMatrixImpl40.getNorm();
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray45 = bigMatrixImpl19.operate(bigDecimalArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = bigMatrixImpl45.add(bigMatrixImpl67);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl67.getNorm();
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        int int93 = bigMatrixImpl92.getColumnDimension();
        int int94 = bigMatrixImpl92.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = bigMatrixImpl67.subtract(bigMatrixImpl92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl20.subtract(bigMatrixImpl67);
        int int97 = bigMatrixImpl96.getRoundingMode();
        java.math.BigDecimal bigDecimal98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix99 = bigMatrixImpl96.scalarAdd(bigDecimal98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 64 + "'", int94 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl95);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 4 + "'", int97 == 4);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        double double20 = realMatrixImpl5.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = realMatrixImpl5.getRow(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal25 = bigMatrixImpl21.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = realMatrixImpl2.getEntry((int) (byte) 100, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrixImpl6.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl10.add(realMatrixImpl13);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl13.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        boolean boolean19 = realMatrixImpl13.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl25);
        int int27 = realMatrixImpl25.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl13.subtract(realMatrixImpl25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl41.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        boolean boolean47 = realMatrixImpl34.equals((java.lang.Object) realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl13.add(realMatrixImpl45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl6.multiply(realMatrixImpl45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        java.lang.String str71 = bigMatrixImpl70.toString();
        boolean boolean72 = bigMatrixImpl70.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl70.getSubMatrix((int) (byte) 100, 64, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}" + "'", str71, "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        double[] doubleArray30 = realMatrixImpl5.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        double double39 = realMatrixImpl37.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl37.getColumnMatrix(5);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray43 = realMatrixImpl37.getRow((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix41);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        int int17 = bigMatrixImpl12.getRoundingMode();
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[][] doubleArray36 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl39.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray40, false);
        boolean boolean43 = bigMatrixImpl42.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl12.subtract(bigMatrixImpl42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl26.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[][] doubleArray69 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65, doubleArray68 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl72.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73, false);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl48.setSubMatrix(bigDecimalArray73, (int) (short) 100, 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        java.math.BigDecimal[] bigDecimalArray0 = new java.math.BigDecimal[] {};
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] {};
        java.math.BigDecimal[][] bigDecimalArray2 = new java.math.BigDecimal[][] { bigDecimalArray0, bigDecimalArray1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must have at least one column.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray0);
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray2);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int41 = realMatrixImpl28.getRowDimension();
        int[] intArray43 = new int[] { 5 };
        int[] intArray50 = new int[] { (short) 0, 4, (short) 100, 10, 4, (short) 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl28.getSubMatrix(intArray43, intArray50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[5]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 4, 100, 10, 4, 10]");
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        int int69 = bigMatrixImpl68.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl46.add(bigMatrixImpl68);
        java.math.BigDecimal bigDecimal71 = bigMatrixImpl68.getNorm();
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[] doubleArray83 = new double[] { 1, (byte) 10 };
        double[] doubleArray86 = new double[] { 1, (byte) 10 };
        double[] doubleArray89 = new double[] { 1, (byte) 10 };
        double[][] doubleArray90 = new double[][] { doubleArray74, doubleArray77, doubleArray80, doubleArray83, doubleArray86, doubleArray89 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray90);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray90);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray90);
        int int94 = bigMatrixImpl93.getColumnDimension();
        int int95 = bigMatrixImpl93.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl68.subtract(bigMatrixImpl93);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl97 = bigMatrixImpl20.multiply(bigMatrixImpl93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 64 + "'", int95 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl44.getRowMatrix(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl44.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigMatrix47);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        int int39 = realMatrixImpl38.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl38.getColumnMatrix((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[][] doubleArray71 = bigMatrixImpl67.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl67.getSubMatrix((int) (byte) -1, (int) (short) 1, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray71);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        bigMatrixImpl70.setRoundingMode(97);
        bigMatrixImpl70.setRoundingMode((int) '#');
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[] doubleArray83 = new double[] { 1, (byte) 10 };
        double[] doubleArray86 = new double[] { 1, (byte) 10 };
        double[] doubleArray89 = new double[] { 1, (byte) 10 };
        double[] doubleArray92 = new double[] { 1, (byte) 10 };
        double[][] doubleArray93 = new double[][] { doubleArray77, doubleArray80, doubleArray83, doubleArray86, doubleArray89, doubleArray92 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl94 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray93);
        java.math.BigDecimal bigDecimal95 = bigMatrixImpl94.getNorm();
        java.math.BigDecimal[] bigDecimalArray96 = new java.math.BigDecimal[] { bigDecimal95 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl97 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray96);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl98 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray96);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray99 = bigMatrixImpl70.preMultiply(bigDecimalArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertNotNull(bigDecimal95);
        org.junit.Assert.assertNotNull(bigDecimalArray96);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        java.math.BigDecimal[] bigDecimalArray4 = bigMatrixImpl2.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl2.getColumnMatrix((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray4);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl35.scalarMultiply(1.0d);
        int int40 = realMatrixImpl35.getColumnDimension();
        boolean boolean41 = bigMatrixImpl20.equals((java.lang.Object) realMatrixImpl35);
        bigMatrixImpl20.setScale(6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl20.getSubMatrix((int) (byte) 100, (int) (short) -1, 35, 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        boolean boolean14 = bigMatrixImpl12.isSingular();
        int int15 = bigMatrixImpl12.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrixImpl12.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = bigMatrixImpl12.getEntryAsDouble((-1), 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal3 = bigMatrixImpl2.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[][] doubleArray63 = new double[][] { doubleArray47, doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        int int66 = bigMatrixImpl65.getScale();
        java.math.BigDecimal[][] bigDecimalArray67 = bigMatrixImpl65.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl65.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl21.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 64 + "'", int66 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
        org.junit.Assert.assertNotNull(bigMatrix68);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = bigMatrixImpl47.add(bigMatrixImpl69);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl21.scalarAdd(bigDecimal72);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = bigMatrixImpl21.getEntryAsDouble((int) (short) 1, 64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        int int90 = bigMatrixImpl89.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = bigMatrixImpl67.add(bigMatrixImpl89);
        java.math.BigDecimal bigDecimal92 = bigMatrixImpl89.getNorm();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl20.subtract(bigMatrixImpl89);
        java.lang.Class<?> wildcardClass94 = bigMatrixImpl89.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl12.copy();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal16 = bigMatrixImpl12.getNorm();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigMatrix15);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl50.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl54);
        boolean boolean56 = realMatrixImpl50.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl59.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl62);
        int int64 = realMatrixImpl62.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl50.subtract(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl43.subtract(realMatrixImpl65);
        double[] doubleArray68 = realMatrixImpl43.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl71.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrixImpl80.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = realMatrixImpl87.add(realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl94 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix95 = realMatrixImpl90.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl94);
        boolean boolean96 = realMatrixImpl83.equals((java.lang.Object) realMatrixImpl94);
        org.apache.commons.math.linear.RealMatrix realMatrix97 = realMatrixImpl83.copy();
        boolean boolean98 = realMatrixImpl83.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl99 = realMatrixImpl43.subtract(realMatrixImpl83);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertNotNull(realMatrixImpl91);
        org.junit.Assert.assertNotNull(realMatrix95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(realMatrix97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl99);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        double double11 = realMatrixImpl9.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl9.getColumnMatrix(35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        int[] intArray29 = new int[] { 5, 5, 1 };
        int[] intArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl25.getSubMatrix(intArray29, intArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[5, 5, 1]");
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        bigMatrixImpl20.setScale((int) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        boolean boolean10 = realMatrixImpl5.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl5.getRowMatrix(5);
        double[] doubleArray15 = new double[] { 1, (byte) 10 };
        double[] doubleArray18 = new double[] { 1, (byte) 10 };
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[][] doubleArray31 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24, doubleArray27, doubleArray30 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray31);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray31);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray31);
        int int36 = realMatrixImpl35.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl35.getRowMatrix(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(realMatrix38);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal73 = bigMatrixImpl67.getEntry((int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray3 = realMatrixImpl2.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = realMatrixImpl2.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "hi!", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray5 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl32.scalarMultiply((double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl25.preMultiply(realMatrix34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl73.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl42.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(bigMatrix74);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl2.add(realMatrixImpl15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = realMatrixImpl18.add(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl18.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl18.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        boolean boolean44 = realMatrixImpl38.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl47.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl50);
        int int52 = realMatrixImpl50.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl38.subtract(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl18.add(realMatrixImpl50);
        double[][] doubleArray55 = realMatrixImpl54.getData();
        int int56 = realMatrixImpl54.getColumnDimension();
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[][] doubleArray75 = new double[][] { doubleArray59, doubleArray62, doubleArray65, doubleArray68, doubleArray71, doubleArray74 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray75);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray75);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray75);
        int int80 = realMatrixImpl79.getRowDimension();
        boolean boolean81 = realMatrixImpl54.equals((java.lang.Object) int80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrixImpl2.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrixImpl22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        boolean boolean29 = realMatrixImpl28.isSquare();
        double[][] doubleArray30 = realMatrixImpl28.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray30, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl45.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        boolean boolean51 = realMatrixImpl45.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        int int59 = realMatrixImpl57.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = realMatrixImpl45.subtract(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl38.subtract(realMatrixImpl60);
        double[] doubleArray63 = realMatrixImpl38.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray64 = realMatrixImpl32.solve(doubleArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl60);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        double[] doubleArray23 = realMatrixImpl20.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl12.solve(doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int20 = bigMatrixImpl19.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray22 = bigMatrixImpl19.getColumn((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.getColumnMatrix(0);
        int int47 = bigMatrixImpl20.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal48 = bigMatrixImpl20.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl32.add(realMatrixImpl42);
        double[] doubleArray46 = realMatrixImpl44.getColumn(10);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray47 = bigMatrixImpl20.operate(doubleArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix(10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        boolean boolean41 = realMatrixImpl28.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl28.getRowMatrix(2);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl46.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl46.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl63.add(realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl66.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl70);
        boolean boolean72 = realMatrixImpl66.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl75.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl78);
        int int80 = realMatrixImpl78.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = realMatrixImpl66.subtract(realMatrixImpl78);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = realMatrixImpl46.add(realMatrixImpl78);
        int int83 = realMatrixImpl46.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl28.multiply(realMatrixImpl46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl81);
        org.junit.Assert.assertNotNull(realMatrixImpl82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl20.getSubMatrix(1, 10, 5, 2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        java.lang.Class<?> wildcardClass18 = realMatrixImpl12.getClass();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl42.getData();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray48 = bigMatrixImpl42.getColumnAsDoubleArray(6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        boolean boolean3 = realMatrixImpl2.isSquare();
        double[] doubleArray6 = new double[] { 1, (byte) 10 };
        double[] doubleArray9 = new double[] { 1, (byte) 10 };
        double[] doubleArray12 = new double[] { 1, (byte) 10 };
        double[] doubleArray15 = new double[] { 1, (byte) 10 };
        double[] doubleArray18 = new double[] { 1, (byte) 10 };
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[][] doubleArray22 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15, doubleArray18, doubleArray21 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray22);
        int int27 = realMatrixImpl26.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl26.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl26.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl2.solve(realMatrix30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        int int40 = realMatrixImpl38.getColumnDimension();
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[][] doubleArray59 = new double[][] { doubleArray43, doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray59);
        int int64 = realMatrixImpl63.getRowDimension();
        boolean boolean65 = realMatrixImpl38.equals((java.lang.Object) int64);
        int int66 = realMatrixImpl38.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl69.scalarMultiply((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrixImpl38.add(realMatrix71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(realMatrix71);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray0, strArray1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must have at least one column.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must have at least one column.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl25.getColumnMatrix((int) ' ');
        double[][] doubleArray40 = realMatrixImpl25.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl43.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl43.scalarAdd((double) (byte) 1);
        double[] doubleArray59 = realMatrixImpl43.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray59);
        double[] doubleArray63 = realMatrixImpl25.preMultiply(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray64 = bigMatrixImpl21.operate(doubleArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl6.getSubMatrix(10, (int) (short) 1, (int) 'a', 64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        bigMatrixImpl20.setScale(5);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = bigMatrixImpl20.getRowAsDoubleArray(35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.copy();
        java.math.BigDecimal[] bigDecimalArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray48 = bigMatrixImpl20.solve(bigDecimalArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigMatrix46);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl21.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl16.subtract(realMatrixImpl21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.getSubMatrix(35, (int) (short) 10, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl50.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl54);
        boolean boolean56 = realMatrixImpl50.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl59.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl62);
        int int64 = realMatrixImpl62.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl50.subtract(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl43.subtract(realMatrixImpl65);
        double[] doubleArray68 = realMatrixImpl43.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl71.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl43);
        double double78 = realMatrixImpl43.getNorm();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setScale((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl12.getSubMatrix(1, (int) 'a', 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal14 = bigMatrixImpl12.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setScale((int) ' ');
        double[] doubleArray23 = new double[] { 10.0d, '#', 100.0d, 0.0f, 100, 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray24 = bigMatrixImpl12.operate(doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 35.0, 100.0, 0.0, 100.0, 97.0]");
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        double double20 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl26.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        boolean boolean32 = realMatrixImpl26.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl35.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        int int40 = realMatrixImpl38.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl26.subtract(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl44.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl54.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl58);
        boolean boolean60 = realMatrixImpl47.equals((java.lang.Object) realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl26.add(realMatrixImpl58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl5.multiply(realMatrixImpl61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl43.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl21.scalarAdd(bigDecimal46);
        int[] intArray52 = new int[] { (byte) 100, (short) 0, 64, (byte) 10 };
        int[] intArray58 = new int[] { 100, 10, 100, 1, (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl21.getSubMatrix(intArray52, intArray58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[100, 0, 64, 10]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[100, 10, 100, 1, -1]");
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = bigMatrixImpl12.getRowAsDoubleArray(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        double[] doubleArray18 = realMatrixImpl2.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl35);
        boolean boolean37 = realMatrixImpl24.equals((java.lang.Object) realMatrixImpl35);
        int int38 = realMatrixImpl35.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl2.multiply(realMatrixImpl35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        java.math.BigDecimal[] bigDecimalArray75 = bigMatrixImpl73.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray76 = bigMatrixImpl42.operate(bigDecimalArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.String[] strArray3 = new java.lang.String[] { "" };
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.lang.String[][] strArray8 = new java.lang.String[][] { strArray1, strArray3, strArray5, strArray7 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.multiply(realMatrix41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        int int41 = realMatrixImpl40.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl40.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(4, 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl2.getSubMatrix(2, 64, 0, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        int[] intArray46 = new int[] { 64, 64, 5, (byte) 1, 97 };
        int[] intArray47 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl37.getSubMatrix(intArray46, intArray47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[64, 64, 5, 1, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl2.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix4);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = bigMatrixImpl45.add(bigMatrixImpl67);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl67.getNorm();
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        int int93 = bigMatrixImpl92.getColumnDimension();
        int int94 = bigMatrixImpl92.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = bigMatrixImpl67.subtract(bigMatrixImpl92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl20.subtract(bigMatrixImpl67);
        // The following exception was thrown during execution in test generation
        try {
            double double99 = bigMatrixImpl67.getEntryAsDouble((int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 64 + "'", int94 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl95);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        boolean boolean71 = bigMatrixImpl67.isSingular();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl67.getData();
        java.math.BigDecimal bigDecimal73 = null;
        java.math.BigDecimal[] bigDecimalArray74 = new java.math.BigDecimal[] { bigDecimal73 };
        java.math.BigDecimal bigDecimal75 = null;
        java.math.BigDecimal[] bigDecimalArray76 = new java.math.BigDecimal[] { bigDecimal75 };
        java.math.BigDecimal bigDecimal77 = null;
        java.math.BigDecimal[] bigDecimalArray78 = new java.math.BigDecimal[] { bigDecimal77 };
        java.math.BigDecimal bigDecimal79 = null;
        java.math.BigDecimal[] bigDecimalArray80 = new java.math.BigDecimal[] { bigDecimal79 };
        java.math.BigDecimal bigDecimal81 = null;
        java.math.BigDecimal[] bigDecimalArray82 = new java.math.BigDecimal[] { bigDecimal81 };
        java.math.BigDecimal[][] bigDecimalArray83 = new java.math.BigDecimal[][] { bigDecimalArray74, bigDecimalArray76, bigDecimalArray78, bigDecimalArray80, bigDecimalArray82 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray83, true);
        bigMatrixImpl85.setScale((int) (short) 0);
        int int88 = bigMatrixImpl85.getRoundingMode();
        bigMatrixImpl85.setRoundingMode((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrixImpl67.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigDecimalArray80);
        org.junit.Assert.assertNotNull(bigDecimalArray82);
        org.junit.Assert.assertNotNull(bigDecimalArray83);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        java.math.BigDecimal[] bigDecimalArray49 = bigMatrixImpl47.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray50 = bigMatrixImpl44.solve(bigDecimalArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        java.lang.String str19 = bigMatrixImpl12.toString();
        java.math.BigDecimal[] bigDecimalArray21 = bigMatrixImpl12.getRow(0);
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[][] doubleArray40 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[][] doubleArray61 = new double[][] { doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        int int65 = bigMatrixImpl64.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl42.add(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl42.getColumnMatrix(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl12.multiply(bigMatrix68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "BigMatrixImpl{{null},{null},{null},{null},{null}}" + "'", str19, "BigMatrixImpl{{null},{null},{null},{null},{null}}");
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(bigMatrix68);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        java.math.BigDecimal[] bigDecimalArray4 = bigMatrixImpl2.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal5 = bigMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray4);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        boolean boolean20 = realMatrixImpl5.equals((java.lang.Object) 0.0d);
        boolean boolean21 = realMatrixImpl5.isSingular();
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[][] doubleArray40 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        boolean boolean43 = bigMatrixImpl42.isSquare();
        java.math.BigDecimal[][] bigDecimalArray44 = bigMatrixImpl42.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl54.add(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl47.add(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl57.scalarMultiply(1.0d);
        int int62 = realMatrixImpl57.getColumnDimension();
        boolean boolean63 = bigMatrixImpl42.equals((java.lang.Object) realMatrixImpl57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrixImpl5.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray29);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl21.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl16.subtract(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl41.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl41.scalarAdd((double) (byte) 1);
        double[] doubleArray57 = realMatrixImpl41.getColumn((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl38.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl10.add(realMatrixImpl13);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl20.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        boolean boolean26 = realMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        int int34 = realMatrixImpl32.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl20.subtract(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl13.subtract(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl36.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl61.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        boolean boolean67 = realMatrixImpl61.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl70.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl73);
        int int75 = realMatrixImpl73.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl61.subtract(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl54.subtract(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl83.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl77.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix90 = realMatrixImpl42.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        double[][] doubleArray91 = realMatrixImpl83.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl6.subtract(realMatrixImpl83);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray94 = realMatrixImpl92.getColumn((int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.transpose();
        int[] intArray30 = new int[] { (byte) 100, 6, (byte) 100, (short) -1, 10 };
        int[] intArray32 = new int[] { (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl21.getSubMatrix(intArray30, intArray32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 6, 100, -1, 10]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1]");
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal3 = bigMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) (byte) 1);
        double[] doubleArray25 = realMatrixImpl9.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray25);
        double[] doubleArray27 = realMatrixImpl5.preMultiply(doubleArray25);
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        boolean boolean49 = bigMatrixImpl48.isSquare();
        java.math.BigDecimal[][] bigDecimalArray50 = bigMatrixImpl48.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl60.add(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl53.add(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl63.scalarMultiply(1.0d);
        int int68 = realMatrixImpl63.getColumnDimension();
        boolean boolean69 = bigMatrixImpl48.equals((java.lang.Object) realMatrixImpl63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl5.multiply(realMatrixImpl63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrixImpl64);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        java.lang.Class<?> wildcardClass45 = bigMatrixImpl43.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl21.getSubMatrix(97, (int) (byte) -1, (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl22.add(realMatrixImpl25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl25.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl29);
        boolean boolean31 = realMatrixImpl25.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl25.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl5.multiply(realMatrix32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrixImpl26);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(realMatrix32);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[][] doubleArray40 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl42.getData();
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl67.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl42.scalarMultiply(bigDecimal70);
        java.math.BigDecimal[] bigDecimalArray73 = bigMatrixImpl42.getRow(2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl20.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl12.copy();
        int[] intArray20 = new int[] { 6 };
        int[] intArray26 = new int[] { (short) 100, 97, 6, 1, '4' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl12.getSubMatrix(intArray20, intArray26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[6]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[100, 97, 6, 1, 52]");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray3 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl6.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl16.scalarMultiply(1.0d);
        int int21 = realMatrixImpl16.getColumnDimension();
        int int22 = realMatrixImpl16.getColumnDimension();
        boolean boolean23 = realMatrixImpl16.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl2.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl2.copy();
        boolean boolean40 = realMatrixImpl2.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray42 = realMatrixImpl2.getRow((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl9.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl9.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl5.subtract(realMatrix25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.getColumnMatrix((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl2.getRowMatrix((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.getColumnMatrix(0);
        double[] doubleArray48 = bigMatrixImpl20.getRowAsDoubleArray((int) (short) 1);
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[][] doubleArray67 = new double[][] { doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl69.getData();
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[] doubleArray91 = new double[] { 1, (byte) 10 };
        double[][] doubleArray92 = new double[][] { doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88, doubleArray91 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl94 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray92);
        java.math.BigDecimal bigDecimal97 = bigMatrixImpl94.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix98 = bigMatrixImpl69.scalarMultiply(bigDecimal97);
        org.apache.commons.math.linear.BigMatrix bigMatrix99 = bigMatrixImpl20.scalarMultiply(bigDecimal97);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(bigDecimal97);
        org.junit.Assert.assertNotNull(bigMatrix98);
        org.junit.Assert.assertNotNull(bigMatrix99);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl5.scalarAdd((double) 97);
        boolean boolean22 = realMatrixImpl5.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = realMatrixImpl5.getRow(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl25.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        boolean boolean17 = bigMatrixImpl12.isSquare();
        int int18 = bigMatrixImpl12.getScale();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getScale();
        boolean boolean23 = bigMatrixImpl21.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl26.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl36.scalarMultiply(1.0d);
        double[] doubleArray42 = realMatrixImpl36.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray44 = bigMatrixImpl21.operate(doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray15 = bigMatrixImpl12.getRow(5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = realMatrixImpl11.add(realMatrixImpl14);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl18);
        boolean boolean20 = realMatrixImpl14.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl5.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrixImpl15);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        java.math.BigDecimal bigDecimal42 = bigMatrixImpl39.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray43 = bigMatrixImpl39.getData();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        java.math.BigDecimal bigDecimal67 = bigMatrixImpl64.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl39.scalarMultiply(bigDecimal67);
        java.math.BigDecimal[] bigDecimalArray70 = bigMatrixImpl39.getRow(2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray71 = bigMatrixImpl12.solve(bigDecimalArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl26.getSubMatrix((int) (byte) 10, 0, 35, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl10.add(realMatrixImpl13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl44.toString();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        java.math.BigDecimal bigDecimal69 = bigMatrixImpl66.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl66.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl66.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl66.getData();
        int int74 = bigMatrixImpl66.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = bigMatrixImpl44.multiply(bigMatrixImpl66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{2,20},{2,20},{2,20},{2,20},{2,20},{2,20}}" + "'", str45, "BigMatrixImpl{{2,20},{2,20},{2,20},{2,20},{2,20},{2,20}}");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        int[] intArray25 = new int[] { 35, 1, 10, (byte) 100, 5 };
        int[] intArray29 = new int[] { 5, (short) 0, 4 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl5.getSubMatrix(intArray25, intArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[35, 1, 10, 100, 5]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[5, 0, 4]");
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) (byte) 10);
        double double3 = realMatrixImpl2.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl6.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl6.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl6.copy();
        double[][] doubleArray22 = realMatrixImpl6.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray22);
        boolean boolean24 = realMatrixImpl2.equals((java.lang.Object) doubleArray22);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        double[][] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        double[] doubleArray30 = realMatrixImpl5.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl41.add(realMatrixImpl51);
        double[] doubleArray55 = realMatrixImpl53.getColumn(10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl65.add(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl68.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl72);
        boolean boolean74 = realMatrixImpl68.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrixImpl77.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl80);
        int int82 = realMatrixImpl80.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = realMatrixImpl68.subtract(realMatrixImpl80);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl61.subtract(realMatrixImpl83);
        double[] doubleArray86 = realMatrixImpl61.getRow(0);
        boolean boolean87 = realMatrixImpl53.equals((java.lang.Object) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl53.scalarAdd(0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrixImpl53.getColumnMatrix(6);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl5.subtract(realMatrixImpl53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix94 = realMatrixImpl92.getRowMatrix((int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl83);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        double[] doubleArray18 = realMatrixImpl2.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean23 = realMatrixImpl22.isSquare();
        double[][] doubleArray24 = realMatrixImpl22.getData();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl19.setSubMatrix(doubleArray24, (int) ' ', 5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 100, (int) (byte) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.transpose();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl2.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix3);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[][] doubleArray40 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl42.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl42.getRowMatrix(1);
        int int49 = bigMatrixImpl42.getColumnDimension();
        int int50 = bigMatrixImpl42.getScale();
        boolean boolean51 = bigMatrixImpl20.equals((java.lang.Object) int50);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 64 + "'", int50 == 64);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl2.copy();
        boolean boolean40 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl43.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl43.scalarAdd((double) (byte) 1);
        double[] doubleArray59 = realMatrixImpl43.getColumn((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray60 = realMatrixImpl2.operate(doubleArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl2.add(realMatrix27);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = realMatrixImpl2.getColumn((int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setScale(35);
        boolean boolean27 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl20.getData();
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        java.math.BigDecimal[][] bigDecimalArray51 = bigMatrixImpl50.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51, false);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.setSubMatrix(bigDecimalArray51, (int) (short) 1, 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        int int23 = realMatrixImpl22.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl26.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl36.scalarMultiply(1.0d);
        boolean boolean41 = realMatrixImpl36.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl36.copy();
        boolean boolean43 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl56.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl60);
        boolean boolean62 = realMatrixImpl56.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrixImpl65.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl68);
        int int70 = realMatrixImpl68.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = realMatrixImpl56.subtract(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = realMatrixImpl49.subtract(realMatrixImpl71);
        double[] doubleArray74 = realMatrixImpl49.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = realMatrixImpl77.add(realMatrixImpl80);
        org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl81);
        double double83 = realMatrixImpl81.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix85 = realMatrixImpl81.getColumnMatrix(5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix86 = realMatrixImpl22.subtract(realMatrix85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl71);
        org.junit.Assert.assertNotNull(realMatrixImpl72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl81);
        org.junit.Assert.assertNotNull(realMatrix82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix85);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        boolean boolean29 = realMatrixImpl5.isSingular();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        int[] intArray27 = new int[] { (byte) 0, 35, 'a', (byte) -1, 64 };
        int[] intArray31 = new int[] { (byte) 100, 5, 97 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl20.getSubMatrix(intArray27, intArray31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 35, 97, -1, 64]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, 5, 97]");
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        boolean boolean16 = bigMatrixImpl12.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = bigMatrixImpl12.getRowAsDoubleArray((int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int3 = bigMatrixImpl2.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl2.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = bigMatrixImpl21.getEntryAsDouble((int) '#', 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrixImpl2.scalarMultiply((double) 1L);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = realMatrixImpl8.add(realMatrixImpl11);
        double[] doubleArray14 = realMatrixImpl11.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray14);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl2.add(realMatrixImpl16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrixImpl12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        int int17 = bigMatrixImpl12.getRoundingMode();
        int int18 = bigMatrixImpl12.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray19 = bigMatrixImpl12.getDataAsDoubleArray();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        boolean boolean29 = realMatrixImpl28.isSquare();
        double[][] doubleArray30 = realMatrixImpl28.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray30, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[][] doubleArray52 = new double[][] { doubleArray36, doubleArray39, doubleArray42, doubleArray45, doubleArray48, doubleArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        java.math.BigDecimal bigDecimal57 = bigMatrixImpl54.getEntry(0, (int) (short) 0);
        boolean boolean58 = bigMatrixImpl54.isSingular();
        bigMatrixImpl54.setScale(35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl33.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl25.solve(realMatrix26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        double[] doubleArray18 = realMatrixImpl2.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[][] doubleArray38 = new double[][] { doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        int int42 = bigMatrixImpl41.getRoundingMode();
        int int43 = bigMatrixImpl41.getScale();
        int int44 = bigMatrixImpl41.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl54.add(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl61.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl54.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl54.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrixImpl51.add(realMatrix68);
        double[] doubleArray71 = realMatrixImpl51.getRow((int) (byte) 1);
        boolean boolean72 = bigMatrixImpl41.equals((java.lang.Object) doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray73 = realMatrixImpl19.solve(doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 64 + "'", int43 == 64);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 64 + "'", int44 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getRowDimension();
        bigMatrixImpl20.setRoundingMode(5);
        java.math.BigDecimal bigDecimal24 = null;
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal26 = null;
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal28 = null;
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal30 = null;
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal bigDecimal32 = null;
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray25, bigDecimalArray27, bigDecimalArray29, bigDecimalArray31, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = bigMatrixImpl20.multiply(bigMatrixImpl36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal47 = bigMatrixImpl20.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        boolean boolean50 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        int[] intArray57 = new int[] { (byte) -1, 5, '#', (byte) 100, 5 };
        int[] intArray59 = new int[] { (short) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl21.getSubMatrix(intArray57, intArray59);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 5, 35, 100, 5]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        java.math.BigDecimal[][] bigDecimalArray15 = bigMatrixImpl12.getDataRef();
        java.math.BigDecimal bigDecimal16 = null;
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal18 = null;
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal20 = null;
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        java.math.BigDecimal bigDecimal22 = null;
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal bigDecimal24 = null;
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal[][] bigDecimalArray26 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray19, bigDecimalArray21, bigDecimalArray23, bigDecimalArray25 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26, true);
        int int29 = bigMatrixImpl28.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray30 = bigMatrixImpl28.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl28.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = bigMatrixImpl12.subtract(bigMatrixImpl28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl50.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl54);
        boolean boolean56 = realMatrixImpl50.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl59.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl62);
        int int64 = realMatrixImpl62.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl50.subtract(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl43.subtract(realMatrixImpl65);
        double[] doubleArray68 = realMatrixImpl43.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl71.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl43.getColumnMatrix(0);
        java.lang.Class<?> wildcardClass80 = realMatrix79.getClass();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[][] doubleArray71 = bigMatrixImpl67.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl67.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray71);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(4, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        int int23 = realMatrixImpl22.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl26.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl36.scalarMultiply(1.0d);
        boolean boolean41 = realMatrixImpl36.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl36.copy();
        boolean boolean43 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl36);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = realMatrixImpl36.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(35, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl13.scalarAdd((double) 2);
        int int16 = realMatrixImpl13.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl19.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl19.scalarAdd((double) (byte) 1);
        double[] doubleArray35 = realMatrixImpl19.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray35);
        double[] doubleArray37 = realMatrixImpl13.preMultiply(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray38 = realMatrixImpl9.operate(doubleArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        double[][] doubleArray40 = realMatrixImpl38.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl38.getRowMatrix((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl28.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[][] doubleArray41 = realMatrixImpl34.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl44.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.scalarMultiply(1.0d);
        int int59 = realMatrixImpl54.getColumnDimension();
        int int60 = realMatrixImpl54.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl34.multiply(realMatrixImpl54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl46.copy();
        boolean boolean48 = bigMatrixImpl20.equals((java.lang.Object) bigMatrixImpl46);
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[][] doubleArray67 = new double[][] { doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        java.math.BigDecimal bigDecimal69 = bigMatrixImpl68.getNorm();
        java.math.BigDecimal[] bigDecimalArray70 = new java.math.BigDecimal[] { bigDecimal69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl20.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        int[] intArray28 = new int[] { 6, 35, 6, 0, (short) -1 };
        int[] intArray29 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl22.getSubMatrix(intArray28, intArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[6, 35, 6, 0, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[][] doubleArray63 = new double[][] { doubleArray47, doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        java.math.BigDecimal bigDecimal65 = bigMatrixImpl64.getNorm();
        java.math.BigDecimal[] bigDecimalArray66 = new java.math.BigDecimal[] { bigDecimal65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray66);
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl67.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl20.solve(bigMatrix68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimalArray66);
        org.junit.Assert.assertNotNull(bigMatrix68);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        double[] doubleArray45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray46 = bigMatrixImpl43.operate(doubleArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        int int48 = bigMatrixImpl47.getColumnDimension();
        int int49 = bigMatrixImpl47.getScale();
        java.math.BigDecimal[] bigDecimalArray51 = bigMatrixImpl47.getColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl25.operate(bigDecimalArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 64 + "'", int49 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl42.scalarAdd((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl42.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrix71);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl6.scalarMultiply((double) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl6.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl27);
        boolean boolean29 = realMatrixImpl23.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl32.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl35);
        int int37 = realMatrixImpl35.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl23.subtract(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl16.subtract(realMatrixImpl38);
        boolean boolean40 = realMatrixImpl39.isSquare();
        double[][] doubleArray41 = realMatrixImpl39.getDataRef();
        double[][] doubleArray42 = realMatrixImpl39.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl45.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl52.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl45.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl55.scalarMultiply(1.0d);
        double[] doubleArray61 = realMatrixImpl55.getRow((int) (short) 1);
        double[] doubleArray62 = realMatrixImpl39.operate(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray63 = realMatrixImpl6.solve(doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl28.getColumnMatrix(0);
        double[][] doubleArray31 = realMatrixImpl28.getData();
        double double32 = realMatrixImpl28.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean36 = realMatrixImpl35.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl28.multiply(realMatrixImpl35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = bigMatrixImpl21.getColumnAsDoubleArray(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl24.getRowMatrix(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl2.copy();
        boolean boolean40 = realMatrixImpl2.isSquare();
        double[][] doubleArray41 = realMatrixImpl2.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl2.getColumnMatrix((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        double[] doubleArray71 = realMatrixImpl42.getColumn((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray73 = realMatrixImpl42.getRow(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl21.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl16.subtract(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl51.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        boolean boolean57 = realMatrixImpl51.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl63);
        int int65 = realMatrixImpl63.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl51.subtract(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl44.subtract(realMatrixImpl66);
        double[] doubleArray69 = realMatrixImpl44.getRow(0);
        double[] doubleArray70 = realMatrixImpl16.operate(doubleArray69);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl73.add(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrixImpl76.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl80);
        org.apache.commons.math.linear.RealMatrix realMatrix83 = realMatrixImpl76.scalarAdd((double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrixImpl16.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertNotNull(realMatrix83);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        boolean boolean40 = bigMatrixImpl39.isSquare();
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl39.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl44.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.scalarMultiply(1.0d);
        int int59 = realMatrixImpl54.getColumnDimension();
        boolean boolean60 = bigMatrixImpl39.equals((java.lang.Object) realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl16.subtract(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        double[] doubleArray70 = realMatrixImpl67.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray70);
        double[][] doubleArray72 = realMatrixImpl71.getData();
        double[][] doubleArray73 = realMatrixImpl71.getData();
        int int74 = realMatrixImpl71.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl71.getColumnMatrix(0);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl71.scalarMultiply((double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl16.subtract(realMatrix78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix78);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRoundingMode();
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        int int68 = bigMatrixImpl67.getScale();
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl67.getData();
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl67.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray70, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl20.subtract(bigMatrixImpl72);
        int int74 = bigMatrixImpl72.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 64 + "'", int68 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl6.scalarMultiply((double) 100L);
        int int10 = realMatrixImpl6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl6.transpose();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        boolean boolean40 = bigMatrixImpl39.isSquare();
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl39.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl44.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.scalarMultiply(1.0d);
        int int59 = realMatrixImpl54.getColumnDimension();
        boolean boolean60 = bigMatrixImpl39.equals((java.lang.Object) realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl16.subtract(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        boolean boolean69 = realMatrixImpl68.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl54.add(realMatrixImpl68);
        int int71 = realMatrixImpl54.getColumnDimension();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25, false);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl30.getSubMatrix(0, 0, 0, 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigMatrix35);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl12.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.scalarMultiply(1.0d);
        int int36 = realMatrixImpl31.getColumnDimension();
        int int37 = realMatrixImpl31.getColumnDimension();
        boolean boolean38 = realMatrixImpl31.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl12.multiply(realMatrixImpl31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl45.getNorm();
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        java.math.BigDecimal[] bigDecimalArray50 = bigMatrixImpl48.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl56.getColumnMatrix((int) (short) 1);
        boolean boolean60 = realMatrixImpl56.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl56.getColumnMatrix((int) (byte) 10);
        boolean boolean63 = bigMatrixImpl48.equals((java.lang.Object) (byte) 10);
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[][] doubleArray82 = new double[][] { doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78, doubleArray81 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl83 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray82);
        java.math.BigDecimal bigDecimal84 = bigMatrixImpl83.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix85 = bigMatrixImpl48.scalarAdd(bigDecimal84);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl25.scalarAdd(bigDecimal84);
        java.lang.Class<?> wildcardClass87 = bigMatrix86.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigMatrix85);
        org.junit.Assert.assertNotNull(bigMatrix86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.copy();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal4 = bigMatrixImpl2.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix3);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(4, 10);
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[][] doubleArray21 = new double[][] { doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        int int25 = bigMatrixImpl24.getColumnDimension();
        int int26 = bigMatrixImpl24.getScale();
        java.math.BigDecimal[] bigDecimalArray28 = bigMatrixImpl24.getColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray29 = bigMatrixImpl2.operate(bigDecimalArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 64 + "'", int26 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        int int26 = bigMatrixImpl24.getRowDimension();
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl47.getEntry(0, (int) (short) 0);
        boolean boolean51 = bigMatrixImpl47.isSingular();
        bigMatrixImpl47.setScale(35);
        boolean boolean54 = bigMatrixImpl47.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = bigMatrixImpl24.multiply(bigMatrixImpl47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.lang.String[] strArray5 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}", "RealMatrixImpl{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}", "hi!", "hi!" };
        java.lang.String[] strArray11 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}", "RealMatrixImpl{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}", "hi!", "hi!" };
        java.lang.String[][] strArray12 = new java.lang.String[][] { strArray5, strArray11 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        double[][] doubleArray25 = bigMatrixImpl24.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal47 = bigMatrixImpl43.getEntry((int) 'a', 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        int int25 = realMatrixImpl6.getRowDimension();
        boolean boolean26 = realMatrixImpl6.isSingular();
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getRoundingMode();
        int int50 = bigMatrixImpl48.getScale();
        int int51 = bigMatrixImpl48.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl54.add(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl61.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = realMatrixImpl68.add(realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl61.add(realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl61.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl58.add(realMatrix75);
        double[] doubleArray78 = realMatrixImpl58.getRow((int) (byte) 1);
        boolean boolean79 = bigMatrixImpl48.equals((java.lang.Object) doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray80 = realMatrixImpl6.preMultiply(doubleArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 64 + "'", int50 == 64);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 64 + "'", int51 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl72);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        int int26 = bigMatrixImpl24.getRowDimension();
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl48.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray49, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray49, false);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl24.setSubMatrix(bigDecimalArray49, (int) (short) 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[][] doubleArray33 = new double[][] { doubleArray17, doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        java.math.BigDecimal bigDecimal38 = bigMatrixImpl35.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl35.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl35.getRowMatrix(1);
        int int42 = bigMatrixImpl35.getColumnDimension();
        int int43 = bigMatrixImpl35.getScale();
        java.math.BigDecimal[][] bigDecimalArray44 = bigMatrixImpl35.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl12.setSubMatrix(bigDecimalArray44, (int) (byte) -1, 5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 64 + "'", int43 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl24.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl24.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl41.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl51.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        boolean boolean57 = realMatrixImpl44.equals((java.lang.Object) realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl24.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl24.scalarMultiply((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl24.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl65.add(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl72.add(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl65.add(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl65.scalarAdd((double) (byte) 1);
        double[] doubleArray81 = realMatrixImpl65.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray83 = realMatrixImpl17.solve(doubleArray81);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        double[][] doubleArray70 = realMatrixImpl42.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray70);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray70);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        java.math.BigDecimal bigDecimal47 = bigMatrixImpl44.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl44.getData();
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[][] doubleArray67 = new double[][] { doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl44.scalarMultiply(bigDecimal72);
        java.math.BigDecimal[] bigDecimalArray75 = bigMatrixImpl44.getRow(2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray75);
        java.math.BigDecimal[] bigDecimalArray77 = bigMatrixImpl20.operate(bigDecimalArray75);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray79 = bigMatrixImpl20.getColumnAsDoubleArray(4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(bigDecimalArray77);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.getColumnMatrix((int) ' ');
        double[][] doubleArray35 = realMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray35, false);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl37.transpose();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrix39);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        boolean boolean7 = realMatrixImpl2.isSquare();
        boolean boolean8 = realMatrixImpl2.isSquare();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        double[][] doubleArray17 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.scalarAdd((double) (byte) 1);
        double[] doubleArray36 = realMatrixImpl20.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray36);
        double[] doubleArray40 = realMatrixImpl2.preMultiply(doubleArray36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray40);
        java.lang.Class<?> wildcardClass42 = doubleArray40.getClass();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        double[] doubleArray71 = realMatrixImpl42.getColumn((int) ' ');
        double[][] doubleArray72 = realMatrixImpl42.getData();
        boolean boolean73 = realMatrixImpl42.isSquare();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl2.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        double[][] doubleArray16 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray16, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl21.scalarAdd((double) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl21.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl18.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl5.scalarAdd((double) 97);
        boolean boolean22 = realMatrixImpl5.isSingular();
        double[][] doubleArray23 = realMatrixImpl5.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = realMatrixImpl5.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray3 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray3, false);
        double double6 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) (byte) 1);
        double[] doubleArray25 = realMatrixImpl9.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray29 = realMatrixImpl5.solve(doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl20.scalarMultiply(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = bigMatrixImpl20.getRow(2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl52.getColumnMatrix(35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        boolean boolean46 = realMatrixImpl40.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl52);
        int int54 = realMatrixImpl52.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl40.subtract(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl20.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl20.copy();
        boolean boolean58 = realMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl12.subtract(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl12.scalarMultiply((double) 100.0f);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix61);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        boolean boolean45 = bigMatrixImpl44.isSingular();
        bigMatrixImpl44.setRoundingMode((int) '4');
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl44.copy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(bigMatrix48);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setScale(35);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getDataRef();
        int int28 = bigMatrixImpl20.getColumnDimension();
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        java.math.BigDecimal bigDecimal52 = bigMatrixImpl49.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray53 = bigMatrixImpl49.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl49.getRowMatrix(1);
        int int56 = bigMatrixImpl49.getColumnDimension();
        int int57 = bigMatrixImpl49.getScale();
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrixImpl49.getData();
        java.math.BigDecimal[][] bigDecimalArray59 = bigMatrixImpl49.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl20.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 64 + "'", int57 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        boolean boolean47 = bigMatrixImpl46.isSquare();
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl46.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl51.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl61.scalarMultiply(1.0d);
        int int66 = realMatrixImpl61.getColumnDimension();
        boolean boolean67 = bigMatrixImpl46.equals((java.lang.Object) realMatrixImpl61);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl25.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setScale((int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl12.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl12.getRowMatrix(64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigMatrix17);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl20.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl20.multiply(bigMatrix48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(bigMatrix47);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal[] bigDecimalArray24 = bigMatrixImpl22.getRow(0);
        java.math.BigDecimal bigDecimal25 = bigMatrixImpl22.getNorm();
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        int int48 = bigMatrixImpl47.getScale();
        java.lang.String str49 = bigMatrixImpl47.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl22.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 64 + "'", int48 == 64);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str49, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal bigDecimal43 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl22.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
        boolean boolean66 = realMatrixImpl60.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl69.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl72);
        int int74 = realMatrixImpl72.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl60.subtract(realMatrixImpl72);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl53.subtract(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = realMatrixImpl79.add(realMatrixImpl82);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl86 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix87 = realMatrixImpl82.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl86);
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl76.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl82);
        double[][] doubleArray89 = realMatrixImpl82.getDataRef();
        double[] doubleArray91 = realMatrixImpl82.getColumn((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray92 = bigMatrixImpl22.solve(doubleArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl83);
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        java.math.BigDecimal[][] bigDecimalArray15 = bigMatrixImpl12.getDataRef();
        java.math.BigDecimal bigDecimal16 = null;
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal18 = null;
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal20 = null;
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        java.math.BigDecimal bigDecimal22 = null;
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal bigDecimal24 = null;
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal[][] bigDecimalArray26 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray19, bigDecimalArray21, bigDecimalArray23, bigDecimalArray25 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26, true);
        bigMatrixImpl28.setScale((int) (short) 0);
        bigMatrixImpl28.setRoundingMode(0);
        bigMatrixImpl28.setScale((int) '4');
        boolean boolean35 = bigMatrixImpl28.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl12.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        double[][] doubleArray26 = bigMatrixImpl24.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl24.getSubMatrix((int) (short) 10, (int) '4', (int) (byte) 100, 2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        int int51 = bigMatrixImpl21.getColumnDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl20.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal27 = bigMatrixImpl20.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        boolean boolean46 = realMatrixImpl40.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl52);
        int int54 = realMatrixImpl52.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl40.subtract(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl20.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl20.copy();
        boolean boolean58 = realMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl12.subtract(realMatrixImpl20);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray61 = realMatrixImpl20.getColumn(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        boolean boolean50 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        java.math.BigDecimal bigDecimal75 = bigMatrixImpl72.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl72.copy();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = bigMatrixImpl21.add(bigMatrixImpl72);
        int int78 = bigMatrixImpl72.getScale();
        java.lang.String str79 = bigMatrixImpl72.toString();
        java.math.BigDecimal[][] bigDecimalArray80 = bigMatrixImpl72.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigMatrixImpl77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 64 + "'", int78 == 64);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str79, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigDecimalArray80);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.scalarMultiply((double) 10L);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl27);
        boolean boolean29 = realMatrixImpl23.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl32.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl35);
        int int37 = realMatrixImpl35.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl23.subtract(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl16.subtract(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl45.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl39.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl54.add(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl61.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrixImpl64.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl68);
        boolean boolean70 = realMatrixImpl64.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl73.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl76);
        int int78 = realMatrixImpl76.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = realMatrixImpl64.subtract(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = realMatrixImpl57.subtract(realMatrixImpl79);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl86 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = realMatrixImpl83.add(realMatrixImpl86);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrixImpl86.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrix realMatrix92 = realMatrixImpl80.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl86);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = realMatrixImpl45.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl86);
        int int94 = realMatrixImpl86.getColumnDimension();
        int int95 = realMatrixImpl86.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix96 = realMatrixImpl5.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl79);
        org.junit.Assert.assertNotNull(realMatrixImpl80);
        org.junit.Assert.assertNotNull(realMatrixImpl87);
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl2.copy();
        boolean boolean40 = realMatrixImpl2.isSquare();
        int int41 = realMatrixImpl2.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl5.scalarAdd((double) 97);
        boolean boolean22 = realMatrixImpl5.isSingular();
        int int23 = realMatrixImpl5.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl33.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl33.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl30.add(realMatrix47);
        double[] doubleArray50 = realMatrixImpl30.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrixImpl5.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl20.scalarMultiply(bigDecimal48);
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[][] doubleArray68 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        int int72 = bigMatrixImpl71.getColumnDimension();
        int int73 = bigMatrixImpl71.getScale();
        java.math.BigDecimal[] bigDecimalArray75 = bigMatrixImpl71.getColumn((int) (byte) 0);
        java.math.BigDecimal[] bigDecimalArray76 = bigMatrixImpl20.preMultiply(bigDecimalArray75);
        boolean boolean77 = bigMatrixImpl20.isSingular();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 64 + "'", int73 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        java.math.BigDecimal bigDecimal6 = bigMatrixImpl2.getEntry(1, 1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNull(bigDecimal6);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        boolean boolean19 = realMatrixImpl12.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl12.add(realMatrix20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) 'a', (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrixImpl2.getSubMatrix(10, (int) (short) 100, 6, 6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        boolean boolean40 = realMatrixImpl34.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        int int48 = realMatrixImpl46.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl34.subtract(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl27.subtract(realMatrixImpl49);
        boolean boolean51 = realMatrixImpl50.isSquare();
        double[][] doubleArray52 = realMatrixImpl50.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray52, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray52, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl21.add(realMatrixImpl57);
        int[] intArray65 = new int[] { '4', (short) 10, 6, (short) -1, '4', (short) 100 };
        int[] intArray71 = new int[] { 1, (short) -1, 2, ' ', 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrixImpl57.getSubMatrix(intArray65, intArray71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[52, 10, 6, -1, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1, -1, 2, 32, 1]");
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        boolean boolean23 = bigMatrixImpl21.isSquare();
        double[] doubleArray25 = bigMatrixImpl21.getRowAsDoubleArray(1);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl21.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray26);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        java.lang.String str30 = bigMatrixImpl20.toString();
        bigMatrixImpl20.setRoundingMode((int) (short) 1);
        double[][] doubleArray33 = bigMatrixImpl20.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl20.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str30, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl42.getRowMatrix((int) (short) 1);
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        int int69 = bigMatrixImpl68.getColumnDimension();
        int int70 = bigMatrixImpl68.getScale();
        bigMatrixImpl68.setRoundingMode((int) '#');
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[] doubleArray87 = new double[] { 1, (byte) 10 };
        double[] doubleArray90 = new double[] { 1, (byte) 10 };
        double[][] doubleArray91 = new double[][] { doubleArray75, doubleArray78, doubleArray81, doubleArray84, doubleArray87, doubleArray90 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray91);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray91);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl94 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray91);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = bigMatrixImpl68.add(bigMatrixImpl94);
        org.apache.commons.math.linear.BigMatrix bigMatrix97 = bigMatrixImpl68.getRowMatrix((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix98 = bigMatrixImpl42.solve(bigMatrix97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 64 + "'", int70 == 64);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(bigMatrixImpl95);
        org.junit.Assert.assertNotNull(bigMatrix97);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl5.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl5.getRowMatrix(35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix41);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl34.scalarMultiply((double) (short) 10);
        boolean boolean41 = realMatrixImpl34.isSquare();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl21.getRowMatrix((int) (short) 0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        java.math.BigDecimal[] bigDecimalArray33 = bigMatrixImpl31.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray34 = bigMatrixImpl21.solve(bigDecimalArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl6.scalarMultiply((double) 100L);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl12.getColumnMatrix((int) ' ');
        java.lang.Object obj27 = null;
        boolean boolean28 = realMatrixImpl12.equals(obj27);
        boolean boolean29 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl6.add(realMatrixImpl12);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = realMatrixImpl12.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        int int90 = bigMatrixImpl89.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = bigMatrixImpl67.add(bigMatrixImpl89);
        java.math.BigDecimal bigDecimal92 = bigMatrixImpl89.getNorm();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl20.subtract(bigMatrixImpl89);
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = bigMatrixImpl20.transpose();
        bigMatrixImpl20.setScale((int) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
        org.junit.Assert.assertNotNull(bigMatrix94);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.scalarMultiply((double) 0.0f);
        boolean boolean39 = realMatrixImpl2.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl45.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        boolean boolean51 = realMatrixImpl45.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl45.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrixImpl2.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(realMatrix52);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        java.lang.Class<?> wildcardClass27 = realMatrixImpl26.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl42.getRowMatrix((int) (short) 1);
        java.lang.Class<?> wildcardClass47 = bigMatrix46.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        double[][] doubleArray27 = realMatrixImpl26.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl14.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl14.add(realMatrixImpl24);
        double[] doubleArray28 = realMatrixImpl26.getColumn(10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl41.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        boolean boolean47 = realMatrixImpl41.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl50.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl53);
        int int55 = realMatrixImpl53.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl41.subtract(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl34.subtract(realMatrixImpl56);
        double[] doubleArray59 = realMatrixImpl34.getRow(0);
        boolean boolean60 = realMatrixImpl26.equals((java.lang.Object) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl26.scalarAdd(0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrixImpl26.getColumnMatrix(6);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl11.subtract(realMatrix64);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(realMatrix65);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        double[] doubleArray16 = realMatrixImpl14.getColumn(10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl29.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        int int43 = realMatrixImpl41.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl29.subtract(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl22.subtract(realMatrixImpl44);
        double[] doubleArray47 = realMatrixImpl22.getRow(0);
        boolean boolean48 = realMatrixImpl14.equals((java.lang.Object) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl14.scalarAdd(0.0d);
        boolean boolean51 = realMatrixImpl14.isSquare();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl6.getRowMatrix((int) (short) 0);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        double[] doubleArray19 = realMatrixImpl16.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl16.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl9.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        int int90 = bigMatrixImpl89.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = bigMatrixImpl67.add(bigMatrixImpl89);
        java.math.BigDecimal bigDecimal92 = bigMatrixImpl89.getNorm();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl20.subtract(bigMatrixImpl89);
        bigMatrixImpl93.setScale(1);
        java.math.BigDecimal bigDecimal96 = bigMatrixImpl93.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
        org.junit.Assert.assertNotNull(bigDecimal96);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        int int21 = bigMatrixImpl19.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal22 = bigMatrixImpl19.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        java.lang.String str26 = bigMatrixImpl20.toString();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str26, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        int int40 = realMatrixImpl38.getColumnDimension();
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[][] doubleArray59 = new double[][] { doubleArray43, doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray59);
        int int64 = realMatrixImpl63.getRowDimension();
        boolean boolean65 = realMatrixImpl38.equals((java.lang.Object) int64);
        int int66 = realMatrixImpl38.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl38.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        double double11 = realMatrixImpl9.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl9.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) '#', 64);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        boolean boolean23 = bigMatrixImpl21.isSquare();
        double[] doubleArray25 = bigMatrixImpl21.getRowAsDoubleArray(1);
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl21.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl21.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(bigDecimal26);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        int int51 = bigMatrixImpl50.getRoundingMode();
        int int52 = bigMatrixImpl50.getScale();
        int int53 = bigMatrixImpl50.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = realMatrixImpl56.add(realMatrixImpl59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl63.add(realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl63.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl63.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl60.add(realMatrix77);
        double[] doubleArray80 = realMatrixImpl60.getRow((int) (byte) 1);
        boolean boolean81 = bigMatrixImpl50.equals((java.lang.Object) doubleArray80);
        double[] doubleArray82 = realMatrixImpl28.operate(doubleArray80);
        org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrixImpl28.scalarMultiply((double) (short) 0);
        double[] doubleArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray86 = realMatrixImpl28.solve(doubleArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 64 + "'", int52 == 64);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 64 + "'", int53 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl60);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix84);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        int int23 = realMatrixImpl22.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl22.scalarMultiply((double) (byte) 100);
        boolean boolean26 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl36.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl29.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl29.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl29.copy();
        double[][] doubleArray45 = realMatrixImpl29.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray45, false);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl22.setSubMatrix(doubleArray45, (int) '#', 6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        boolean boolean17 = bigMatrixImpl12.isSquare();
        bigMatrixImpl12.setRoundingMode(97);
        int int20 = bigMatrixImpl12.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray21 = bigMatrixImpl12.getData();
        java.math.BigDecimal bigDecimal22 = null;
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal bigDecimal24 = null;
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal26 = null;
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal28 = null;
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal bigDecimal30 = null;
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal[][] bigDecimalArray32 = new java.math.BigDecimal[][] { bigDecimalArray23, bigDecimalArray25, bigDecimalArray27, bigDecimalArray29, bigDecimalArray31 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray32, true);
        bigMatrixImpl34.setScale((int) (short) 0);
        int int37 = bigMatrixImpl34.getRoundingMode();
        int int38 = bigMatrixImpl34.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = bigMatrixImpl12.subtract(bigMatrixImpl34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl20.transpose();
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        java.math.BigDecimal bigDecimal69 = bigMatrixImpl68.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrixImpl20.scalarMultiply(bigDecimal69);
        bigMatrixImpl20.setRoundingMode(6);
        java.math.BigDecimal bigDecimal73 = null;
        java.math.BigDecimal[] bigDecimalArray74 = new java.math.BigDecimal[] { bigDecimal73 };
        java.math.BigDecimal bigDecimal75 = null;
        java.math.BigDecimal[] bigDecimalArray76 = new java.math.BigDecimal[] { bigDecimal75 };
        java.math.BigDecimal bigDecimal77 = null;
        java.math.BigDecimal[] bigDecimalArray78 = new java.math.BigDecimal[] { bigDecimal77 };
        java.math.BigDecimal bigDecimal79 = null;
        java.math.BigDecimal[] bigDecimalArray80 = new java.math.BigDecimal[] { bigDecimal79 };
        java.math.BigDecimal bigDecimal81 = null;
        java.math.BigDecimal[] bigDecimalArray82 = new java.math.BigDecimal[] { bigDecimal81 };
        java.math.BigDecimal[][] bigDecimalArray83 = new java.math.BigDecimal[][] { bigDecimalArray74, bigDecimalArray76, bigDecimalArray78, bigDecimalArray80, bigDecimalArray82 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray83, true);
        bigMatrixImpl85.setRoundingMode((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix88 = bigMatrixImpl20.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 64 + "'", int46 == 64);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigDecimalArray80);
        org.junit.Assert.assertNotNull(bigDecimalArray82);
        org.junit.Assert.assertNotNull(bigDecimalArray83);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        double[][] doubleArray16 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl22.getColumnMatrix((int) (short) 1);
        boolean boolean26 = realMatrixImpl22.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl22.getColumnMatrix((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl2.preMultiply(realMatrix28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(realMatrix28);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getRowDimension();
        double[] doubleArray23 = bigMatrixImpl20.getColumnAsDoubleArray(1);
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        int int45 = bigMatrixImpl44.getScale();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl44.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = bigMatrixImpl20.multiply(bigMatrixImpl44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 64 + "'", int45 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigMatrix47);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl6.scalarMultiply((double) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl6.scalarMultiply((double) (short) -1);
        int int11 = realMatrixImpl6.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = realMatrixImpl6.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[][] doubleArray71 = bigMatrixImpl67.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray71, false);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray75 = realMatrixImpl73.getRow((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray71);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl93 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray89, false);
        org.apache.commons.math.linear.RealMatrix realMatrix95 = realMatrixImpl93.scalarAdd((double) (byte) 10);
        double[][] doubleArray96 = realMatrixImpl93.getDataRef();
        double[] doubleArray98 = realMatrixImpl93.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray99 = bigMatrixImpl67.operate(doubleArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(realMatrix95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray98), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int3 = bigMatrixImpl2.getColumnDimension();
        int int4 = bigMatrixImpl2.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = bigMatrixImpl2.copy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 64 + "'", int4 == 64);
        org.junit.Assert.assertNotNull(bigMatrix5);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(10, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = bigMatrixImpl2.getEntryAsDouble((int) (short) -1, 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl70.getColumnMatrix((int) (byte) 1);
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl70.getData();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl45.getData();
        int int47 = bigMatrixImpl45.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl20.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl45.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        int int17 = bigMatrixImpl12.getRoundingMode();
        int int18 = bigMatrixImpl12.getColumnDimension();
        bigMatrixImpl12.setRoundingMode((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl12.getRowMatrix((int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) (short) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl7 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = realMatrixImpl7.add(realMatrixImpl10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl14.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl14.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl14.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl11.add(realMatrix28);
        int int30 = realMatrixImpl11.getRowDimension();
        double[][] doubleArray31 = realMatrixImpl11.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl34.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl44.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        double[] doubleArray57 = realMatrixImpl54.getColumn((int) (byte) 0);
        boolean boolean59 = realMatrixImpl54.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl54.getRowMatrix(5);
        double[] doubleArray63 = realMatrixImpl54.getColumn(0);
        double[] doubleArray64 = realMatrixImpl44.preMultiply(doubleArray63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray63);
        double[] doubleArray66 = realMatrixImpl11.preMultiply(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray67 = realMatrixImpl2.solve(doubleArray63);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertNotNull(realMatrixImpl11);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl26);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl42.getNorm();
        java.lang.String str47 = bigMatrixImpl42.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double50 = bigMatrixImpl42.getEntryAsDouble((-1), 6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str47, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal[] bigDecimalArray24 = bigMatrixImpl22.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl30.getColumnMatrix((int) (short) 1);
        boolean boolean34 = realMatrixImpl30.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl30.getColumnMatrix((int) (byte) 10);
        boolean boolean37 = bigMatrixImpl22.equals((java.lang.Object) (byte) 10);
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[][] doubleArray56 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49, doubleArray52, doubleArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray56);
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl57.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl22.scalarAdd(bigDecimal58);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl22.transpose();
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[][] doubleArray79 = new double[][] { doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray79);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray79);
        int int82 = bigMatrixImpl81.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl83 = bigMatrixImpl22.add(bigMatrixImpl81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 64 + "'", int82 == 64);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must have at least one column.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.getColumnMatrix(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl20.copy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.lang.String[] strArray2 = new java.lang.String[] { "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray5 = new java.lang.String[] { "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray8 = new java.lang.String[] { "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray11 = new java.lang.String[] { "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray14 = new java.lang.String[] { "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray17 = new java.lang.String[] { "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[][] strArray18 = new java.lang.String[][] { strArray2, strArray5, strArray8, strArray11, strArray14, strArray17 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(strArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl53);
        boolean boolean55 = realMatrixImpl49.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        int int63 = realMatrixImpl61.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl49.subtract(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl42.subtract(realMatrixImpl64);
        double[] doubleArray67 = realMatrixImpl42.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        double double76 = realMatrixImpl74.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl36.subtract(realMatrixImpl74);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl77.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl64);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        boolean boolean23 = bigMatrixImpl21.isSquare();
        double[] doubleArray25 = bigMatrixImpl21.getRowAsDoubleArray(1);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl28.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(bigMatrix29);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.lang.String[] strArray6 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{2,20},{2,20},{2,20},{2,20},{2,20},{2,20}}", "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray13 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{2,20},{2,20},{2,20},{2,20},{2,20},{2,20}}", "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray20 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{2,20},{2,20},{2,20},{2,20},{2,20},{2,20}}", "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray27 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{2,20},{2,20},{2,20},{2,20},{2,20},{2,20}}", "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray34 = new java.lang.String[] { "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}", "BigMatrixImpl{{2,20},{2,20},{2,20},{2,20},{2,20},{2,20}}", "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[][] strArray35 = new java.lang.String[][] { strArray6, strArray13, strArray20, strArray27, strArray34 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(strArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal[] bigDecimalArray46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray47 = bigMatrixImpl42.preMultiply(bigDecimalArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        int int25 = realMatrixImpl6.getRowDimension();
        double[][] doubleArray26 = realMatrixImpl6.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl36.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl29.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl39.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        double[] doubleArray52 = realMatrixImpl49.getColumn((int) (byte) 0);
        boolean boolean54 = realMatrixImpl49.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl49.getRowMatrix(5);
        double[] doubleArray58 = realMatrixImpl49.getColumn(0);
        double[] doubleArray59 = realMatrixImpl39.preMultiply(doubleArray58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray58);
        double[] doubleArray61 = realMatrixImpl6.preMultiply(doubleArray58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl64.scalarAdd((double) 2);
        int int67 = realMatrixImpl64.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = realMatrixImpl77.add(realMatrixImpl80);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = realMatrixImpl70.add(realMatrixImpl80);
        org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrixImpl70.scalarAdd((double) (byte) 1);
        double[] doubleArray86 = realMatrixImpl70.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray86);
        double[] doubleArray88 = realMatrixImpl64.preMultiply(doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray89 = realMatrixImpl6.operate(doubleArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrixImpl81);
        org.junit.Assert.assertNotNull(realMatrixImpl82);
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl21.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl16.subtract(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl21.transpose();
        java.lang.Class<?> wildcardClass40 = realMatrix39.getClass();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl5.scalarMultiply((double) 'a');
        double double14 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl17.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl17.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        boolean boolean43 = realMatrixImpl37.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl46.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        int int51 = realMatrixImpl49.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl37.subtract(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl17.add(realMatrixImpl49);
        double[][] doubleArray54 = realMatrixImpl53.getData();
        double[][] doubleArray55 = realMatrixImpl53.getData();
        boolean boolean56 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        boolean boolean68 = realMatrixImpl62.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl71.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        int int76 = realMatrixImpl74.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl62.subtract(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = realMatrixImpl87.add(realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl80.add(realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = realMatrixImpl80.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix94 = realMatrixImpl74.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl80);
        double double95 = realMatrixImpl74.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix96 = realMatrixImpl53.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray98 = realMatrixImpl53.getColumn((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrixImpl91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertNotNull(realMatrix94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix96);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        double[] doubleArray71 = realMatrixImpl42.getColumn((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl74.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl77);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl42.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        double[][] doubleArray80 = realMatrixImpl74.getData();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl45.getNorm();
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl48.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl20.preMultiply(bigMatrix49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigMatrix49);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl21.transpose();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = bigMatrixImpl21.getColumnAsDoubleArray(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigMatrix22);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', (int) '4');
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl48.getEntry(0, (int) (short) 0);
        boolean boolean52 = bigMatrixImpl48.isSingular();
        java.math.BigDecimal[][] bigDecimalArray53 = bigMatrixImpl48.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53, true);
        bigMatrixImpl27.setSubMatrix(bigDecimalArray53, (int) (short) 0, 0);
        int int60 = bigMatrixImpl27.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl20.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setRoundingMode((int) (byte) 1);
        int[] intArray32 = new int[] { 35, (byte) 1, (short) 100, 5 };
        int[] intArray37 = new int[] { (byte) 0, ' ', (byte) 0, 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl20.getSubMatrix(intArray32, intArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[35, 1, 100, 5]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 32, 0, 1]");
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl20.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setScale(35);
        boolean boolean27 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl30.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl30.scalarAdd((double) (byte) 1);
        double[] doubleArray46 = realMatrixImpl30.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray49 = bigMatrixImpl20.operate(doubleArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = realMatrixImpl8.add(realMatrixImpl11);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl15.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl8.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl8.scalarAdd((double) (byte) 1);
        double[] doubleArray24 = realMatrixImpl8.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        double[] doubleArray26 = realMatrixImpl2.preMultiply(doubleArray24);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray45);
        int int50 = realMatrixImpl49.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl49.scalarMultiply((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl12);
        org.junit.Assert.assertNotNull(realMatrixImpl19);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(realMatrix52);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        int[] intArray29 = new int[] {};
        int[] intArray30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl27.getSubMatrix(intArray29, intArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26);
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[][] doubleArray69 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65, doubleArray68 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        int int73 = bigMatrixImpl72.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = bigMatrixImpl50.add(bigMatrixImpl72);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl50.getColumnMatrix(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl29.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl74);
        org.junit.Assert.assertNotNull(bigMatrix76);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        double[] doubleArray18 = realMatrixImpl2.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        int int20 = realMatrixImpl19.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl19.getSubMatrix(0, 64, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        double[][] doubleArray18 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl2.scalarMultiply((double) (-1.0f));
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        boolean boolean29 = realMatrixImpl28.isSquare();
        double[][] doubleArray30 = realMatrixImpl28.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl28.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl44.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl48);
        boolean boolean50 = realMatrixImpl44.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl56);
        int int58 = realMatrixImpl56.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl44.subtract(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = realMatrixImpl37.subtract(realMatrixImpl59);
        boolean boolean61 = realMatrixImpl60.isSquare();
        double[][] doubleArray62 = realMatrixImpl60.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrixImpl60.getRowMatrix(2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl28.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl60);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrixImpl60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realMatrix64);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.getColumnMatrix(0);
        bigMatrixImpl20.setScale((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal49 = bigMatrixImpl20.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        int[] intArray57 = new int[] { (byte) 10, (byte) 1, (short) -1, 4, '4', (-1) };
        int[] intArray59 = new int[] { 2 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl21.getSubMatrix(intArray57, intArray59);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 1, -1, 4, 52, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[2]");
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, true);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = bigMatrixImpl28.getColumnAsDoubleArray(6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.getRowMatrix(64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setScale((int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl12.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl30.scalarMultiply(1.0d);
        double[] doubleArray36 = realMatrixImpl30.getRow((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray37 = bigMatrixImpl12.operate(doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl11.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl14);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl14.getColumnMatrix((int) (short) 1);
        boolean boolean18 = realMatrixImpl14.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl14.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        double[][] doubleArray35 = realMatrixImpl31.getData();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl5.setSubMatrix(doubleArray35, 97, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray30 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = bigMatrixImpl20.getRowAsDoubleArray((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl20.scalarMultiply(bigDecimal48);
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[][] doubleArray68 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        int int72 = bigMatrixImpl71.getColumnDimension();
        int int73 = bigMatrixImpl71.getScale();
        java.math.BigDecimal[] bigDecimalArray75 = bigMatrixImpl71.getColumn((int) (byte) 0);
        java.math.BigDecimal[] bigDecimalArray76 = bigMatrixImpl20.preMultiply(bigDecimalArray75);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray75);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 64 + "'", int73 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        double[][] doubleArray11 = realMatrixImpl9.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl9.transpose();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl29.getSubMatrix((int) (byte) 100, (int) (byte) -1, (int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = bigMatrixImpl20.getRowAsDoubleArray(35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        java.math.BigDecimal bigDecimal28 = bigMatrixImpl27.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl41.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        boolean boolean47 = realMatrixImpl34.equals((java.lang.Object) realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl34.copy();
        double double49 = realMatrixImpl34.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        boolean boolean68 = realMatrixImpl55.equals((java.lang.Object) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl71.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = realMatrixImpl78.add(realMatrixImpl81);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = realMatrixImpl71.add(realMatrixImpl81);
        org.apache.commons.math.linear.RealMatrix realMatrix85 = realMatrixImpl71.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix87 = realMatrixImpl71.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl88 = realMatrixImpl66.subtract(realMatrixImpl71);
        double[] doubleArray90 = realMatrixImpl66.getColumn((int) (short) 10);
        double[] doubleArray91 = realMatrixImpl34.preMultiply(doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray92 = bigMatrixImpl27.solve(doubleArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrixImpl82);
        org.junit.Assert.assertNotNull(realMatrixImpl83);
        org.junit.Assert.assertNotNull(realMatrix85);
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertNotNull(realMatrixImpl88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        double[][] doubleArray26 = bigMatrixImpl24.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getScale();
        int int23 = bigMatrixImpl21.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl21.getRow(2);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl21.getDataRef();
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getScale();
        int int50 = bigMatrixImpl48.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl48.getRow(2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray53 = bigMatrixImpl21.preMultiply(bigDecimalArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 64 + "'", int49 == 64);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 1, (int) (short) 10);
        java.lang.String str51 = bigMatrixImpl50.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl20.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" + "'", str51, "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl43.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl21.scalarAdd(bigDecimal46);
        java.lang.String str48 = bigMatrixImpl21.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double51 = bigMatrixImpl21.getEntryAsDouble((int) '#', 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str48, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        boolean boolean60 = realMatrixImpl46.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl37.add(realMatrixImpl46);
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[][] doubleArray80 = new double[][] { doubleArray64, doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        boolean boolean83 = realMatrixImpl61.equals((java.lang.Object) bigMatrixImpl82);
        double[][] doubleArray84 = realMatrixImpl61.getDataRef();
        double double85 = realMatrixImpl61.getNorm();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        java.lang.String str30 = bigMatrixImpl20.toString();
        bigMatrixImpl20.setRoundingMode((int) (short) 1);
        int int33 = bigMatrixImpl20.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl20.multiply(bigMatrix34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str30, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 64 + "'", int33 == 64);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl22.scalarAdd((double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl22.getRowMatrix(35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        double[][] doubleArray71 = bigMatrixImpl67.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray71, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl73.getColumnMatrix((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray71);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        int int10 = realMatrixImpl5.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = realMatrixImpl5.getEntry(52, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        double[][] doubleArray4 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray4);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        boolean boolean19 = realMatrixImpl5.isSquare();
        double double22 = realMatrixImpl5.getEntry(6, (int) (byte) 10);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double double43 = realMatrixImpl34.getEntry(4, 6);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl34.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, false);
        java.math.BigDecimal[] bigDecimalArray31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray32 = bigMatrixImpl30.operate(bigDecimalArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        boolean boolean16 = bigMatrixImpl12.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl12.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrixImpl12.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(bigMatrix17);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        boolean boolean10 = realMatrixImpl5.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int14 = bigMatrixImpl13.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl21.scalarMultiply((double) (byte) 0);
        boolean boolean24 = bigMatrixImpl13.equals((java.lang.Object) realMatrixImpl21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl5.multiply(realMatrixImpl21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = realMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        int int51 = bigMatrixImpl49.getRoundingMode();
        java.lang.String str52 = bigMatrixImpl49.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl49.getRowMatrix((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str52, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[][] doubleArray41 = realMatrixImpl34.getDataRef();
        double[] doubleArray43 = realMatrixImpl34.getColumn((int) (byte) 1);
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        java.math.BigDecimal bigDecimal67 = bigMatrixImpl64.getEntry(0, (int) (short) 0);
        double[][] doubleArray68 = bigMatrixImpl64.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray68);
        int int70 = realMatrixImpl69.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl34.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, false);
        double[][] doubleArray27 = bigMatrixImpl26.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl26.transpose();
        bigMatrixImpl26.setScale(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal31 = bigMatrixImpl26.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(bigMatrix28);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        bigMatrixImpl2.setScale((int) (byte) 0);
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[][] doubleArray24 = new double[][] { doubleArray8, doubleArray11, doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = bigMatrixImpl26.add(bigMatrixImpl48);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl48.getNorm();
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        int int74 = bigMatrixImpl73.getColumnDimension();
        int int75 = bigMatrixImpl73.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = bigMatrixImpl48.subtract(bigMatrixImpl73);
        boolean boolean77 = bigMatrixImpl73.isSingular();
        java.math.BigDecimal[][] bigDecimalArray78 = bigMatrixImpl73.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl2.setSubMatrix(bigDecimalArray78, 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 64 + "'", int75 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        java.lang.String str19 = bigMatrixImpl12.toString();
        java.math.BigDecimal[] bigDecimalArray21 = bigMatrixImpl12.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl12.getRowMatrix(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "BigMatrixImpl{{null},{null},{null},{null},{null}}" + "'", str19, "BigMatrixImpl{{null},{null},{null},{null},{null}}");
        org.junit.Assert.assertNotNull(bigDecimalArray21);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        boolean boolean43 = realMatrixImpl30.equals((java.lang.Object) realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl46.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl46.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl46.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl41.subtract(realMatrixImpl46);
        double[] doubleArray65 = realMatrixImpl41.getColumn((int) (short) 10);
        double double66 = realMatrixImpl41.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl24.multiply(realMatrixImpl41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        boolean boolean20 = realMatrixImpl5.equals((java.lang.Object) 0.0d);
        int int21 = realMatrixImpl5.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl31.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl31.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl28.add(realMatrix45);
        int int47 = realMatrixImpl28.getRowDimension();
        double[][] doubleArray48 = realMatrixImpl28.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl51.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl61.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = realMatrixImpl68.add(realMatrixImpl71);
        double[] doubleArray74 = realMatrixImpl71.getColumn((int) (byte) 0);
        boolean boolean76 = realMatrixImpl71.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl71.getRowMatrix(5);
        double[] doubleArray80 = realMatrixImpl71.getColumn(0);
        double[] doubleArray81 = realMatrixImpl61.preMultiply(doubleArray80);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray80);
        double[] doubleArray83 = realMatrixImpl28.preMultiply(doubleArray80);
        double[] doubleArray84 = realMatrixImpl5.operate(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl5.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(realMatrixImpl72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        double[][] doubleArray25 = bigMatrixImpl21.getDataAsDoubleArray();
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        int int47 = bigMatrixImpl46.getRowDimension();
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[] doubleArray83 = new double[] { 1, (byte) 10 };
        double[] doubleArray86 = new double[] { 1, (byte) 10 };
        double[][] doubleArray87 = new double[][] { doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83, doubleArray86 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        int int91 = bigMatrixImpl90.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = bigMatrixImpl68.add(bigMatrixImpl90);
        java.math.BigDecimal bigDecimal93 = bigMatrixImpl90.getNorm();
        java.math.BigDecimal bigDecimal94 = bigMatrixImpl90.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl46.scalarMultiply(bigDecimal94);
        org.apache.commons.math.linear.BigMatrix bigMatrix96 = bigMatrixImpl21.scalarAdd(bigDecimal94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix98 = bigMatrixImpl21.getColumnMatrix((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl92);
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigMatrix95);
        org.junit.Assert.assertNotNull(bigMatrix96);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl28.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl28.scalarAdd((double) 35);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix43);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getScale();
        java.lang.String str23 = bigMatrixImpl21.toString();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl33.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl33.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl30.add(realMatrix47);
        int int49 = realMatrixImpl30.getRowDimension();
        double[][] doubleArray50 = realMatrixImpl30.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl60.add(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl53.add(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl63.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        double[] doubleArray76 = realMatrixImpl73.getColumn((int) (byte) 0);
        boolean boolean78 = realMatrixImpl73.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl73.getRowMatrix(5);
        double[] doubleArray82 = realMatrixImpl73.getColumn(0);
        double[] doubleArray83 = realMatrixImpl63.preMultiply(doubleArray82);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray82);
        double[] doubleArray85 = realMatrixImpl30.preMultiply(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray86 = bigMatrixImpl21.operate(doubleArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str23, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrixImpl64);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl5.copy();
        double double20 = realMatrixImpl5.getNorm();
        boolean boolean21 = realMatrixImpl5.isSingular();
        double double22 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl25.scalarAdd((double) '#');
        int int40 = realMatrixImpl25.getColumnDimension();
        double[][] doubleArray41 = realMatrixImpl25.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl5.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.lang.String[] strArray1 = new java.lang.String[] { "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray3 = new java.lang.String[] { "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray5 = new java.lang.String[] { "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray7 = new java.lang.String[] { "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[] strArray9 = new java.lang.String[] { "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}" };
        java.lang.String[][] strArray10 = new java.lang.String[][] { strArray1, strArray3, strArray5, strArray7, strArray9 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        double double38 = realMatrixImpl17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl17.scalarAdd((double) 5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl53.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        int int67 = realMatrixImpl65.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl53.subtract(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl46.subtract(realMatrixImpl68);
        double double70 = realMatrixImpl68.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl17.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = bigMatrixImpl47.add(bigMatrixImpl69);
        boolean boolean72 = bigMatrixImpl71.isSquare();
        java.math.BigDecimal bigDecimal73 = bigMatrixImpl71.getNorm();
        int int74 = bigMatrixImpl71.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl20.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl42.getData();
        java.math.BigDecimal bigDecimal47 = bigMatrixImpl42.getNorm();
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[] doubleArray83 = new double[] { 1, (byte) 10 };
        double[] doubleArray86 = new double[] { 1, (byte) 10 };
        double[][] doubleArray87 = new double[][] { doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83, doubleArray86 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        int int91 = bigMatrixImpl90.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = bigMatrixImpl68.add(bigMatrixImpl90);
        java.math.BigDecimal bigDecimal93 = bigMatrixImpl90.getNorm();
        java.math.BigDecimal bigDecimal94 = bigMatrixImpl90.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl42.scalarAdd(bigDecimal94);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal96 = bigMatrixImpl42.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl92);
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigMatrix95);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.scalarMultiply((double) 10L);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray14 = realMatrixImpl13.getData();
        double[][] doubleArray15 = realMatrixImpl13.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray15);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        bigMatrixImpl12.setRoundingMode((int) (byte) 100);
        java.math.BigDecimal bigDecimal18 = null;
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal20 = null;
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        java.math.BigDecimal bigDecimal22 = null;
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal bigDecimal24 = null;
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal26 = null;
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray19, bigDecimalArray21, bigDecimalArray23, bigDecimalArray25, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28, true);
        bigMatrixImpl30.setScale((int) (short) 0);
        int int33 = bigMatrixImpl30.getRoundingMode();
        int int34 = bigMatrixImpl30.getRowDimension();
        int int35 = bigMatrixImpl30.getRoundingMode();
        int int36 = bigMatrixImpl30.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray37 = bigMatrixImpl30.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = bigMatrixImpl12.multiply(bigMatrixImpl30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        int int17 = realMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getDataRef();
        double[][] doubleArray30 = bigMatrixImpl20.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl20.getRowMatrix((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray1 = new double[] {};
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        double[][] doubleArray6 = new double[][] { doubleArray0, doubleArray1, doubleArray2, doubleArray3, doubleArray4, doubleArray5 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrix must have at least one column.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl7 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = realMatrixImpl7.add(realMatrixImpl10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl14.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl7.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl7.copy();
        double[][] doubleArray21 = realMatrixImpl7.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = realMatrixImpl2.multiply(realMatrixImpl7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertNotNull(realMatrixImpl11);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrixImpl19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        boolean boolean71 = bigMatrixImpl67.isSingular();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl67.getData();
        int int73 = bigMatrixImpl67.getRowDimension();
        int int74 = bigMatrixImpl67.getRoundingMode();
        java.math.BigDecimal bigDecimal75 = null;
        java.math.BigDecimal[] bigDecimalArray76 = new java.math.BigDecimal[] { bigDecimal75 };
        java.math.BigDecimal bigDecimal77 = null;
        java.math.BigDecimal[] bigDecimalArray78 = new java.math.BigDecimal[] { bigDecimal77 };
        java.math.BigDecimal bigDecimal79 = null;
        java.math.BigDecimal[] bigDecimalArray80 = new java.math.BigDecimal[] { bigDecimal79 };
        java.math.BigDecimal bigDecimal81 = null;
        java.math.BigDecimal[] bigDecimalArray82 = new java.math.BigDecimal[] { bigDecimal81 };
        java.math.BigDecimal bigDecimal83 = null;
        java.math.BigDecimal[] bigDecimalArray84 = new java.math.BigDecimal[] { bigDecimal83 };
        java.math.BigDecimal[][] bigDecimalArray85 = new java.math.BigDecimal[][] { bigDecimalArray76, bigDecimalArray78, bigDecimalArray80, bigDecimalArray82, bigDecimalArray84 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray85, true);
        int int88 = bigMatrixImpl87.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl67.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigDecimalArray80);
        org.junit.Assert.assertNotNull(bigDecimalArray82);
        org.junit.Assert.assertNotNull(bigDecimalArray84);
        org.junit.Assert.assertNotNull(bigDecimalArray85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        double[][] doubleArray11 = realMatrixImpl9.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray11);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.math.BigDecimal[][] bigDecimalArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        int int7 = realMatrixImpl5.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = realMatrixImpl5.getColumn((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        int int90 = bigMatrixImpl89.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = bigMatrixImpl67.add(bigMatrixImpl89);
        java.math.BigDecimal bigDecimal92 = bigMatrixImpl89.getNorm();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl20.subtract(bigMatrixImpl89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        java.math.BigDecimal[] bigDecimalArray98 = bigMatrixImpl96.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray99 = bigMatrixImpl89.preMultiply(bigDecimalArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
        org.junit.Assert.assertNotNull(bigDecimalArray98);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(35, 5);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.copy();
        double[] doubleArray6 = new double[] { 1, (byte) 10 };
        double[] doubleArray9 = new double[] { 1, (byte) 10 };
        double[] doubleArray12 = new double[] { 1, (byte) 10 };
        double[] doubleArray15 = new double[] { 1, (byte) 10 };
        double[] doubleArray18 = new double[] { 1, (byte) 10 };
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[][] doubleArray22 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15, doubleArray18, doubleArray21 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26, false);
        int int29 = bigMatrixImpl28.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = bigMatrixImpl2.subtract(bigMatrixImpl28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 64 + "'", int29 == 64);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl42.getRowMatrix((int) (short) 1);
        bigMatrixImpl42.setScale((int) (byte) 100);
        double[] doubleArray49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray50 = bigMatrixImpl42.operate(doubleArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[][] doubleArray35 = new double[][] { doubleArray19, doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        int int39 = bigMatrixImpl38.getScale();
        int int40 = bigMatrixImpl38.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray42 = bigMatrixImpl38.getRow(2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray43 = bigMatrixImpl12.preMultiply(bigDecimalArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 64 + "'", int39 == 64);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.copy();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal26 = bigMatrixImpl22.getEntry((int) (byte) 10, 2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigMatrix23);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int23 = bigMatrixImpl22.getRowDimension();
        int int24 = bigMatrixImpl22.getScale();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal27 = bigMatrixImpl22.getEntry((int) (short) 0, 35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl35.scalarMultiply(1.0d);
        int int40 = realMatrixImpl35.getColumnDimension();
        boolean boolean41 = bigMatrixImpl20.equals((java.lang.Object) realMatrixImpl35);
        boolean boolean42 = bigMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl45.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl52.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl45.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl45.scalarAdd((double) (byte) 1);
        double[] doubleArray61 = realMatrixImpl45.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray63 = bigMatrixImpl20.operate(doubleArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal[] bigDecimalArray24 = bigMatrixImpl22.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl30.getColumnMatrix((int) (short) 1);
        boolean boolean34 = realMatrixImpl30.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl30.getColumnMatrix((int) (byte) 10);
        boolean boolean37 = bigMatrixImpl22.equals((java.lang.Object) (byte) 10);
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[][] doubleArray56 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49, doubleArray52, doubleArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray56);
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl57.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl22.scalarAdd(bigDecimal58);
        int int60 = bigMatrixImpl22.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 64 + "'", int60 == 64);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl20.copy();
        bigMatrixImpl20.setRoundingMode(5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl36.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl36.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl36.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl33.add(realMatrix50);
        double[] doubleArray53 = realMatrixImpl33.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray55 = bigMatrixImpl20.solve(doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        int int25 = realMatrixImpl6.getRowDimension();
        double[][] doubleArray26 = realMatrixImpl6.getData();
        double[][] doubleArray27 = realMatrixImpl6.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray31 = realMatrixImpl30.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray31, false);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl6.setSubMatrix(doubleArray31, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.lang.String[] strArray6 = new java.lang.String[] { "BigMatrixImpl{{null},{null},{null},{null},{null}}", "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}", "BigMatrixImpl{{null},{null},{null},{null},{null}}", "hi!" };
        java.lang.String[] strArray13 = new java.lang.String[] { "BigMatrixImpl{{null},{null},{null},{null},{null}}", "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}", "BigMatrixImpl{{null},{null},{null},{null},{null}}", "hi!" };
        java.lang.String[] strArray20 = new java.lang.String[] { "BigMatrixImpl{{null},{null},{null},{null},{null}}", "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}", "BigMatrixImpl{{null},{null},{null},{null},{null}}", "hi!" };
        java.lang.String[] strArray27 = new java.lang.String[] { "BigMatrixImpl{{null},{null},{null},{null},{null}}", "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}", "BigMatrixImpl{{null},{null},{null},{null},{null}}", "hi!" };
        java.lang.String[][] strArray28 = new java.lang.String[][] { strArray6, strArray13, strArray20, strArray27 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(strArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl35.scalarMultiply(1.0d);
        int int40 = realMatrixImpl35.getColumnDimension();
        boolean boolean41 = bigMatrixImpl20.equals((java.lang.Object) realMatrixImpl35);
        double[] doubleArray43 = bigMatrixImpl20.getColumnAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl20.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(bigMatrix44);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl42.scalarMultiply((double) 100);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrix71);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 1, 10);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.getColumnMatrix((int) ' ');
        double[][] doubleArray35 = realMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray35, false);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray40 = realMatrixImpl37.getRow(35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realMatrix38);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        int int40 = realMatrixImpl38.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double43 = realMatrixImpl38.getEntry(52, 64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.copy();
        boolean boolean47 = bigMatrixImpl20.isSingular();
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getRoundingMode();
        int int71 = bigMatrixImpl69.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl69.transpose();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl20.add(bigMatrixImpl69);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal76 = bigMatrixImpl73.getEntry((int) 'a', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 64 + "'", int71 == 64);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl17.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl17.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl17.scalarMultiply((double) (short) -1);
        boolean boolean33 = bigMatrixImpl12.equals((java.lang.Object) (short) -1);
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[][] doubleArray52 = new double[][] { doubleArray36, doubleArray39, doubleArray42, doubleArray45, doubleArray48, doubleArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        int int55 = bigMatrixImpl54.getScale();
        java.math.BigDecimal[] bigDecimalArray57 = bigMatrixImpl54.getRow((int) (short) 0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray59 = bigMatrixImpl12.operate(bigDecimalArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 64 + "'", int55 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl42.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = realMatrixImpl56.add(realMatrixImpl59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl49.add(realMatrixImpl59);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl49.getColumnMatrix((int) ' ');
        double[][] doubleArray64 = realMatrixImpl49.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray64, false);
        boolean boolean67 = bigMatrixImpl42.equals((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray69 = bigMatrixImpl42.getRow((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl60);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        boolean boolean29 = realMatrixImpl28.isSquare();
        double[][] doubleArray30 = realMatrixImpl28.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl33.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl33.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl53.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        int int67 = realMatrixImpl65.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl53.subtract(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl33.add(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl65.scalarMultiply((double) (short) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl65.scalarMultiply((double) 6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl28.preMultiply(realMatrix73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrix73);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = bigMatrixImpl23.getEntryAsDouble((int) (short) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        double[][] doubleArray17 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray17, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl33.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        int int47 = realMatrixImpl45.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl33.subtract(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl26.subtract(realMatrixImpl48);
        double[] doubleArray51 = realMatrixImpl26.getRow(0);
        java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl20.operate(doubleArray51);
        java.lang.String str53 = bigMatrixImpl20.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray55 = bigMatrixImpl20.getColumn(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}" + "'", str53, "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl20.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl20.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        boolean boolean46 = realMatrixImpl40.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl52);
        int int54 = realMatrixImpl52.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl40.subtract(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl20.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl20.copy();
        boolean boolean58 = realMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl12.subtract(realMatrixImpl20);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl12.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray3 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray3, false);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = realMatrixImpl5.getRow(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl2.scalarMultiply((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl45.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        boolean boolean51 = realMatrixImpl45.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        int int59 = realMatrixImpl57.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = realMatrixImpl45.subtract(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrixImpl67.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl71);
        boolean boolean73 = realMatrixImpl67.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl76.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl79);
        int int81 = realMatrixImpl79.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = realMatrixImpl67.subtract(realMatrixImpl79);
        double[][] doubleArray83 = realMatrixImpl67.getData();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl60.setSubMatrix(doubleArray83, 97, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl60);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl82);
        org.junit.Assert.assertNotNull(doubleArray83);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = bigMatrixImpl21.getColumnAsDoubleArray(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        bigMatrixImpl28.setRoundingMode(6);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl22.getDataRef();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        double[][] doubleArray45 = bigMatrixImpl21.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            double double48 = bigMatrixImpl21.getEntryAsDouble(64, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        bigMatrixImpl20.setScale(5);
        double[] doubleArray28 = bigMatrixImpl20.getColumnAsDoubleArray((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = bigMatrixImpl20.getEntryAsDouble(10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        boolean boolean50 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = bigMatrixImpl45.getEntryAsDouble(0, 4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl24.add(realMatrixImpl25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) (byte) 1);
        double[] doubleArray25 = realMatrixImpl9.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray25);
        double[] doubleArray27 = realMatrixImpl5.preMultiply(doubleArray25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl30.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        boolean boolean46 = realMatrixImpl33.equals((java.lang.Object) realMatrixImpl44);
        boolean boolean48 = realMatrixImpl33.equals((java.lang.Object) 0.0d);
        boolean boolean49 = realMatrixImpl33.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl60.add(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl53.add(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl53.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl53.copy();
        double[][] doubleArray69 = realMatrixImpl53.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray69, false);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl33.setSubMatrix(doubleArray69, 2, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrixImpl64);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(doubleArray69);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        bigMatrixImpl12.setScale((int) '4');
        java.lang.String str19 = bigMatrixImpl12.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal20 = bigMatrixImpl12.getNorm();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "BigMatrixImpl{{null},{null},{null},{null},{null}}" + "'", str19, "BigMatrixImpl{{null},{null},{null},{null},{null}}");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = realMatrixImpl8.add(realMatrixImpl11);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl15.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl8.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl8.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        boolean boolean34 = realMatrixImpl28.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl40);
        int int42 = realMatrixImpl40.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl28.subtract(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl8.add(realMatrixImpl40);
        double[][] doubleArray45 = realMatrixImpl44.getData();
        int int46 = realMatrixImpl44.getColumnDimension();
        boolean boolean47 = realMatrixImpl2.equals((java.lang.Object) realMatrixImpl44);
        double double48 = realMatrixImpl2.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl61.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        boolean boolean67 = realMatrixImpl61.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl70.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl73);
        int int75 = realMatrixImpl73.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl61.subtract(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl54.subtract(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl77.getColumnMatrix(0);
        double[][] doubleArray80 = realMatrixImpl77.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrixImpl2.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl81);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl12);
        org.junit.Assert.assertNotNull(realMatrixImpl19);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        double[][] doubleArray11 = realMatrixImpl9.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl9.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        double[] doubleArray18 = realMatrixImpl12.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[][] doubleArray38 = new double[][] { doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        int int41 = bigMatrixImpl40.getScale();
        java.math.BigDecimal[][] bigDecimalArray42 = bigMatrixImpl40.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl40.copy();
        double[] doubleArray45 = bigMatrixImpl40.getRowAsDoubleArray(1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl19.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 64 + "'", int41 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((-1), 64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl6.scalarMultiply((double) 100L);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl12.getColumnMatrix((int) ' ');
        java.lang.Object obj27 = null;
        boolean boolean28 = realMatrixImpl12.equals(obj27);
        boolean boolean29 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl6.add(realMatrixImpl12);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = realMatrixImpl30.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl50.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl54);
        boolean boolean56 = realMatrixImpl50.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl59.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl62);
        int int64 = realMatrixImpl62.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl50.subtract(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl43.subtract(realMatrixImpl65);
        double[] doubleArray68 = realMatrixImpl43.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl71.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl43.scalarAdd((double) (-1L));
        boolean boolean80 = realMatrixImpl43.isSingular();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = realMatrixImpl8.add(realMatrixImpl11);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl15.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl8.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl8.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        boolean boolean34 = realMatrixImpl28.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl40);
        int int42 = realMatrixImpl40.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl28.subtract(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl8.add(realMatrixImpl40);
        double[][] doubleArray45 = realMatrixImpl44.getData();
        int int46 = realMatrixImpl44.getColumnDimension();
        boolean boolean47 = realMatrixImpl2.equals((java.lang.Object) realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        double[] doubleArray56 = realMatrixImpl53.getColumn((int) (byte) 0);
        boolean boolean58 = realMatrixImpl53.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl53.getRowMatrix(5);
        double[] doubleArray62 = realMatrixImpl53.getColumn(0);
        double[] doubleArray63 = realMatrixImpl44.preMultiply(doubleArray62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray63);
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl12);
        org.junit.Assert.assertNotNull(realMatrixImpl19);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        int int51 = bigMatrixImpl50.getColumnDimension();
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        java.math.BigDecimal[][] bigDecimalArray74 = bigMatrixImpl73.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl50.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl78);
        int int80 = bigMatrixImpl78.getRoundingMode();
        double[][] doubleArray81 = bigMatrixImpl78.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = bigMatrixImpl28.add(bigMatrixImpl78);
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl28.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(bigMatrixImpl82);
        org.junit.Assert.assertNotNull(bigMatrix83);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.multiply(realMatrix17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl40.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl40.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl40.add(realMatrix65);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl23.multiply(realMatrixImpl40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(realMatrix66);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        int int46 = bigMatrixImpl45.getColumnDimension();
        int int47 = bigMatrixImpl45.getScale();
        java.math.BigDecimal[] bigDecimalArray49 = bigMatrixImpl45.getColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray50 = bigMatrixImpl20.operate(bigDecimalArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 64 + "'", int47 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        int int90 = bigMatrixImpl89.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = bigMatrixImpl67.add(bigMatrixImpl89);
        java.math.BigDecimal bigDecimal92 = bigMatrixImpl89.getNorm();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl20.subtract(bigMatrixImpl89);
        bigMatrixImpl93.setScale(1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray97 = bigMatrixImpl93.getRow((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        boolean boolean10 = realMatrixImpl5.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl13.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.scalarMultiply(1.0d);
        double[] doubleArray29 = realMatrixImpl23.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray29);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl5.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl5.scalarAdd(0.0d);
        double[] doubleArray35 = realMatrixImpl5.getRow((int) (byte) 0);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl20.getRowMatrix(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal28 = bigMatrixImpl20.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigMatrix27);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray30 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl20.copy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        int int25 = realMatrixImpl6.getRowDimension();
        int int26 = realMatrixImpl6.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[] doubleArray42 = realMatrixImpl34.getColumn(0);
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[][] doubleArray61 = new double[][] { doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        int int65 = bigMatrixImpl64.getRoundingMode();
        int int66 = bigMatrixImpl64.getScale();
        int int67 = bigMatrixImpl64.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = realMatrixImpl77.add(realMatrixImpl80);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl88 = realMatrixImpl84.add(realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl89 = realMatrixImpl77.add(realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrixImpl77.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix92 = realMatrixImpl74.add(realMatrix91);
        double[] doubleArray94 = realMatrixImpl74.getRow((int) (byte) 1);
        boolean boolean95 = bigMatrixImpl64.equals((java.lang.Object) doubleArray94);
        double[] doubleArray96 = realMatrixImpl34.operate(doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl34.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 64 + "'", int66 == 64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 64 + "'", int67 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrixImpl81);
        org.junit.Assert.assertNotNull(realMatrixImpl88);
        org.junit.Assert.assertNotNull(realMatrixImpl89);
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        double[] doubleArray16 = realMatrixImpl14.getColumn(10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl29.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        int int43 = realMatrixImpl41.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl29.subtract(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl22.subtract(realMatrixImpl44);
        double[] doubleArray47 = realMatrixImpl22.getRow(0);
        boolean boolean48 = realMatrixImpl14.equals((java.lang.Object) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl14.scalarAdd(0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl14.getColumnMatrix(6);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl55.add(realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl62);
        boolean boolean64 = realMatrixImpl58.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl67.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl70);
        int int72 = realMatrixImpl70.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl58.subtract(realMatrixImpl70);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl14.subtract(realMatrixImpl58);
        boolean boolean75 = realMatrixImpl74.isSquare();
        int int76 = realMatrixImpl74.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = realMatrixImpl79.add(realMatrixImpl82);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl86 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl89 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = realMatrixImpl86.add(realMatrixImpl89);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = realMatrixImpl79.add(realMatrixImpl89);
        org.apache.commons.math.linear.RealMatrix realMatrix92 = realMatrixImpl79.copy();
        double[][] doubleArray93 = realMatrixImpl79.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl95 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray93, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl74.setSubMatrix(doubleArray93, 4, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl83);
        org.junit.Assert.assertNotNull(realMatrixImpl90);
        org.junit.Assert.assertNotNull(realMatrixImpl91);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertNotNull(doubleArray93);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 100, (int) (short) 1);
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[][] doubleArray21 = new double[][] { doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl23.getEntry(0, (int) (short) 0);
        boolean boolean27 = bigMatrixImpl23.isSingular();
        boolean boolean28 = bigMatrixImpl23.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = bigMatrixImpl2.add(bigMatrixImpl23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        java.lang.String str15 = bigMatrixImpl12.toString();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = bigMatrixImpl12.getColumnAsDoubleArray(6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "BigMatrixImpl{{null},{null},{null},{null},{null}}" + "'", str15, "BigMatrixImpl{{null},{null},{null},{null},{null}}");
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) 'a', 1);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSingular();
        double[] doubleArray6 = new double[] { 1, (byte) 10 };
        double[] doubleArray9 = new double[] { 1, (byte) 10 };
        double[] doubleArray12 = new double[] { 1, (byte) 10 };
        double[] doubleArray15 = new double[] { 1, (byte) 10 };
        double[] doubleArray18 = new double[] { 1, (byte) 10 };
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[][] doubleArray22 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15, doubleArray18, doubleArray21 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray22, false);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl26.scalarAdd((double) (byte) 10);
        double[][] doubleArray29 = realMatrixImpl26.getDataRef();
        double[] doubleArray31 = realMatrixImpl26.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = realMatrixImpl2.solve(doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = realMatrixImpl20.getRow((int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        int int17 = bigMatrixImpl12.getRoundingMode();
        int int18 = bigMatrixImpl12.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl12.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal20 = bigMatrixImpl12.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        double[][] doubleArray16 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray16, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[][] doubleArray38 = new double[][] { doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        int int42 = bigMatrixImpl41.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray43 = bigMatrixImpl41.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray43, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = bigMatrixImpl19.multiply(bigMatrixImpl45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl5.scalarMultiply((double) 'a');
        double double14 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl17.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl17.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        boolean boolean43 = realMatrixImpl37.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl46.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        int int51 = realMatrixImpl49.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl37.subtract(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl17.add(realMatrixImpl49);
        double[][] doubleArray54 = realMatrixImpl53.getData();
        double[][] doubleArray55 = realMatrixImpl53.getData();
        boolean boolean56 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl53);
        boolean boolean57 = realMatrixImpl5.isSquare();
        double double58 = realMatrixImpl5.getNorm();
        double[][] doubleArray59 = realMatrixImpl5.getDataRef();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((-1), 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        int int11 = realMatrixImpl5.getColumnDimension();
        double[] doubleArray13 = realMatrixImpl5.getColumn(0);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl44.transpose();
        java.math.BigDecimal bigDecimal47 = null;
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal49 = null;
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal51 = null;
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal bigDecimal53 = null;
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal bigDecimal55 = null;
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal[][] bigDecimalArray57 = new java.math.BigDecimal[][] { bigDecimalArray48, bigDecimalArray50, bigDecimalArray52, bigDecimalArray54, bigDecimalArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57, true);
        bigMatrixImpl59.setScale((int) (short) 0);
        bigMatrixImpl59.setRoundingMode(0);
        boolean boolean64 = bigMatrixImpl59.isSquare();
        bigMatrixImpl59.setRoundingMode(97);
        int int67 = bigMatrixImpl59.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray69 = bigMatrixImpl59.getRow((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray70 = bigMatrixImpl44.solve(bigDecimalArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        boolean boolean23 = bigMatrixImpl21.isSquare();
        double[] doubleArray25 = bigMatrixImpl21.getRowAsDoubleArray(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.transpose();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal27 = bigMatrixImpl21.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(bigMatrix26);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        bigMatrixImpl20.setScale(5);
        double[] doubleArray28 = bigMatrixImpl20.getColumnAsDoubleArray((int) (byte) 0);
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[][] doubleArray68 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        int int72 = bigMatrixImpl71.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl49.add(bigMatrixImpl71);
        boolean boolean74 = bigMatrixImpl73.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl73.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl20.solve(bigMatrix75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(bigMatrix75);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl14.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) (byte) 1);
        double[] doubleArray37 = realMatrixImpl21.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray37);
        double[] doubleArray39 = realMatrixImpl17.preMultiply(doubleArray37);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray40 = realMatrixImpl5.preMultiply(doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = bigMatrixImpl2.getEntryAsDouble((int) (short) 0, 5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray3);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        int int27 = bigMatrixImpl26.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl34.scalarMultiply((double) (byte) 0);
        boolean boolean37 = bigMatrixImpl26.equals((java.lang.Object) realMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = bigMatrixImpl23.subtract(bigMatrixImpl26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        int int46 = bigMatrixImpl44.getScale();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal47 = bigMatrixImpl44.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 64 + "'", int46 == 64);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        java.lang.String str30 = bigMatrixImpl20.toString();
        bigMatrixImpl20.setScale(0);
        java.math.BigDecimal bigDecimal33 = null;
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal bigDecimal35 = null;
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal37 = null;
        java.math.BigDecimal[] bigDecimalArray38 = new java.math.BigDecimal[] { bigDecimal37 };
        java.math.BigDecimal bigDecimal39 = null;
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal bigDecimal41 = null;
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal[][] bigDecimalArray43 = new java.math.BigDecimal[][] { bigDecimalArray34, bigDecimalArray36, bigDecimalArray38, bigDecimalArray40, bigDecimalArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray43, true);
        bigMatrixImpl45.setScale((int) (short) 0);
        int int48 = bigMatrixImpl45.getRoundingMode();
        boolean boolean49 = bigMatrixImpl45.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl20.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str30, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(4, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.getColumnMatrix((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl21.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl27.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        java.lang.String str15 = bigMatrixImpl12.toString();
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray16 = bigMatrixImpl12.getDataAsDoubleArray();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "BigMatrixImpl{{null},{null},{null},{null},{null}}" + "'", str15, "BigMatrixImpl{{null},{null},{null},{null},{null}}");
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.copy();
        java.math.BigDecimal bigDecimal24 = bigMatrixImpl22.getTrace();
        java.math.BigDecimal bigDecimal25 = bigMatrixImpl22.getNorm();
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl22.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal26);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        bigMatrixImpl2.setRoundingMode((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix5 = bigMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        double double8 = realMatrixImpl2.getEntry((int) (short) 1, 6);
        double double11 = realMatrixImpl2.getEntry(1, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl23.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        boolean boolean49 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        int int57 = realMatrixImpl55.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl43.subtract(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl23.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl23.copy();
        boolean boolean61 = realMatrixImpl23.isSquare();
        double[][] doubleArray62 = realMatrixImpl23.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray65 = realMatrixImpl2.getColumn((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realMatrix63);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl10.add(realMatrixImpl13);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl20.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        boolean boolean26 = realMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        int int34 = realMatrixImpl32.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl20.subtract(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl13.subtract(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl36.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl61.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        boolean boolean67 = realMatrixImpl61.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl70.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl73);
        int int75 = realMatrixImpl73.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl61.subtract(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl54.subtract(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl83.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl77.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix90 = realMatrixImpl42.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        double[][] doubleArray91 = realMatrixImpl83.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl6.subtract(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix94 = realMatrixImpl6.solve(realMatrix93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = bigMatrixImpl21.getColumnAsDoubleArray(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        int int17 = realMatrixImpl12.getColumnDimension();
        int int18 = realMatrixImpl12.getColumnDimension();
        boolean boolean19 = realMatrixImpl12.isSingular();
        boolean boolean20 = realMatrixImpl12.isSquare();
        int int21 = realMatrixImpl12.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        boolean boolean40 = realMatrixImpl34.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        int int48 = realMatrixImpl46.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl34.subtract(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl27.subtract(realMatrixImpl49);
        double[] doubleArray52 = realMatrixImpl27.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl55.add(realMatrixImpl58);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl59);
        boolean boolean61 = realMatrixImpl59.isSquare();
        double double62 = realMatrixImpl59.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl12.subtract(realMatrixImpl59);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray65 = realMatrixImpl59.getRow((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        double[][] doubleArray26 = bigMatrixImpl24.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) ' ', 35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl28.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl20.transpose();
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        java.math.BigDecimal bigDecimal69 = bigMatrixImpl68.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrixImpl20.scalarMultiply(bigDecimal69);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl73.add(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = realMatrixImpl87.add(realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl80.add(realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrix realMatrix94 = realMatrixImpl80.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix95 = realMatrixImpl77.add(realMatrix94);
        double[] doubleArray97 = realMatrixImpl77.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl98 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray97);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray99 = bigMatrixImpl20.solve(doubleArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 64 + "'", int46 == 64);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrixImpl91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
        org.junit.Assert.assertNotNull(realMatrix94);
        org.junit.Assert.assertNotNull(realMatrix95);
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        int int26 = bigMatrixImpl24.getColumnDimension();
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getRoundingMode();
        int int50 = bigMatrixImpl48.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl48.transpose();
        double[] doubleArray53 = bigMatrixImpl48.getColumnAsDoubleArray(1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl24.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 64 + "'", int50 == 64);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl34.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl34.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl31.add(realMatrix48);
        double[] doubleArray51 = realMatrixImpl31.getRow((int) (byte) 1);
        boolean boolean52 = bigMatrixImpl21.equals((java.lang.Object) doubleArray51);
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[][] doubleArray71 = new double[][] { doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67, doubleArray70 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        int int75 = bigMatrixImpl74.getColumnDimension();
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[] doubleArray87 = new double[] { 1, (byte) 10 };
        double[] doubleArray90 = new double[] { 1, (byte) 10 };
        double[] doubleArray93 = new double[] { 1, (byte) 10 };
        double[][] doubleArray94 = new double[][] { doubleArray78, doubleArray81, doubleArray84, doubleArray87, doubleArray90, doubleArray93 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray94);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray94);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl97 = bigMatrixImpl74.subtract(bigMatrixImpl96);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl98 = bigMatrixImpl21.add(bigMatrixImpl96);
        int int99 = bigMatrixImpl21.getRoundingMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(bigMatrixImpl97);
        org.junit.Assert.assertNotNull(bigMatrixImpl98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 4 + "'", int99 == 4);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.copy();
        boolean boolean47 = bigMatrixImpl20.isSingular();
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getRoundingMode();
        int int71 = bigMatrixImpl69.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl69.transpose();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl20.add(bigMatrixImpl69);
        double[][] doubleArray74 = bigMatrixImpl69.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 64 + "'", int71 == 64);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        int int23 = bigMatrixImpl21.getScale();
        bigMatrixImpl21.setRoundingMode((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.copy();
        boolean boolean47 = bigMatrixImpl20.isSingular();
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getRoundingMode();
        int int71 = bigMatrixImpl69.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl69.transpose();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl20.add(bigMatrixImpl69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl69.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 64 + "'", int71 == 64);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        double[][] doubleArray17 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray17, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl33.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        int int47 = realMatrixImpl45.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl33.subtract(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl26.subtract(realMatrixImpl48);
        double[] doubleArray51 = realMatrixImpl26.getRow(0);
        java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl20.operate(doubleArray51);
        int int53 = bigMatrixImpl20.getRoundingMode();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        java.lang.String[] strArray4 = new java.lang.String[] { "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{2,20},{2,20},{2,20},{2,20},{2,20},{2,20}}" };
        java.lang.String[] strArray9 = new java.lang.String[] { "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}", "BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null}}", "BigMatrixImpl{{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}}", "BigMatrixImpl{{2,20},{2,20},{2,20},{2,20},{2,20},{2,20}}" };
        java.lang.String[][] strArray10 = new java.lang.String[][] { strArray4, strArray9 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        double[] doubleArray18 = realMatrixImpl12.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl22.add(realMatrixImpl25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl22.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl22.getColumnMatrix((int) ' ');
        double[][] doubleArray37 = realMatrixImpl22.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray37, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl53.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        int int67 = realMatrixImpl65.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl53.subtract(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl46.subtract(realMatrixImpl68);
        double[] doubleArray71 = realMatrixImpl46.getRow(0);
        java.math.BigDecimal[] bigDecimalArray72 = bigMatrixImpl40.operate(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray73 = realMatrixImpl19.operate(doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl26);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray72);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        int int10 = realMatrixImpl5.getRowDimension();
        int int11 = realMatrixImpl5.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl14.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl14.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl14.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        boolean boolean40 = realMatrixImpl34.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        int int48 = realMatrixImpl46.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl34.subtract(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl14.add(realMatrixImpl46);
        double[][] doubleArray51 = realMatrixImpl50.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl54.add(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl61.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl54.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl54.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl71.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl74.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl78);
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl54.add(realMatrix79);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = realMatrixImpl50.subtract(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix83 = realMatrixImpl54.scalarAdd((double) 1L);
        org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrixImpl5.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix86 = realMatrixImpl5.scalarAdd((double) 5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl26);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(realMatrixImpl81);
        org.junit.Assert.assertNotNull(realMatrix83);
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertNotNull(realMatrix86);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl34.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl34.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl31.add(realMatrix48);
        double[] doubleArray51 = realMatrixImpl31.getRow((int) (byte) 1);
        boolean boolean52 = bigMatrixImpl21.equals((java.lang.Object) doubleArray51);
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[][] doubleArray71 = new double[][] { doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67, doubleArray70 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        int int75 = bigMatrixImpl74.getColumnDimension();
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[] doubleArray87 = new double[] { 1, (byte) 10 };
        double[] doubleArray90 = new double[] { 1, (byte) 10 };
        double[] doubleArray93 = new double[] { 1, (byte) 10 };
        double[][] doubleArray94 = new double[][] { doubleArray78, doubleArray81, doubleArray84, doubleArray87, doubleArray90, doubleArray93 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray94);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray94);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl97 = bigMatrixImpl74.subtract(bigMatrixImpl96);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl98 = bigMatrixImpl21.add(bigMatrixImpl96);
        int int99 = bigMatrixImpl98.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertNotNull(bigMatrixImpl97);
        org.junit.Assert.assertNotNull(bigMatrixImpl98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 64 + "'", int99 == 64);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        boolean boolean25 = bigMatrixImpl24.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl24.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl24.transpose();
        java.math.BigDecimal bigDecimal28 = bigMatrixImpl24.getNorm();
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        java.math.BigDecimal bigDecimal52 = bigMatrixImpl49.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray53 = bigMatrixImpl49.getData();
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[][] doubleArray72 = new double[][] { doubleArray56, doubleArray59, doubleArray62, doubleArray65, doubleArray68, doubleArray71 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray72);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray72);
        java.math.BigDecimal bigDecimal77 = bigMatrixImpl74.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrixImpl49.scalarMultiply(bigDecimal77);
        java.math.BigDecimal[] bigDecimalArray80 = bigMatrixImpl49.getRow(2);
        java.lang.String str81 = bigMatrixImpl49.toString();
        java.math.BigDecimal[][] bigDecimalArray82 = bigMatrixImpl49.getDataRef();
        java.math.BigDecimal[] bigDecimalArray84 = bigMatrixImpl49.getColumn((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray85 = bigMatrixImpl24.solve(bigDecimalArray84);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(bigDecimalArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str81, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigDecimalArray82);
        org.junit.Assert.assertNotNull(bigDecimalArray84);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl22.scalarAdd((double) (byte) 10);
        double[][] doubleArray25 = realMatrixImpl22.getDataRef();
        double[] doubleArray27 = realMatrixImpl22.getColumn(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl37.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl37.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl34.add(realMatrix51);
        double[] doubleArray54 = realMatrixImpl34.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl34.scalarMultiply((double) 35);
        java.lang.Object obj57 = null;
        boolean boolean58 = realMatrixImpl34.equals(obj57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        java.math.BigDecimal[] bigDecimalArray63 = bigMatrixImpl61.getColumn(0);
        boolean boolean64 = realMatrixImpl34.equals((java.lang.Object) bigMatrixImpl61);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl22.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        double[] doubleArray26 = realMatrixImpl6.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26);
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray47);
        int int52 = realMatrixImpl51.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl51.getRowMatrix(0);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrixImpl51.transpose();
        double[][] doubleArray56 = realMatrixImpl51.getData();
        double[][] doubleArray57 = realMatrixImpl51.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        double[][] doubleArray16 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray16, false);
        boolean boolean19 = realMatrixImpl18.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl25);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl25.getColumnMatrix((int) (short) 1);
        boolean boolean29 = realMatrixImpl25.isSingular();
        int int30 = realMatrixImpl25.getRowDimension();
        int int31 = realMatrixImpl25.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl18.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl21.getRowMatrix((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal31 = bigMatrixImpl21.getEntry((int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigMatrix28);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl53.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        int int67 = realMatrixImpl65.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl53.subtract(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl46.subtract(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl72.add(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl75.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl79);
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrixImpl69.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrix realMatrix82 = realMatrixImpl34.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl75);
        int int83 = realMatrixImpl75.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double84 = realMatrixImpl75.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertNotNull(realMatrix82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.scalarMultiply((double) (short) -1);
        double[][] doubleArray18 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl2.getRowMatrix(4);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl44.getNorm();
        int int47 = bigMatrixImpl44.getRowDimension();
        double[] doubleArray49 = bigMatrixImpl44.getColumnAsDoubleArray(1);
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl44.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[20.0, 20.0, 20.0, 20.0, 20.0, 20.0]");
        org.junit.Assert.assertNotNull(bigDecimal50);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, 97);
        bigMatrixImpl2.setRoundingMode((int) (short) 1);
        boolean boolean5 = bigMatrixImpl2.isSingular();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl6.scalarMultiply((double) 100L);
        int int10 = realMatrixImpl6.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        boolean boolean18 = realMatrixImpl17.isSquare();
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl32.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl36);
        boolean boolean38 = realMatrixImpl25.equals((java.lang.Object) realMatrixImpl36);
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[][] doubleArray57 = new double[][] { doubleArray41, doubleArray44, doubleArray47, doubleArray50, doubleArray53, doubleArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        boolean boolean60 = bigMatrixImpl59.isSquare();
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl59.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl71.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl64.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl74.scalarMultiply(1.0d);
        int int79 = realMatrixImpl74.getColumnDimension();
        boolean boolean80 = bigMatrixImpl59.equals((java.lang.Object) realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = realMatrixImpl36.subtract(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl88 = realMatrixImpl84.add(realMatrixImpl87);
        boolean boolean89 = realMatrixImpl88.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = realMatrixImpl74.add(realMatrixImpl88);
        boolean boolean91 = realMatrixImpl74.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl17.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = realMatrixImpl6.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl92);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl81);
        org.junit.Assert.assertNotNull(realMatrixImpl88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
        org.junit.Assert.assertNotNull(realMatrix93);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        double double8 = realMatrixImpl2.getEntry((int) (short) 1, 6);
        double double11 = realMatrixImpl2.getEntry(1, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl2.getDataRef();
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl42.getData();
        java.math.BigDecimal bigDecimal47 = bigMatrixImpl42.getNorm();
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[] doubleArray83 = new double[] { 1, (byte) 10 };
        double[] doubleArray86 = new double[] { 1, (byte) 10 };
        double[][] doubleArray87 = new double[][] { doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83, doubleArray86 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray87);
        int int91 = bigMatrixImpl90.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = bigMatrixImpl68.add(bigMatrixImpl90);
        java.math.BigDecimal bigDecimal93 = bigMatrixImpl90.getNorm();
        java.math.BigDecimal bigDecimal94 = bigMatrixImpl90.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl42.scalarAdd(bigDecimal94);
        int int96 = bigMatrixImpl42.getRowDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl92);
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigMatrix95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 6 + "'", int96 == 6);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        boolean boolean25 = bigMatrixImpl24.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl24.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl24.transpose();
        int int28 = bigMatrixImpl24.getColumnDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl21.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.getSubMatrix((int) 'a', 2, 6, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        boolean boolean41 = bigMatrixImpl40.isSingular();
        bigMatrixImpl40.setRoundingMode((int) 'a');
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        boolean boolean10 = realMatrixImpl5.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl20.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl13.add(realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.scalarMultiply(1.0d);
        double[] doubleArray29 = realMatrixImpl23.getRow((int) (short) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray29);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl5.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl30.copy();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = realMatrixImpl14.add(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl24.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
        boolean boolean30 = realMatrixImpl24.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl36);
        int int38 = realMatrixImpl36.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl24.subtract(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl17.subtract(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl46.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        double[][] doubleArray53 = realMatrixImpl46.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl5.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl57.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrixImpl67.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl71);
        boolean boolean73 = realMatrixImpl60.equals((java.lang.Object) realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl60.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl5.add(realMatrix74);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(realMatrix75);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl34.scalarMultiply((double) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl62.add(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl69.add(realMatrixImpl72);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl62.add(realMatrixImpl72);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl62.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl62.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = realMatrixImpl57.subtract(realMatrixImpl62);
        double[] doubleArray81 = realMatrixImpl57.getColumn((int) (short) 10);
        double double82 = realMatrixImpl57.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix83 = realMatrixImpl34.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrixImpl57.copy();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(realMatrixImpl79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix83);
        org.junit.Assert.assertNotNull(realMatrix84);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean46 = bigMatrixImpl20.equals((java.lang.Object) (-1));
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[][] doubleArray86 = new double[][] { doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray86);
        int int90 = bigMatrixImpl89.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = bigMatrixImpl67.add(bigMatrixImpl89);
        java.math.BigDecimal bigDecimal92 = bigMatrixImpl89.getNorm();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl20.subtract(bigMatrixImpl89);
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = bigMatrixImpl20.transpose();
        int int95 = bigMatrixImpl20.getColumnDimension();
        int int96 = bigMatrixImpl20.getRoundingMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
        org.junit.Assert.assertNotNull(bigMatrix94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4 + "'", int96 == 4);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        int[] intArray24 = new int[] { '#', 2, (byte) 100, (byte) -1, 5 };
        int[] intArray25 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl16.getSubMatrix(intArray24, intArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[35, 2, 100, -1, 5]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = realMatrixImpl5.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        boolean boolean17 = bigMatrixImpl12.isSquare();
        bigMatrixImpl12.setRoundingMode(97);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal20 = bigMatrixImpl12.getNorm();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl28.getColumnMatrix(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        boolean boolean49 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        int int57 = realMatrixImpl55.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl43.subtract(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl36.subtract(realMatrixImpl58);
        boolean boolean60 = realMatrixImpl59.isSquare();
        double[][] doubleArray61 = realMatrixImpl59.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray61, true);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl28.setSubMatrix(doubleArray61, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(doubleArray61);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        boolean boolean40 = bigMatrixImpl39.isSquare();
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl39.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl44.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.scalarMultiply(1.0d);
        int int59 = realMatrixImpl54.getColumnDimension();
        boolean boolean60 = bigMatrixImpl39.equals((java.lang.Object) realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl16.subtract(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl64.scalarAdd((double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl61.subtract(realMatrix66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrix66);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        int int25 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        java.math.BigDecimal bigDecimal49 = bigMatrixImpl46.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray50 = bigMatrixImpl46.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl21.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[][] doubleArray41 = realMatrixImpl34.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray41, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray41, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl68.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69, false);
        boolean boolean72 = bigMatrixImpl71.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl71.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl71.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = bigMatrixImpl46.add(bigMatrixImpl71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(bigMatrix74);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean30 = realMatrixImpl29.isSquare();
        double[][] doubleArray31 = realMatrixImpl29.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl29.scalarMultiply((double) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl26.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realMatrix33);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl12.getColumnMatrix((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int20 = bigMatrixImpl19.getRoundingMode();
        boolean boolean21 = bigMatrixImpl19.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl19.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        double[] doubleArray16 = new double[] { 1, (byte) 10 };
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[][] doubleArray32 = new double[][] { doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28, doubleArray31 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray32);
        java.math.BigDecimal bigDecimal37 = bigMatrixImpl34.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl34.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl34.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl34.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[][] doubleArray61 = new double[][] { doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        int int65 = bigMatrixImpl64.getColumnDimension();
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[] doubleArray83 = new double[] { 1, (byte) 10 };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray84);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray84);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray84);
        java.math.BigDecimal[][] bigDecimalArray88 = bigMatrixImpl87.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray88, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray88, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix93 = bigMatrixImpl64.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl92);
        int int94 = bigMatrixImpl92.getRoundingMode();
        double[][] doubleArray95 = bigMatrixImpl92.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl42.add(bigMatrixImpl92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl97 = bigMatrixImpl12.subtract(bigMatrixImpl92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(bigDecimalArray88);
        org.junit.Assert.assertNotNull(bigMatrix93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) 'a', 2);
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrixImpl2.copy();
        org.junit.Assert.assertNotNull(realMatrix3);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23, true);
        boolean boolean26 = bigMatrixImpl25.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl36.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl39.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl43);
        boolean boolean45 = realMatrixImpl39.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl48.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl51);
        int int53 = realMatrixImpl51.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl39.subtract(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl32.subtract(realMatrixImpl54);
        boolean boolean56 = realMatrixImpl55.isSquare();
        double[][] doubleArray57 = realMatrixImpl55.getDataRef();
        double[][] doubleArray58 = realMatrixImpl55.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl61.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = realMatrixImpl68.add(realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl61.add(realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl71.scalarMultiply(1.0d);
        double[] doubleArray77 = realMatrixImpl71.getRow((int) (short) 1);
        double[] doubleArray78 = realMatrixImpl55.operate(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray79 = bigMatrixImpl25.solve(doubleArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl72);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.getColumnMatrix(0);
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl20.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl20.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        boolean boolean60 = realMatrixImpl46.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl37.add(realMatrixImpl46);
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[][] doubleArray80 = new double[][] { doubleArray64, doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        boolean boolean83 = realMatrixImpl61.equals((java.lang.Object) bigMatrixImpl82);
        boolean boolean84 = bigMatrixImpl82.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl82.getSubMatrix((int) (short) 10, 97, 2, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        double[][] doubleArray25 = bigMatrixImpl21.getDataAsDoubleArray();
        bigMatrixImpl21.setScale((int) 'a');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl22.multiply(realMatrix23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        boolean boolean23 = bigMatrixImpl21.isSquare();
        double[] doubleArray25 = bigMatrixImpl21.getRowAsDoubleArray(1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal17 = bigMatrixImpl12.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl31.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl41.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        double[] doubleArray54 = realMatrixImpl51.getColumn((int) (byte) 0);
        boolean boolean56 = realMatrixImpl51.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl51.getRowMatrix(5);
        double[] doubleArray60 = realMatrixImpl51.getColumn(0);
        double[] doubleArray61 = realMatrixImpl41.preMultiply(doubleArray60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray63 = bigMatrixImpl28.solve(doubleArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        int int21 = realMatrixImpl17.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl17.transpose();
        double[] doubleArray24 = realMatrixImpl17.getColumn((int) (byte) 10);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setRoundingMode((int) (short) 100);
        int int15 = bigMatrixImpl12.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl12.getColumnMatrix(64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        double[] doubleArray71 = realMatrixImpl42.getColumn((int) ' ');
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[] doubleArray83 = new double[] { 1, (byte) 10 };
        double[] doubleArray86 = new double[] { 1, (byte) 10 };
        double[] doubleArray89 = new double[] { 1, (byte) 10 };
        double[][] doubleArray90 = new double[][] { doubleArray74, doubleArray77, doubleArray80, doubleArray83, doubleArray86, doubleArray89 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray90);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray90);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray90);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl94 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray90);
        int int95 = realMatrixImpl94.getRowDimension();
        double[][] doubleArray96 = realMatrixImpl94.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix97 = realMatrixImpl42.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 6 + "'", int95 == 6);
        org.junit.Assert.assertNotNull(doubleArray96);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        boolean boolean40 = bigMatrixImpl39.isSquare();
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl39.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl44.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.scalarMultiply(1.0d);
        int int59 = realMatrixImpl54.getColumnDimension();
        boolean boolean60 = bigMatrixImpl39.equals((java.lang.Object) realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl16.subtract(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        boolean boolean69 = realMatrixImpl68.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl54.add(realMatrixImpl68);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl54.getSubMatrix(1, 6, 35, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        int int7 = realMatrixImpl2.getColumnDimension();
        double double8 = realMatrixImpl2.getNorm();
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = realMatrixImpl2.preMultiply(doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, true);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl22.copy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        int int23 = bigMatrixImpl21.getScale();
        bigMatrixImpl21.setRoundingMode((int) '#');
        int int26 = bigMatrixImpl21.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl21.copy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(bigMatrix27);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray14 = bigMatrixImpl12.getDataRef();
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[][] doubleArray33 = new double[][] { doubleArray17, doubleArray20, doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        bigMatrixImpl37.setScale((int) (byte) 100);
        double[] doubleArray41 = bigMatrixImpl37.getColumnAsDoubleArray((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray42 = bigMatrixImpl12.operate(doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl34.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl34.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl31.add(realMatrix48);
        double[] doubleArray51 = realMatrixImpl31.getRow((int) (byte) 1);
        boolean boolean52 = bigMatrixImpl21.equals((java.lang.Object) doubleArray51);
        int int53 = bigMatrixImpl21.getColumnDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray14 = bigMatrixImpl12.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray15 = bigMatrixImpl12.getDataRef();
        double[] doubleArray18 = new double[] { 1, (byte) 10 };
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[][] doubleArray34 = new double[][] { doubleArray18, doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl36.getEntry(0, (int) (short) 0);
        boolean boolean40 = bigMatrixImpl36.isSingular();
        bigMatrixImpl36.setScale(35);
        int int43 = bigMatrixImpl36.getRoundingMode();
        boolean boolean44 = bigMatrixImpl36.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl12.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl23.getSubMatrix((int) 'a', (int) ' ', 64, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = realMatrixImpl8.add(realMatrixImpl11);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl15.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl8.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl8.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        boolean boolean34 = realMatrixImpl28.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl40);
        int int42 = realMatrixImpl40.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl28.subtract(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl8.add(realMatrixImpl40);
        double[][] doubleArray45 = realMatrixImpl44.getData();
        int int46 = realMatrixImpl44.getColumnDimension();
        boolean boolean47 = realMatrixImpl2.equals((java.lang.Object) realMatrixImpl44);
        double double48 = realMatrixImpl2.getNorm();
        boolean boolean49 = realMatrixImpl2.isSingular();
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl12);
        org.junit.Assert.assertNotNull(realMatrixImpl19);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        bigMatrixImpl22.setScale((int) (byte) 100);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        boolean boolean46 = bigMatrixImpl45.isSquare();
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl45.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl22.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl5.scalarMultiply((double) 'a');
        double double14 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl17.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl17.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        boolean boolean43 = realMatrixImpl37.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl46.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        int int51 = realMatrixImpl49.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl37.subtract(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl17.add(realMatrixImpl49);
        double[][] doubleArray54 = realMatrixImpl53.getData();
        double[][] doubleArray55 = realMatrixImpl53.getData();
        boolean boolean56 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        boolean boolean68 = realMatrixImpl62.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl71.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        int int76 = realMatrixImpl74.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl62.subtract(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = realMatrixImpl87.add(realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl80.add(realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = realMatrixImpl80.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix94 = realMatrixImpl74.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl80);
        double double95 = realMatrixImpl74.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix96 = realMatrixImpl53.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrix realMatrix98 = realMatrixImpl53.getColumnMatrix((int) (byte) 10);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrixImpl91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertNotNull(realMatrix94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix96);
        org.junit.Assert.assertNotNull(realMatrix98);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal26 = bigMatrixImpl20.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) (byte) 1);
        double[] doubleArray25 = realMatrixImpl9.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray25);
        double[] doubleArray27 = realMatrixImpl5.preMultiply(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl5.getSubMatrix((int) (byte) 0, (int) (short) 0, (int) (short) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        java.math.BigDecimal bigDecimal25 = bigMatrixImpl20.getEntry(1, (int) (short) 1);
        int int26 = bigMatrixImpl20.getRowDimension();
        int int27 = bigMatrixImpl20.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl20.getSubMatrix((int) ' ', 64, 64, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 64 + "'", int27 == 64);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        double[] doubleArray26 = realMatrixImpl6.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl36.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl29.add(realMatrixImpl39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl29.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl53);
        boolean boolean55 = realMatrixImpl49.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        int int63 = realMatrixImpl61.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl49.subtract(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl29.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl29.copy();
        boolean boolean67 = realMatrixImpl29.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl6.subtract(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl6.subtract(realMatrixImpl69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl64);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl45.getNorm();
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        java.math.BigDecimal[] bigDecimalArray50 = bigMatrixImpl48.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl56.getColumnMatrix((int) (short) 1);
        boolean boolean60 = realMatrixImpl56.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl56.getColumnMatrix((int) (byte) 10);
        boolean boolean63 = bigMatrixImpl48.equals((java.lang.Object) (byte) 10);
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[][] doubleArray82 = new double[][] { doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78, doubleArray81 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl83 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray82);
        java.math.BigDecimal bigDecimal84 = bigMatrixImpl83.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix85 = bigMatrixImpl48.scalarAdd(bigDecimal84);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl25.scalarAdd(bigDecimal84);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray88 = bigMatrixImpl25.getColumn(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigMatrix85);
        org.junit.Assert.assertNotNull(bigMatrix86);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24, false);
        double[][] doubleArray27 = bigMatrixImpl26.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl26.transpose();
        boolean boolean29 = bigMatrixImpl26.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        int int23 = bigMatrixImpl21.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21, true);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = realMatrixImpl25.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        int int23 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl21.getColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = bigMatrixImpl21.getColumnAsDoubleArray((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl5.copy();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl12.scalarAdd((double) (byte) 1);
        double[] doubleArray28 = realMatrixImpl12.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl5.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl5.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double31 = realMatrixImpl5.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix30);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        java.math.BigDecimal bigDecimal27 = null;
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal bigDecimal29 = null;
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal31 = null;
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal bigDecimal33 = null;
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal bigDecimal35 = null;
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal[][] bigDecimalArray37 = new java.math.BigDecimal[][] { bigDecimalArray28, bigDecimalArray30, bigDecimalArray32, bigDecimalArray34, bigDecimalArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray37, true);
        bigMatrixImpl39.setScale((int) (short) 0);
        bigMatrixImpl39.setRoundingMode(0);
        boolean boolean44 = bigMatrixImpl39.isSquare();
        bigMatrixImpl39.setRoundingMode(97);
        int int47 = bigMatrixImpl39.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl39.getData();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl26.setSubMatrix(bigDecimalArray48, 97, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl42.getNorm();
        java.lang.String str47 = bigMatrixImpl42.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl42.getRowMatrix(10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str47, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        int int46 = bigMatrixImpl42.getScale();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray48 = bigMatrixImpl42.getRow((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 64 + "'", int46 == 64);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl2.getSubMatrix(52, (int) '4', (int) (short) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl20.getRowMatrix(52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        bigMatrixImpl12.setRoundingMode(0);
        boolean boolean17 = bigMatrixImpl12.isSquare();
        bigMatrixImpl12.setRoundingMode(97);
        int int20 = bigMatrixImpl12.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray22 = bigMatrixImpl12.getRow((int) (short) 1);
        java.math.BigDecimal bigDecimal23 = null;
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal bigDecimal25 = null;
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal27 = null;
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal bigDecimal29 = null;
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal31 = null;
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal[][] bigDecimalArray33 = new java.math.BigDecimal[][] { bigDecimalArray24, bigDecimalArray26, bigDecimalArray28, bigDecimalArray30, bigDecimalArray32 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray33, true);
        bigMatrixImpl35.setScale((int) (short) 0);
        bigMatrixImpl35.setRoundingMode(0);
        bigMatrixImpl35.setScale((int) '4');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl54.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl58);
        boolean boolean60 = realMatrixImpl54.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl63.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        int int68 = realMatrixImpl66.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl54.subtract(realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl47.subtract(realMatrixImpl69);
        boolean boolean71 = bigMatrixImpl35.equals((java.lang.Object) realMatrixImpl69);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl35.getRowMatrix(1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl12.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(bigMatrix73);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.transpose();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = realMatrixImpl2.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(realMatrix4);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        java.math.BigDecimal[][] bigDecimalArray14 = bigMatrixImpl12.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl20.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        boolean boolean26 = realMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        int int34 = realMatrixImpl32.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl20.subtract(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl45.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl38.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrixImpl38.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrixImpl32.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        double double53 = realMatrixImpl38.getNorm();
        boolean boolean54 = bigMatrixImpl12.equals((java.lang.Object) realMatrixImpl38);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray56 = bigMatrixImpl12.getColumn(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        double[] doubleArray26 = realMatrixImpl6.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl40.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        boolean boolean46 = realMatrixImpl40.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl52);
        int int54 = realMatrixImpl52.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl40.subtract(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl33.subtract(realMatrixImpl55);
        boolean boolean57 = realMatrixImpl56.isSingular();
        int[] intArray59 = new int[] { 4 };
        int[] intArray61 = new int[] { (byte) 0 };
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl56.getSubMatrix(intArray59, intArray61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl65.add(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl72.add(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl75.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl79);
        boolean boolean81 = realMatrixImpl75.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl84.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        int int89 = realMatrixImpl87.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = realMatrixImpl75.subtract(realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = realMatrixImpl68.subtract(realMatrixImpl90);
        boolean boolean92 = realMatrixImpl91.isSingular();
        int[] intArray94 = new int[] { 4 };
        int[] intArray96 = new int[] { (byte) 0 };
        org.apache.commons.math.linear.RealMatrix realMatrix97 = realMatrixImpl91.getSubMatrix(intArray94, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix98 = realMatrixImpl27.getSubMatrix(intArray59, intArray94);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[4]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0]");
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl90);
        org.junit.Assert.assertNotNull(realMatrixImpl91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[4]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0]");
        org.junit.Assert.assertNotNull(realMatrix97);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.transpose();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl24.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
        boolean boolean30 = realMatrixImpl24.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl36);
        int int38 = realMatrixImpl36.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl24.subtract(realMatrixImpl36);
        double[][] doubleArray40 = realMatrixImpl24.getData();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl2.setSubMatrix(doubleArray40, (int) '4', 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrixImpl5.getColumnMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrixImpl5.scalarMultiply((double) 'a');
        double double14 = realMatrixImpl5.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl17.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl17.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        boolean boolean43 = realMatrixImpl37.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl46.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        int int51 = realMatrixImpl49.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl37.subtract(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl17.add(realMatrixImpl49);
        double[][] doubleArray54 = realMatrixImpl53.getData();
        double[][] doubleArray55 = realMatrixImpl53.getData();
        boolean boolean56 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        boolean boolean68 = realMatrixImpl62.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl71.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        int int76 = realMatrixImpl74.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl62.subtract(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = realMatrixImpl87.add(realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl80.add(realMatrixImpl90);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = realMatrixImpl80.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix94 = realMatrixImpl74.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl80);
        double double95 = realMatrixImpl74.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix96 = realMatrixImpl53.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        double double97 = realMatrixImpl74.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix98 = realMatrixImpl74.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrixImpl91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertNotNull(realMatrix94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        int int17 = bigMatrixImpl12.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl12.getData();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getData();
        int int28 = bigMatrixImpl20.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray31 = bigMatrixImpl20.getRowAsDoubleArray((int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        int int3 = realMatrixImpl2.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray5 = realMatrixImpl2.getRow(52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (byte) 1);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        bigMatrixImpl2.setScale((int) (byte) 0);
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[][] doubleArray24 = new double[][] { doubleArray8, doubleArray11, doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl26.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray30 = bigMatrixImpl26.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30, false);
        double[][] doubleArray33 = bigMatrixImpl32.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl32.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl2.multiply(bigMatrix34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigMatrix34);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(97, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl2.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl44.toString();
        double[][] doubleArray46 = bigMatrixImpl44.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{2,20},{2,20},{2,20},{2,20},{2,20},{2,20}}" + "'", str45, "BigMatrixImpl{{2,20},{2,20},{2,20},{2,20},{2,20},{2,20}}");
        org.junit.Assert.assertNotNull(doubleArray46);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getRowDimension();
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[][] doubleArray40 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[][] doubleArray61 = new double[][] { doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray61);
        int int65 = bigMatrixImpl64.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl42.add(bigMatrixImpl64);
        java.math.BigDecimal bigDecimal67 = bigMatrixImpl64.getNorm();
        java.math.BigDecimal[][] bigDecimalArray68 = bigMatrixImpl64.getData();
        java.math.BigDecimal bigDecimal69 = bigMatrixImpl64.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrixImpl20.scalarAdd(bigDecimal69);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigDecimalArray68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigMatrix70);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl22.scalarAdd((double) (byte) 10);
        double[][] doubleArray25 = realMatrixImpl22.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl22.getSubMatrix((int) '#', 1, (int) (short) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        double double38 = realMatrixImpl23.getNorm();
        boolean boolean39 = realMatrixImpl23.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl56);
        boolean boolean58 = realMatrixImpl45.equals((java.lang.Object) realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl45.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrixImpl45.scalarAdd((double) 97);
        boolean boolean62 = realMatrixImpl45.isSingular();
        int int63 = realMatrixImpl45.getColumnDimension();
        int int64 = realMatrixImpl45.getColumnDimension();
        double double67 = realMatrixImpl45.getEntry(0, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl23.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.transpose();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal25 = bigMatrixImpl21.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertNotNull(bigMatrix24);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.lang.String[][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl1 = new org.apache.commons.math.linear.BigMatrixImpl(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        double[] doubleArray71 = realMatrixImpl42.getColumn((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl74.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl77);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl42.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrixImpl42.getRowMatrix((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(realMatrix79);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setScale(35);
        boolean boolean27 = bigMatrixImpl20.isSingular();
        double[] doubleArray29 = bigMatrixImpl20.getColumnAsDoubleArray((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.transpose();
        boolean boolean24 = bigMatrixImpl22.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray26 = bigMatrixImpl22.getColumn(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl2.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.copy();
        boolean boolean17 = realMatrixImpl2.isSquare();
        int int18 = realMatrixImpl2.getColumnDimension();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl38.add(realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl41.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        boolean boolean47 = realMatrixImpl41.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl50.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl53);
        int int55 = realMatrixImpl53.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl41.subtract(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl21.add(realMatrixImpl53);
        double[][] doubleArray58 = realMatrixImpl57.getData();
        double[][] doubleArray59 = realMatrixImpl57.getData();
        boolean boolean60 = realMatrixImpl57.isSingular();
        double[][] doubleArray61 = realMatrixImpl57.getData();
        int int62 = realMatrixImpl57.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl65.add(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl72.add(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl65.add(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl65.copy();
        boolean boolean79 = realMatrixImpl57.equals((java.lang.Object) realMatrix78);
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrixImpl2.subtract(realMatrix78);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(realMatrix80);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        bigMatrixImpl70.setRoundingMode(97);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray74 = bigMatrixImpl70.getRow(64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 1, (int) (short) 10);
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[] doubleArray20 = new double[] { 1, (byte) 10 };
        double[][] doubleArray21 = new double[][] { doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        int int46 = bigMatrixImpl45.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = bigMatrixImpl23.add(bigMatrixImpl45);
        boolean boolean49 = bigMatrixImpl23.equals((java.lang.Object) (-1));
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[][] doubleArray68 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        int int93 = bigMatrixImpl92.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl94 = bigMatrixImpl70.add(bigMatrixImpl92);
        java.math.BigDecimal bigDecimal95 = bigMatrixImpl92.getNorm();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl23.subtract(bigMatrixImpl92);
        org.apache.commons.math.linear.BigMatrix bigMatrix97 = bigMatrixImpl23.transpose();
        int int98 = bigMatrixImpl23.getColumnDimension();
        boolean boolean99 = bigMatrixImpl2.equals((java.lang.Object) bigMatrixImpl23);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl94);
        org.junit.Assert.assertNotNull(bigDecimal95);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
        org.junit.Assert.assertNotNull(bigMatrix97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl6.scalarMultiply((double) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = realMatrixImpl11.add(realMatrixImpl14);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = realMatrixImpl18.add(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl11.add(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl11.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        boolean boolean44 = realMatrixImpl31.equals((java.lang.Object) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl11.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl6.subtract(realMatrixImpl45);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = realMatrixImpl46.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrixImpl15);
        org.junit.Assert.assertNotNull(realMatrixImpl22);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getRoundingMode();
        double[] doubleArray16 = new double[] { 1, (byte) 10 };
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[][] doubleArray32 = new double[][] { doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28, doubleArray31 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray32);
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[][] doubleArray53 = new double[][] { doubleArray37, doubleArray40, doubleArray43, doubleArray46, doubleArray49, doubleArray52 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray53);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray53);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray53);
        int int57 = bigMatrixImpl56.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = bigMatrixImpl34.add(bigMatrixImpl56);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl34.getColumnMatrix(0);
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl34.getData();
        java.math.BigDecimal[][] bigDecimalArray62 = bigMatrixImpl34.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = bigMatrixImpl12.multiply(bigMatrixImpl34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl58);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        java.math.BigDecimal[] bigDecimalArray4 = bigMatrixImpl2.getColumn(0);
        bigMatrixImpl2.setScale((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal9 = bigMatrixImpl2.getEntry((int) (short) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray4);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl20.getSubMatrix(0, 100, 100, 2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        double double38 = realMatrixImpl17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl17.scalarAdd((double) 5);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl17.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix40);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        int int26 = bigMatrixImpl24.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl24.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        int int25 = bigMatrixImpl20.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 64 + "'", int25 == 64);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.scalarAdd((double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = realMatrixImpl2.getColumn(64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        boolean boolean20 = realMatrixImpl5.equals((java.lang.Object) 0.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray24 = realMatrixImpl23.getData();
        double[][] doubleArray25 = realMatrixImpl23.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl5.setSubMatrix(doubleArray25, 2, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[][] doubleArray85 = new double[][] { doubleArray69, doubleArray72, doubleArray75, doubleArray78, doubleArray81, doubleArray84 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        java.math.BigDecimal bigDecimal90 = bigMatrixImpl87.getEntry(0, (int) (short) 0);
        boolean boolean91 = bigMatrixImpl87.isSingular();
        java.math.BigDecimal[][] bigDecimalArray92 = bigMatrixImpl87.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl66.subtract(bigMatrixImpl87);
        java.lang.String str94 = bigMatrixImpl66.toString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str94, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 100, (int) (byte) 10);
        java.math.BigDecimal bigDecimal5 = bigMatrixImpl2.getEntry((int) '4', 2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray7 = bigMatrixImpl2.getColumn((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(bigDecimal5);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrixImpl9.scalarAdd((double) 4);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrixImpl15.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl22.add(realMatrixImpl25);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl25.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl29);
        boolean boolean31 = realMatrixImpl18.equals((java.lang.Object) realMatrixImpl29);
        boolean boolean33 = realMatrixImpl18.equals((java.lang.Object) 0.0d);
        int int34 = realMatrixImpl18.getColumnDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = realMatrixImpl44.add(realMatrixImpl47);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl44.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl44.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrixImpl41.add(realMatrix58);
        int int60 = realMatrixImpl41.getRowDimension();
        double[][] doubleArray61 = realMatrixImpl41.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl64.add(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl71.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl64.add(realMatrixImpl74);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrixImpl74.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl81 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl85 = realMatrixImpl81.add(realMatrixImpl84);
        double[] doubleArray87 = realMatrixImpl84.getColumn((int) (byte) 0);
        boolean boolean89 = realMatrixImpl84.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrixImpl84.getRowMatrix(5);
        double[] doubleArray93 = realMatrixImpl84.getColumn(0);
        double[] doubleArray94 = realMatrixImpl74.preMultiply(doubleArray93);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl95 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray93);
        double[] doubleArray96 = realMatrixImpl41.preMultiply(doubleArray93);
        double[] doubleArray97 = realMatrixImpl18.operate(doubleArray96);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl98 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray96);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray99 = realMatrixImpl9.preMultiply(doubleArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrixImpl26);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrixImpl48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(realMatrixImpl85);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray3 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray3, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray3);
        double[] doubleArray9 = new double[] { 1, (byte) 10 };
        double[] doubleArray12 = new double[] { 1, (byte) 10 };
        double[] doubleArray15 = new double[] { 1, (byte) 10 };
        double[] doubleArray18 = new double[] { 1, (byte) 10 };
        double[] doubleArray21 = new double[] { 1, (byte) 10 };
        double[] doubleArray24 = new double[] { 1, (byte) 10 };
        double[][] doubleArray25 = new double[][] { doubleArray9, doubleArray12, doubleArray15, doubleArray18, doubleArray21, doubleArray24 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        java.math.BigDecimal bigDecimal27 = bigMatrixImpl26.getNorm();
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal[] bigDecimalArray31 = bigMatrixImpl29.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray32 = bigMatrixImpl6.operate(bigDecimalArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl19.transpose();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23, true);
        int int26 = bigMatrixImpl25.getColumnDimension();
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl48.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray49, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray49);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl25.setSubMatrix(bigDecimalArray49, 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl53);
        boolean boolean55 = realMatrixImpl49.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        int int63 = realMatrixImpl61.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl49.subtract(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl42.subtract(realMatrixImpl64);
        double[] doubleArray67 = realMatrixImpl42.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        double double76 = realMatrixImpl74.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl36.subtract(realMatrixImpl74);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = realMatrixImpl74.getEntry((int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl64);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl26.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        int int51 = bigMatrixImpl48.getRoundingMode();
        double[] doubleArray53 = bigMatrixImpl48.getColumnAsDoubleArray((int) (short) 0);
        int int54 = bigMatrixImpl48.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl48.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 64 + "'", int54 == 64);
        org.junit.Assert.assertNotNull(bigMatrix55);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        boolean boolean44 = realMatrixImpl31.equals((java.lang.Object) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl31.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl31.scalarAdd((double) 97);
        boolean boolean48 = realMatrixImpl25.equals((java.lang.Object) realMatrixImpl31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl25.getRowMatrix(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl20.copy();
        int int24 = bigMatrixImpl20.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        double[][] doubleArray26 = bigMatrixImpl20.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        double[][] doubleArray3 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray3, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray3);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl16.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrixImpl16.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl13.add(realMatrix30);
        double[] doubleArray33 = realMatrixImpl13.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl13.scalarMultiply((double) 35);
        java.lang.Object obj36 = null;
        boolean boolean37 = realMatrixImpl13.equals(obj36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        java.math.BigDecimal[] bigDecimalArray42 = bigMatrixImpl40.getColumn(0);
        boolean boolean43 = realMatrixImpl13.equals((java.lang.Object) bigMatrixImpl40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl6.add(bigMatrixImpl40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        boolean boolean45 = bigMatrixImpl44.isSquare();
        int int46 = bigMatrixImpl44.getScale();
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 64 + "'", int46 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        bigMatrixImpl20.setScale((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        double[][] doubleArray26 = bigMatrixImpl24.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray26, true);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        boolean boolean67 = bigMatrixImpl66.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        int int23 = realMatrixImpl22.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl22.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl22.transpose();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl29.add(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl32.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl36);
        boolean boolean38 = realMatrixImpl32.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl41.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl44);
        int int46 = realMatrixImpl44.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl32.subtract(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl50.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
        boolean boolean66 = realMatrixImpl53.equals((java.lang.Object) realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl32.add(realMatrixImpl64);
        boolean boolean68 = realMatrixImpl64.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrixImpl22.preMultiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        boolean boolean71 = bigMatrixImpl67.isSingular();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl67.getData();
        int int73 = bigMatrixImpl67.getRowDimension();
        int int74 = bigMatrixImpl67.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal75 = bigMatrixImpl67.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        boolean boolean29 = realMatrixImpl28.isSquare();
        double[][] doubleArray30 = realMatrixImpl28.getDataRef();
        double[][] doubleArray31 = realMatrixImpl28.getData();
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[][] doubleArray50 = new double[][] { doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46, doubleArray49 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray50);
        int int54 = bigMatrixImpl53.getRoundingMode();
        int int55 = bigMatrixImpl53.getScale();
        int int56 = bigMatrixImpl53.getScale();
        java.math.BigDecimal[][] bigDecimalArray57 = bigMatrixImpl53.getDataRef();
        bigMatrixImpl53.setRoundingMode((int) ' ');
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[][] doubleArray78 = new double[][] { doubleArray62, doubleArray65, doubleArray68, doubleArray71, doubleArray74, doubleArray77 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        int int82 = bigMatrixImpl81.getScale();
        int int83 = bigMatrixImpl81.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray85 = bigMatrixImpl81.getRow(2);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl53.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl81);
        double[][] doubleArray87 = bigMatrixImpl53.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl28.setSubMatrix(doubleArray87, (int) '4', (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 64 + "'", int55 == 64);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 64 + "'", int56 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 64 + "'", int82 == 64);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray85);
        org.junit.Assert.assertNotNull(bigMatrix86);
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        boolean boolean25 = bigMatrixImpl24.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl24.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getColumnDimension();
        bigMatrixImpl21.setScale((int) (short) 1);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl47.getEntry(0, (int) (short) 0);
        double[][] doubleArray51 = bigMatrixImpl47.getDataAsDoubleArray();
        bigMatrixImpl47.setScale(5);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = bigMatrixImpl21.subtract(bigMatrixImpl47);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(bigMatrixImpl54);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray46 = bigMatrixImpl21.getColumn(2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        boolean boolean40 = realMatrixImpl34.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        int int48 = realMatrixImpl46.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl34.subtract(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl27.subtract(realMatrixImpl49);
        boolean boolean51 = realMatrixImpl50.isSquare();
        double[][] doubleArray52 = realMatrixImpl50.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray52, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray52, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl21.add(realMatrixImpl57);
        int int59 = realMatrixImpl21.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = realMatrixImpl2.getRow(64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        bigMatrixImpl20.setScale(35);
        boolean boolean27 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl20.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl20.getSubMatrix((-1), (int) (short) -1, (-1), 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl12.copy();
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
        org.junit.Assert.assertNotNull(bigMatrix14);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        int int25 = bigMatrixImpl21.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double28 = bigMatrixImpl21.getEntryAsDouble(100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = realMatrixImpl43.add(realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl53.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        int int67 = realMatrixImpl65.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = realMatrixImpl53.subtract(realMatrixImpl65);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl46.subtract(realMatrixImpl68);
        boolean boolean70 = realMatrixImpl69.isSingular();
        int[] intArray72 = new int[] { 4 };
        int[] intArray74 = new int[] { (byte) 0 };
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl69.getSubMatrix(intArray72, intArray74);
        int[] intArray76 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl28.getSubMatrix(intArray72, intArray76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrixImpl47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[4]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0]");
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.lang.String[] strArray1 = new java.lang.String[] { "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" };
        java.lang.String[] strArray3 = new java.lang.String[] { "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" };
        java.lang.String[] strArray5 = new java.lang.String[] { "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray1, strArray3, strArray5 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl2.copy();
        boolean boolean40 = realMatrixImpl2.isSquare();
        double[][] doubleArray41 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.lang.String str43 = bigMatrixImpl42.toString();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}" + "'", str43, "BigMatrixImpl{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        int int29 = realMatrixImpl28.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl28.getRowMatrix((int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = bigMatrixImpl47.add(bigMatrixImpl69);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl21.scalarAdd(bigDecimal72);
        int int74 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray75 = bigMatrixImpl21.getDataRef();
        double[][] doubleArray76 = bigMatrixImpl21.getDataAsDoubleArray();
        java.lang.String str77 = bigMatrixImpl21.toString();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        java.math.BigDecimal[] bigDecimalArray82 = bigMatrixImpl80.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl21.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str77, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(bigDecimalArray82);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl21.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl16.subtract(realMatrixImpl21);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl51.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        boolean boolean57 = realMatrixImpl51.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl63);
        int int65 = realMatrixImpl63.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl51.subtract(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl44.subtract(realMatrixImpl66);
        double[] doubleArray69 = realMatrixImpl44.getRow(0);
        double[] doubleArray70 = realMatrixImpl16.operate(doubleArray69);
        double[][] doubleArray71 = realMatrixImpl16.getData();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        boolean boolean23 = bigMatrixImpl21.isSquare();
        double[] doubleArray25 = bigMatrixImpl21.getRowAsDoubleArray(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl21.transpose();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigMatrix27);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.getColumnMatrix(0);
        bigMatrixImpl20.setScale((int) (short) 0);
        int int49 = bigMatrixImpl20.getRowDimension();
        boolean boolean50 = bigMatrixImpl20.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45, true);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        int int51 = bigMatrixImpl49.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl49.getRowMatrix(4);
        bigMatrixImpl49.setScale(5);
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[][] doubleArray74 = new double[][] { doubleArray58, doubleArray61, doubleArray64, doubleArray67, doubleArray70, doubleArray73 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray74);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray74);
        int int77 = bigMatrixImpl76.getRowDimension();
        bigMatrixImpl76.setRoundingMode(5);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = bigMatrixImpl49.add(bigMatrixImpl76);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = bigMatrixImpl76.getEntryAsDouble((int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 6 + "'", int77 == 6);
        org.junit.Assert.assertNotNull(bigMatrixImpl80);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        boolean boolean29 = realMatrixImpl28.isSquare();
        double[][] doubleArray30 = realMatrixImpl28.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl28.getRowMatrix(2);
        int[] intArray36 = new int[] { (byte) 100, 4, '4' };
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl53);
        boolean boolean55 = realMatrixImpl49.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        int int63 = realMatrixImpl61.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl49.subtract(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl42.subtract(realMatrixImpl64);
        boolean boolean66 = realMatrixImpl65.isSingular();
        int[] intArray68 = new int[] { 4 };
        int[] intArray70 = new int[] { (byte) 0 };
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrixImpl65.getSubMatrix(intArray68, intArray70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrixImpl28.getSubMatrix(intArray36, intArray70);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[100, 4, 52]");
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl64);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[4]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0]");
        org.junit.Assert.assertNotNull(realMatrix71);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        boolean boolean50 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        java.math.BigDecimal bigDecimal75 = bigMatrixImpl72.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl72.copy();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = bigMatrixImpl21.add(bigMatrixImpl72);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl21.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigMatrixImpl77);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        boolean boolean19 = realMatrixImpl2.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = realMatrixImpl22.add(realMatrixImpl25);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        int int28 = realMatrixImpl2.getColumnDimension();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        double double8 = realMatrixImpl2.getEntry((int) (short) 1, 6);
        double double11 = realMatrixImpl2.getEntry(1, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl2.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl23.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        boolean boolean49 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        int int57 = realMatrixImpl55.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl43.subtract(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl23.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl23.copy();
        boolean boolean61 = realMatrixImpl23.isSquare();
        double[][] doubleArray62 = realMatrixImpl23.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl66.scalarAdd((double) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrixImpl66.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrixImpl23.subtract(realMatrix69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrix69);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        int int40 = realMatrixImpl38.getColumnDimension();
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[][] doubleArray59 = new double[][] { doubleArray43, doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray59);
        int int64 = realMatrixImpl63.getRowDimension();
        boolean boolean65 = realMatrixImpl38.equals((java.lang.Object) int64);
        int int66 = realMatrixImpl38.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl69.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl72);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl72.getColumnMatrix((int) (short) 1);
        boolean boolean76 = realMatrixImpl72.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl79 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl82 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = realMatrixImpl79.add(realMatrixImpl82);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl86 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl89 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = realMatrixImpl86.add(realMatrixImpl89);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = realMatrixImpl79.add(realMatrixImpl89);
        org.apache.commons.math.linear.RealMatrix realMatrix92 = realMatrixImpl72.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl89);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = realMatrixImpl38.subtract(realMatrix92);
        int int94 = realMatrixImpl38.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double95 = realMatrixImpl38.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl83);
        org.junit.Assert.assertNotNull(realMatrixImpl90);
        org.junit.Assert.assertNotNull(realMatrixImpl91);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getColumnDimension();
        double[] doubleArray25 = new double[] { 1, (byte) 10 };
        double[] doubleArray28 = new double[] { 1, (byte) 10 };
        double[] doubleArray31 = new double[] { 1, (byte) 10 };
        double[] doubleArray34 = new double[] { 1, (byte) 10 };
        double[] doubleArray37 = new double[] { 1, (byte) 10 };
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[][] doubleArray41 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl21.subtract(bigMatrixImpl43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl43.getRowMatrix((int) (short) 0);
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl68.getData();
        bigMatrixImpl68.setScale((int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl43.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl68);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigMatrix72);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.lang.String str45 = bigMatrixImpl20.toString();
        int int46 = bigMatrixImpl20.getRoundingMode();
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[][] doubleArray65 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray65);
        int int68 = bigMatrixImpl67.getScale();
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl67.getData();
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl67.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray70, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = bigMatrixImpl20.subtract(bigMatrixImpl72);
        int int74 = bigMatrixImpl20.getRoundingMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str45, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 64 + "'", int68 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrixImpl73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        java.lang.String str30 = bigMatrixImpl20.toString();
        double[][] doubleArray31 = bigMatrixImpl20.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str30, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl2.scalarAdd((double) (-1L));
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl24.getColumnMatrix((int) (short) 1);
        boolean boolean28 = realMatrixImpl24.isSingular();
        int int29 = realMatrixImpl24.getRowDimension();
        double[][] doubleArray30 = realMatrixImpl24.getData();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl2.setSubMatrix(doubleArray30, 5, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(doubleArray30);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, false);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl25.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        double[][] doubleArray37 = realMatrixImpl36.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray39 = realMatrixImpl36.getColumn(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(doubleArray37);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        double[][] doubleArray40 = realMatrixImpl38.getData();
        boolean boolean41 = realMatrixImpl38.isSingular();
        double[][] doubleArray42 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray42, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray42, false);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        boolean boolean50 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal52 = bigMatrixImpl45.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        double[] doubleArray26 = realMatrixImpl6.getRow((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = realMatrixImpl6.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        boolean boolean60 = realMatrixImpl46.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl37.add(realMatrixImpl46);
        double[] doubleArray64 = new double[] { 1, (byte) 10 };
        double[] doubleArray67 = new double[] { 1, (byte) 10 };
        double[] doubleArray70 = new double[] { 1, (byte) 10 };
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[][] doubleArray80 = new double[][] { doubleArray64, doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        boolean boolean83 = realMatrixImpl61.equals((java.lang.Object) bigMatrixImpl82);
        boolean boolean84 = bigMatrixImpl82.isSingular();
        bigMatrixImpl82.setRoundingMode(6);
        boolean boolean87 = bigMatrixImpl82.isSingular();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl27.add(realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl34.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl34.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl31.add(realMatrix48);
        double[] doubleArray51 = realMatrixImpl31.getRow((int) (byte) 1);
        boolean boolean52 = bigMatrixImpl21.equals((java.lang.Object) doubleArray51);
        java.math.BigDecimal bigDecimal53 = null;
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal bigDecimal55 = null;
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal bigDecimal57 = null;
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal57 };
        java.math.BigDecimal bigDecimal59 = null;
        java.math.BigDecimal[] bigDecimalArray60 = new java.math.BigDecimal[] { bigDecimal59 };
        java.math.BigDecimal bigDecimal61 = null;
        java.math.BigDecimal[] bigDecimalArray62 = new java.math.BigDecimal[] { bigDecimal61 };
        java.math.BigDecimal[][] bigDecimalArray63 = new java.math.BigDecimal[][] { bigDecimalArray54, bigDecimalArray56, bigDecimalArray58, bigDecimalArray60, bigDecimalArray62 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray63, true);
        int int66 = bigMatrixImpl65.getScale();
        boolean boolean67 = bigMatrixImpl65.isSingular();
        int int68 = bigMatrixImpl65.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl65.getData();
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl65.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = bigMatrixImpl21.subtract(bigMatrixImpl65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 64 + "'", int66 == 64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        int int13 = bigMatrixImpl12.getScale();
        boolean boolean14 = bigMatrixImpl12.isSingular();
        int int15 = bigMatrixImpl12.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrixImpl12.getData();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl12.getData();
        java.lang.Object obj18 = null;
        boolean boolean19 = bigMatrixImpl12.equals(obj18);
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl20.getColumnMatrix((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[] doubleArray84 = new double[] { 1, (byte) 10 };
        double[][] doubleArray85 = new double[][] { doubleArray69, doubleArray72, doubleArray75, doubleArray78, doubleArray81, doubleArray84 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl86 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray85);
        java.math.BigDecimal bigDecimal90 = bigMatrixImpl87.getEntry(0, (int) (short) 0);
        boolean boolean91 = bigMatrixImpl87.isSingular();
        java.math.BigDecimal[][] bigDecimalArray92 = bigMatrixImpl87.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = bigMatrixImpl66.subtract(bigMatrixImpl87);
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl66.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray92);
        org.junit.Assert.assertNotNull(bigMatrixImpl93);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        double[] doubleArray30 = realMatrixImpl5.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl41.add(realMatrixImpl51);
        double[] doubleArray55 = realMatrixImpl53.getColumn(10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl65.add(realMatrixImpl68);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl68.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl72);
        boolean boolean74 = realMatrixImpl68.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrixImpl77.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl80);
        int int82 = realMatrixImpl80.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = realMatrixImpl68.subtract(realMatrixImpl80);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl61.subtract(realMatrixImpl83);
        double[] doubleArray86 = realMatrixImpl61.getRow(0);
        boolean boolean87 = realMatrixImpl53.equals((java.lang.Object) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl53.scalarAdd(0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrixImpl53.getColumnMatrix(6);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl5.subtract(realMatrixImpl53);
        double double93 = realMatrixImpl92.getNorm();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl83);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        double[][] doubleArray10 = realMatrixImpl9.getData();
        double[][] doubleArray11 = realMatrixImpl9.getData();
        int int12 = realMatrixImpl9.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrixImpl9.getColumnMatrix(0);
        java.lang.String str15 = realMatrixImpl9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrixImpl9.getSubMatrix((int) (byte) 100, (int) (byte) 1, 4, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}" + "'", str15, "RealMatrixImpl{{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0},{0.0}}");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        double[][] doubleArray4 = realMatrixImpl2.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.scalarMultiply((double) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrixImpl2.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realMatrix6);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean24 = bigMatrixImpl23.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray26 = bigMatrixImpl23.getRow((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray8);
        int int12 = realMatrixImpl11.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl15.scalarAdd((double) 2);
        int int18 = realMatrixImpl15.getRowDimension();
        double double21 = realMatrixImpl15.getEntry((int) (short) 1, 6);
        double double24 = realMatrixImpl15.getEntry(1, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl11.subtract(realMatrixImpl15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl28.luDecompose();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: LU decomposition requires that the matrix be square.");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int21 = bigMatrixImpl20.getRowDimension();
        bigMatrixImpl20.setScale((int) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 100, 64);
        double double3 = realMatrixImpl2.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl6.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl16.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl20);
        boolean boolean22 = realMatrixImpl9.equals((java.lang.Object) realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl25.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl25.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl20.subtract(realMatrixImpl25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl2.multiply((org.apache.commons.math.linear.RealMatrix) realMatrixImpl25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl(1, 64);
        double[] doubleArray4 = realMatrixImpl2.getColumn((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl2.getSubMatrix((-1), (int) (byte) -1, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0]");
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(35, 5);
        int int3 = bigMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl(1, 64);
        double[] doubleArray8 = realMatrixImpl6.getColumn((int) (short) 10);
        boolean boolean9 = bigMatrixImpl2.equals((java.lang.Object) doubleArray8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = bigMatrixImpl45.add(bigMatrixImpl67);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl67.getNorm();
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        int int93 = bigMatrixImpl92.getColumnDimension();
        int int94 = bigMatrixImpl92.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = bigMatrixImpl67.subtract(bigMatrixImpl92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl20.subtract(bigMatrixImpl67);
        java.lang.String str97 = bigMatrixImpl67.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix99 = bigMatrixImpl67.multiply(bigMatrix98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 64 + "'", int94 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl95);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str97, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        boolean boolean71 = bigMatrixImpl67.isSingular();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl67.getData();
        int int73 = bigMatrixImpl67.getRowDimension();
        int int74 = bigMatrixImpl67.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl67.getColumnMatrix(6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl12.scalarMultiply(1.0d);
        boolean boolean17 = realMatrixImpl12.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl12.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = realMatrixImpl12.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25, false);
        double[][] doubleArray31 = bigMatrixImpl30.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, true);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        int int49 = bigMatrixImpl48.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl26.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        int int51 = bigMatrixImpl48.getRoundingMode();
        double[] doubleArray53 = bigMatrixImpl48.getColumnAsDoubleArray((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl48.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getDataRef();
        double[][] doubleArray30 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray30, true);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = realMatrixImpl32.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = null;
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal bigDecimal25 = null;
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal27 = null;
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal27 };
        java.math.BigDecimal bigDecimal29 = null;
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal31 = null;
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal[][] bigDecimalArray33 = new java.math.BigDecimal[][] { bigDecimalArray24, bigDecimalArray26, bigDecimalArray28, bigDecimalArray30, bigDecimalArray32 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray33, true);
        int int36 = bigMatrixImpl35.getScale();
        java.math.BigDecimal[][] bigDecimalArray37 = bigMatrixImpl35.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        boolean boolean49 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        int int57 = realMatrixImpl55.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl43.subtract(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl61.add(realMatrixImpl64);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl68 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = realMatrixImpl68.add(realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl61.add(realMatrixImpl71);
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl61.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl55.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        double double76 = realMatrixImpl61.getNorm();
        boolean boolean77 = bigMatrixImpl35.equals((java.lang.Object) realMatrixImpl61);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrixImpl22.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 64 + "'", int36 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(realMatrixImpl72);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 100, (int) 'a');
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        int int23 = bigMatrixImpl21.getScale();
        int int24 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl21.getDataRef();
        bigMatrixImpl21.setRoundingMode((int) ' ');
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl21.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl21.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl21.getRowMatrix(1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(bigMatrix31);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl23.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl33.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl37);
        boolean boolean39 = realMatrixImpl26.equals((java.lang.Object) realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl5.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl53.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        boolean boolean59 = realMatrixImpl46.equals((java.lang.Object) realMatrixImpl57);
        boolean boolean60 = realMatrixImpl46.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl37.add(realMatrixImpl46);
        boolean boolean62 = realMatrixImpl61.isSquare();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray21, true);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrixImpl38.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        boolean boolean44 = realMatrixImpl31.equals((java.lang.Object) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl31.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl31.scalarAdd((double) 97);
        boolean boolean48 = realMatrixImpl25.equals((java.lang.Object) realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl31.multiply(realMatrix49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl20.getData();
        int int28 = bigMatrixImpl20.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray29, true);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        int int25 = realMatrixImpl6.getRowDimension();
        double[][] doubleArray26 = realMatrixImpl6.getData();
        double[][] doubleArray27 = realMatrixImpl6.getData();
        java.lang.Class<?> wildcardClass28 = realMatrixImpl6.getClass();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl20.getColumnMatrix(0);
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl20.getData();
        java.lang.String str48 = bigMatrixImpl20.toString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str48, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = realMatrixImpl8.add(realMatrixImpl11);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl15.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl8.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl8.scalarAdd((double) (byte) 1);
        double[] doubleArray24 = realMatrixImpl8.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        double[] doubleArray26 = realMatrixImpl2.preMultiply(doubleArray24);
        boolean boolean27 = realMatrixImpl2.isSingular();
        boolean boolean28 = realMatrixImpl2.isSingular();
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl12);
        org.junit.Assert.assertNotNull(realMatrixImpl19);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        boolean boolean50 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[][] doubleArray70 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        java.math.BigDecimal bigDecimal75 = bigMatrixImpl72.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl72.copy();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = bigMatrixImpl21.add(bigMatrixImpl72);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl77.getRowMatrix((int) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigMatrixImpl77);
        org.junit.Assert.assertNotNull(bigMatrix79);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        double[][] doubleArray40 = realMatrixImpl38.getData();
        boolean boolean41 = realMatrixImpl38.isSingular();
        double[][] doubleArray42 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray42, false);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = realMatrixImpl47.add(realMatrixImpl50);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl54.add(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl57.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        boolean boolean63 = realMatrixImpl57.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrixImpl66.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl69);
        int int71 = realMatrixImpl69.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = realMatrixImpl57.subtract(realMatrixImpl69);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = realMatrixImpl50.subtract(realMatrixImpl72);
        double[] doubleArray75 = realMatrixImpl50.getRow(0);
        boolean boolean76 = realMatrixImpl50.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl44.multiply(realMatrixImpl50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realMatrixImpl51);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl72);
        org.junit.Assert.assertNotNull(realMatrixImpl73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = bigMatrixImpl20.add(bigMatrixImpl42);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl42.getNorm();
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        int int69 = bigMatrixImpl67.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = bigMatrixImpl42.subtract(bigMatrixImpl67);
        bigMatrixImpl70.setRoundingMode(97);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl70.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 64 + "'", int69 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl70);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl32.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl25.add(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl25.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrixImpl45.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl49);
        boolean boolean51 = realMatrixImpl45.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrixImpl54.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl57);
        int int59 = realMatrixImpl57.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = realMatrixImpl45.subtract(realMatrixImpl57);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl25.add(realMatrixImpl57);
        double[][] doubleArray62 = realMatrixImpl61.getData();
        int int63 = realMatrixImpl61.getColumnDimension();
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[] doubleArray69 = new double[] { 1, (byte) 10 };
        double[] doubleArray72 = new double[] { 1, (byte) 10 };
        double[] doubleArray75 = new double[] { 1, (byte) 10 };
        double[] doubleArray78 = new double[] { 1, (byte) 10 };
        double[] doubleArray81 = new double[] { 1, (byte) 10 };
        double[][] doubleArray82 = new double[][] { doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78, doubleArray81 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl83 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray82);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl84 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray82);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray82);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl86 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray82);
        int int87 = realMatrixImpl86.getRowDimension();
        boolean boolean88 = realMatrixImpl61.equals((java.lang.Object) int87);
        int int89 = realMatrixImpl61.getRowDimension();
        boolean boolean90 = bigMatrixImpl21.equals((java.lang.Object) realMatrixImpl61);
        bigMatrixImpl21.setRoundingMode((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal93 = bigMatrixImpl21.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl60);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        double[][] doubleArray21 = realMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl24.add(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl24.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl24.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl24.scalarMultiply((double) (short) -1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        double[][] doubleArray57 = realMatrixImpl42.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray57, false);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl24.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl59);
        int int61 = realMatrixImpl59.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl20.subtract(realMatrixImpl59);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int20 = bigMatrixImpl19.getRoundingMode();
        boolean boolean21 = bigMatrixImpl19.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl19.transpose();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl19.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl19.getRowMatrix((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl16.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl9.add(realMatrixImpl19);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl9.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrixImpl6.add(realMatrix23);
        double[] doubleArray26 = realMatrixImpl6.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrixImpl6.scalarMultiply((double) 35);
        java.lang.Object obj29 = null;
        boolean boolean30 = realMatrixImpl6.equals(obj29);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl((int) '4', 5);
        java.math.BigDecimal[] bigDecimalArray35 = bigMatrixImpl33.getColumn(0);
        boolean boolean36 = realMatrixImpl6.equals((java.lang.Object) bigMatrixImpl33);
        boolean boolean37 = bigMatrixImpl33.isSingular();
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        double[] doubleArray18 = realMatrixImpl2.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = realMatrixImpl37.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = realMatrixImpl30.add(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrixImpl30.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrixImpl27.add(realMatrix44);
        double[] doubleArray47 = realMatrixImpl27.getRow((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray48 = realMatrixImpl20.solve(doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl41);
        org.junit.Assert.assertNotNull(realMatrixImpl42);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        double[] doubleArray48 = new double[] { 1, (byte) 10 };
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        int int68 = bigMatrixImpl67.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = bigMatrixImpl45.add(bigMatrixImpl67);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl67.getNorm();
        double[] doubleArray73 = new double[] { 1, (byte) 10 };
        double[] doubleArray76 = new double[] { 1, (byte) 10 };
        double[] doubleArray79 = new double[] { 1, (byte) 10 };
        double[] doubleArray82 = new double[] { 1, (byte) 10 };
        double[] doubleArray85 = new double[] { 1, (byte) 10 };
        double[] doubleArray88 = new double[] { 1, (byte) 10 };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl91 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray89);
        int int93 = bigMatrixImpl92.getColumnDimension();
        int int94 = bigMatrixImpl92.getScale();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = bigMatrixImpl67.subtract(bigMatrixImpl92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = bigMatrixImpl20.subtract(bigMatrixImpl67);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix98 = bigMatrixImpl96.getColumnMatrix(2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 64 + "'", int94 == 64);
        org.junit.Assert.assertNotNull(bigMatrixImpl95);
        org.junit.Assert.assertNotNull(bigMatrixImpl96);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        double[] doubleArray8 = realMatrixImpl5.getColumn((int) (byte) 0);
        boolean boolean10 = realMatrixImpl5.equals((java.lang.Object) 6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrixImpl5.getSubMatrix(0, (int) (byte) 1, (int) (byte) 100, 97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        double[][] doubleArray24 = bigMatrixImpl20.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = realMatrixImpl35.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = realMatrixImpl28.add(realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl28.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrixImpl45.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl52.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl55.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl59);
        boolean boolean61 = realMatrixImpl48.equals((java.lang.Object) realMatrixImpl59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl28.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrixImpl28.scalarMultiply((double) 0.0f);
        double[] doubleArray66 = realMatrixImpl28.getRow(4);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray67 = realMatrixImpl25.solve(doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl39);
        org.junit.Assert.assertNotNull(realMatrixImpl40);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        bigMatrixImpl20.setRoundingMode(52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl20.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[][] doubleArray41 = realMatrixImpl34.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl45.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl52.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl55.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl59);
        boolean boolean61 = realMatrixImpl55.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl64.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl67);
        int int69 = realMatrixImpl67.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl55.subtract(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = realMatrixImpl48.subtract(realMatrixImpl70);
        boolean boolean72 = realMatrixImpl71.isSquare();
        double[][] doubleArray73 = realMatrixImpl71.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray73, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl78 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray73, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrixImpl42.solve((org.apache.commons.math.linear.RealMatrix) realMatrixImpl78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertNotNull(realMatrixImpl71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl20.getRowMatrix(1);
        int int27 = bigMatrixImpl20.getColumnDimension();
        int int28 = bigMatrixImpl20.getScale();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl20.getData();
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[] doubleArray47 = new double[] { 1, (byte) 10 };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        java.math.BigDecimal bigDecimal53 = bigMatrixImpl50.getEntry(0, (int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray54 = bigMatrixImpl50.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl50.getRowMatrix(1);
        int int57 = bigMatrixImpl50.getColumnDimension();
        int int58 = bigMatrixImpl50.getScale();
        java.math.BigDecimal[][] bigDecimalArray59 = bigMatrixImpl50.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl20.setSubMatrix(bigDecimalArray59, 52, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 64 + "'", int58 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getRoundingMode();
        bigMatrixImpl21.setRoundingMode((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl34.add(realMatrixImpl37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl41);
        boolean boolean43 = realMatrixImpl30.equals((java.lang.Object) realMatrixImpl41);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl53.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl46.add(realMatrixImpl56);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl46.scalarAdd((double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl46.getColumnMatrix((int) (short) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl41.subtract(realMatrixImpl46);
        double[] doubleArray65 = realMatrixImpl41.getColumn((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray66 = bigMatrixImpl21.operate(doubleArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrixImpl57);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        boolean boolean25 = bigMatrixImpl20.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl20.getRowMatrix(0);
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[] doubleArray45 = new double[] { 1, (byte) 10 };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        double[] doubleArray51 = new double[] { 1, (byte) 10 };
        double[] doubleArray54 = new double[] { 1, (byte) 10 };
        double[] doubleArray57 = new double[] { 1, (byte) 10 };
        double[] doubleArray60 = new double[] { 1, (byte) 10 };
        double[] doubleArray63 = new double[] { 1, (byte) 10 };
        double[] doubleArray66 = new double[] { 1, (byte) 10 };
        double[][] doubleArray67 = new double[][] { doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63, doubleArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        int int71 = bigMatrixImpl70.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = bigMatrixImpl48.add(bigMatrixImpl70);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl48.getColumnMatrix(0);
        int int75 = bigMatrixImpl48.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl20.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl72);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 1, (int) 'a');
        java.lang.String str3 = realMatrixImpl2.toString();
        int int4 = realMatrixImpl2.getColumnDimension();
        double[] doubleArray7 = new double[] { 1, (byte) 10 };
        double[] doubleArray10 = new double[] { 1, (byte) 10 };
        double[] doubleArray13 = new double[] { 1, (byte) 10 };
        double[] doubleArray16 = new double[] { 1, (byte) 10 };
        double[] doubleArray19 = new double[] { 1, (byte) 10 };
        double[] doubleArray22 = new double[] { 1, (byte) 10 };
        double[][] doubleArray23 = new double[][] { doubleArray7, doubleArray10, doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray23, false);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl27.scalarAdd((double) (byte) 10);
        double[][] doubleArray30 = realMatrixImpl27.getDataRef();
        double[] doubleArray32 = realMatrixImpl27.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = realMatrixImpl2.solve(doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "RealMatrixImpl{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}" + "'", str3, "RealMatrixImpl{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getRowDimension();
        int int17 = bigMatrixImpl12.getRoundingMode();
        int int18 = bigMatrixImpl12.getColumnDimension();
        bigMatrixImpl12.setRoundingMode((int) '#');
        java.math.BigDecimal[] bigDecimalArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray22 = bigMatrixImpl12.preMultiply(bigDecimalArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl2.copy();
        double[][] doubleArray18 = realMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = realMatrixImpl21.add(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl28.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = realMatrixImpl21.add(realMatrixImpl31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl21.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl21.copy();
        double[][] doubleArray37 = realMatrixImpl21.getDataRef();
        boolean boolean38 = realMatrixImpl21.isSingular();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrixImpl21.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = realMatrixImpl56.add(realMatrixImpl59);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl49.add(realMatrixImpl59);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrixImpl59.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl66.add(realMatrixImpl69);
        double[] doubleArray72 = realMatrixImpl69.getColumn((int) (byte) 0);
        boolean boolean74 = realMatrixImpl69.equals((java.lang.Object) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrixImpl69.getRowMatrix(5);
        double[] doubleArray78 = realMatrixImpl69.getColumn(0);
        double[] doubleArray79 = realMatrixImpl59.preMultiply(doubleArray78);
        double[] doubleArray80 = realMatrixImpl21.preMultiply(doubleArray78);
        double[] doubleArray81 = realMatrixImpl2.preMultiply(doubleArray78);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realMatrixImpl25);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertNotNull(realMatrixImpl33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl60);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrixImpl19.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl26.add(realMatrixImpl29);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl33);
        boolean boolean35 = realMatrixImpl22.equals((java.lang.Object) realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl2.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = realMatrixImpl46.add(realMatrixImpl49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl49.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl53);
        boolean boolean55 = realMatrixImpl49.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrixImpl58.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl61);
        int int63 = realMatrixImpl61.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = realMatrixImpl49.subtract(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = realMatrixImpl42.subtract(realMatrixImpl64);
        double[] doubleArray67 = realMatrixImpl42.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl74);
        double double76 = realMatrixImpl74.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl36.subtract(realMatrixImpl74);
        double[] doubleArray79 = realMatrixImpl36.getColumn(0);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl50);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl64);
        org.junit.Assert.assertNotNull(realMatrixImpl65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        boolean boolean25 = bigMatrixImpl24.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl24.transpose();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal27 = bigMatrixImpl24.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(bigMatrix26);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        boolean boolean20 = realMatrixImpl5.equals((java.lang.Object) 0.0d);
        boolean boolean21 = realMatrixImpl5.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl5.getSubMatrix((-1), (int) (short) 100, (int) (byte) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        double[] doubleArray18 = realMatrixImpl2.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl20.scalarMultiply((double) 0L);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 100, (int) (byte) 10);
        double double3 = realMatrixImpl2.getNorm();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = realMatrixImpl6.add(realMatrixImpl9);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = realMatrixImpl13.add(realMatrixImpl16);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrixImpl16.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl20);
        boolean boolean22 = realMatrixImpl16.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrixImpl25.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl28);
        int int30 = realMatrixImpl28.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = realMatrixImpl16.subtract(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = realMatrixImpl9.subtract(realMatrixImpl31);
        boolean boolean33 = realMatrixImpl32.isSingular();
        int[] intArray35 = new int[] { 4 };
        int[] intArray37 = new int[] { (byte) 0 };
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrixImpl32.getSubMatrix(intArray35, intArray37);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl41 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl41.add(realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = realMatrixImpl48.add(realMatrixImpl51);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl51.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        boolean boolean57 = realMatrixImpl51.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl63);
        int int65 = realMatrixImpl63.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = realMatrixImpl51.subtract(realMatrixImpl63);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl44.subtract(realMatrixImpl66);
        boolean boolean68 = realMatrixImpl67.isSingular();
        int[] intArray70 = new int[] { 4 };
        int[] intArray72 = new int[] { (byte) 0 };
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl67.getSubMatrix(intArray70, intArray72);
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl2.getSubMatrix(intArray37, intArray72);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrixImpl10);
        org.junit.Assert.assertNotNull(realMatrixImpl17);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl31);
        org.junit.Assert.assertNotNull(realMatrixImpl32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[4]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0]");
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrixImpl52);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl66);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[4]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(realMatrix74);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl23.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl47 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl43.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl47);
        boolean boolean49 = realMatrixImpl43.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl52.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl55);
        int int57 = realMatrixImpl55.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = realMatrixImpl43.subtract(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = realMatrixImpl23.add(realMatrixImpl55);
        double[][] doubleArray60 = realMatrixImpl59.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = realMatrixImpl63.add(realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl74 = realMatrixImpl70.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl63.add(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrixImpl63.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl83.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl63.add(realMatrix88);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl90 = realMatrixImpl59.subtract(realMatrixImpl63);
        double[] doubleArray92 = realMatrixImpl90.getRow(4);
        double[] doubleArray93 = realMatrixImpl17.operate(doubleArray92);
        double[][] doubleArray94 = realMatrixImpl17.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray94);
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl58);
        org.junit.Assert.assertNotNull(realMatrixImpl59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realMatrixImpl67);
        org.junit.Assert.assertNotNull(realMatrixImpl74);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrixImpl90);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        double[] doubleArray23 = new double[] { 1, (byte) 10 };
        double[] doubleArray26 = new double[] { 1, (byte) 10 };
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        int int43 = bigMatrixImpl42.getColumnDimension();
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[] doubleArray58 = new double[] { 1, (byte) 10 };
        double[] doubleArray61 = new double[] { 1, (byte) 10 };
        double[][] doubleArray62 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = bigMatrixImpl42.subtract(bigMatrixImpl64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = bigMatrixImpl20.add(bigMatrixImpl65);
        java.math.BigDecimal[][] bigDecimalArray67 = bigMatrixImpl66.getData();
        java.math.BigDecimal bigDecimal68 = bigMatrixImpl66.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrixImpl65);
        org.junit.Assert.assertNotNull(bigMatrixImpl66);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
        org.junit.Assert.assertNotNull(bigDecimal68);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.math.BigDecimal bigDecimal0 = null;
        java.math.BigDecimal[] bigDecimalArray1 = new java.math.BigDecimal[] { bigDecimal0 };
        java.math.BigDecimal bigDecimal2 = null;
        java.math.BigDecimal[] bigDecimalArray3 = new java.math.BigDecimal[] { bigDecimal2 };
        java.math.BigDecimal bigDecimal4 = null;
        java.math.BigDecimal[] bigDecimalArray5 = new java.math.BigDecimal[] { bigDecimal4 };
        java.math.BigDecimal bigDecimal6 = null;
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal8 = null;
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal[][] bigDecimalArray10 = new java.math.BigDecimal[][] { bigDecimalArray1, bigDecimalArray3, bigDecimalArray5, bigDecimalArray7, bigDecimalArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10, true);
        bigMatrixImpl12.setScale((int) (short) 0);
        int int15 = bigMatrixImpl12.getRoundingMode();
        int int16 = bigMatrixImpl12.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrixImpl12.getColumnMatrix((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimalArray1);
        org.junit.Assert.assertNotNull(bigDecimalArray3);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal[] bigDecimalArray24 = bigMatrixImpl22.getRow(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrixImpl27.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl30);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl30.getColumnMatrix((int) (short) 1);
        boolean boolean34 = realMatrixImpl30.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl30.getColumnMatrix((int) (byte) 10);
        boolean boolean37 = bigMatrixImpl22.equals((java.lang.Object) (byte) 10);
        double[] doubleArray40 = new double[] { 1, (byte) 10 };
        double[] doubleArray43 = new double[] { 1, (byte) 10 };
        double[] doubleArray46 = new double[] { 1, (byte) 10 };
        double[] doubleArray49 = new double[] { 1, (byte) 10 };
        double[] doubleArray52 = new double[] { 1, (byte) 10 };
        double[] doubleArray55 = new double[] { 1, (byte) 10 };
        double[][] doubleArray56 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49, doubleArray52, doubleArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray56);
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl57.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl22.scalarAdd(bigDecimal58);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl22.transpose();
        bigMatrixImpl22.setScale(64);
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[] doubleArray68 = new double[] { 1, (byte) 10 };
        double[] doubleArray71 = new double[] { 1, (byte) 10 };
        double[] doubleArray74 = new double[] { 1, (byte) 10 };
        double[] doubleArray77 = new double[] { 1, (byte) 10 };
        double[] doubleArray80 = new double[] { 1, (byte) 10 };
        double[][] doubleArray81 = new double[][] { doubleArray65, doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray81);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl83 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray81);
        int int84 = bigMatrixImpl83.getScale();
        java.math.BigDecimal[][] bigDecimalArray85 = bigMatrixImpl83.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl83.copy();
        int int87 = bigMatrixImpl83.getRowDimension();
        boolean boolean88 = bigMatrixImpl83.isSingular();
        java.math.BigDecimal[][] bigDecimalArray89 = bigMatrixImpl83.getDataRef();
        bigMatrixImpl83.setRoundingMode((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix92 = bigMatrixImpl22.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 64 + "'", int84 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray85);
        org.junit.Assert.assertNotNull(bigMatrix86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray89);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        boolean boolean21 = bigMatrixImpl20.isSquare();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl20.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl24.copy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix25);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl5.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl9);
        boolean boolean11 = realMatrixImpl5.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrixImpl14.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl17);
        int int19 = realMatrixImpl17.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl5.subtract(realMatrixImpl17);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl23.add(realMatrixImpl26);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = realMatrixImpl30.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl23.add(realMatrixImpl33);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrixImpl23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrixImpl17.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl23);
        double[] doubleArray39 = realMatrixImpl17.getColumn((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        double[] doubleArray48 = realMatrixImpl45.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray48);
        double[][] doubleArray50 = realMatrixImpl49.getData();
        double[][] doubleArray51 = realMatrixImpl49.getData();
        int int52 = realMatrixImpl49.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrixImpl49.getColumnMatrix(0);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl49.scalarMultiply((double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = realMatrixImpl17.multiply(realMatrixImpl49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl34);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix56);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl20.getEntry(0, (int) (short) 0);
        boolean boolean24 = bigMatrixImpl20.isSingular();
        java.math.BigDecimal[][] bigDecimalArray25 = bigMatrixImpl20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25, true);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25, false);
        int int31 = bigMatrixImpl30.getRoundingMode();
        boolean boolean32 = bigMatrixImpl30.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal33 = bigMatrixImpl30.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl21.getRowMatrix(4);
        double[] doubleArray29 = new double[] { 1, (byte) 10 };
        double[] doubleArray32 = new double[] { 1, (byte) 10 };
        double[] doubleArray35 = new double[] { 1, (byte) 10 };
        double[] doubleArray38 = new double[] { 1, (byte) 10 };
        double[] doubleArray41 = new double[] { 1, (byte) 10 };
        double[] doubleArray44 = new double[] { 1, (byte) 10 };
        double[][] doubleArray45 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        double[] doubleArray50 = new double[] { 1, (byte) 10 };
        double[] doubleArray53 = new double[] { 1, (byte) 10 };
        double[] doubleArray56 = new double[] { 1, (byte) 10 };
        double[] doubleArray59 = new double[] { 1, (byte) 10 };
        double[] doubleArray62 = new double[] { 1, (byte) 10 };
        double[] doubleArray65 = new double[] { 1, (byte) 10 };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl67 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray66);
        int int70 = bigMatrixImpl69.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = bigMatrixImpl47.add(bigMatrixImpl69);
        java.math.BigDecimal bigDecimal72 = bigMatrixImpl69.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl21.scalarAdd(bigDecimal72);
        int int74 = bigMatrixImpl21.getScale();
        java.math.BigDecimal[][] bigDecimalArray75 = bigMatrixImpl21.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray75);
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrixImpl76.getRowMatrix((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(bigMatrixImpl71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(bigMatrix78);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl72.scalarAdd((double) 2);
        int int75 = realMatrixImpl72.getRowDimension();
        double double78 = realMatrixImpl72.getEntry((int) (short) 1, 6);
        double double81 = realMatrixImpl72.getEntry(1, (int) (byte) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl84.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        int int89 = realMatrixImpl87.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix90 = realMatrixImpl72.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl91 = realMatrixImpl42.subtract(realMatrixImpl72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix93 = realMatrixImpl91.getRowMatrix(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertNotNull(realMatrixImpl91);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl2.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl26 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrixImpl22.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl26);
        boolean boolean28 = realMatrixImpl22.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrixImpl31.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        int int36 = realMatrixImpl34.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl22.subtract(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = realMatrixImpl2.add(realMatrixImpl34);
        double[][] doubleArray39 = realMatrixImpl38.getData();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = realMatrixImpl42.add(realMatrixImpl45);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = realMatrixImpl49.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl42.add(realMatrixImpl52);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrixImpl42.getColumnMatrix((int) ' ');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl63 = realMatrixImpl59.add(realMatrixImpl62);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl66 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrixImpl62.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl66);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl42.add(realMatrix67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = realMatrixImpl38.subtract(realMatrixImpl42);
        double[] doubleArray71 = realMatrixImpl42.getColumn((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double74 = realMatrixImpl42.getEntry(64, 2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realMatrixImpl46);
        org.junit.Assert.assertNotNull(realMatrixImpl53);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrixImpl63);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrixImpl69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        int int22 = bigMatrixImpl21.getScale();
        int int23 = bigMatrixImpl21.getRoundingMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be postive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl21.getColumnMatrix((int) (short) 1);
        double[] doubleArray27 = new double[] { 1, (byte) 10 };
        double[] doubleArray30 = new double[] { 1, (byte) 10 };
        double[] doubleArray33 = new double[] { 1, (byte) 10 };
        double[] doubleArray36 = new double[] { 1, (byte) 10 };
        double[] doubleArray39 = new double[] { 1, (byte) 10 };
        double[] doubleArray42 = new double[] { 1, (byte) 10 };
        double[][] doubleArray43 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl45.getEntry(0, (int) (short) 0);
        boolean boolean49 = bigMatrixImpl45.isSingular();
        boolean boolean50 = bigMatrixImpl45.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl21.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl45.transpose();
        java.lang.String str53 = bigMatrixImpl45.toString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}" + "'", str53, "BigMatrixImpl{{1,10},{1,10},{1,10},{1,10},{1,10},{1,10}}");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        boolean boolean25 = bigMatrixImpl24.isSingular();
        int int26 = bigMatrixImpl24.getRowDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        boolean boolean7 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl2.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrixImpl2.transpose();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrixImpl5.getColumnMatrix((int) (short) 1);
        boolean boolean9 = realMatrixImpl5.isSingular();
        int int10 = realMatrixImpl5.getRowDimension();
        double[][] doubleArray11 = realMatrixImpl5.getData();
        java.lang.Class<?> wildcardClass12 = doubleArray11.getClass();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        boolean boolean23 = bigMatrixImpl21.isSquare();
        bigMatrixImpl21.setScale(0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = bigMatrixImpl21.getColumnAsDoubleArray((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        double[] doubleArray2 = new double[] { 1, (byte) 10 };
        double[] doubleArray5 = new double[] { 1, (byte) 10 };
        double[] doubleArray8 = new double[] { 1, (byte) 10 };
        double[] doubleArray11 = new double[] { 1, (byte) 10 };
        double[] doubleArray14 = new double[] { 1, (byte) 10 };
        double[] doubleArray17 = new double[] { 1, (byte) 10 };
        double[][] doubleArray18 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11, doubleArray14, doubleArray17 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray18);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22, false);
        int int25 = bigMatrixImpl24.getRoundingMode();
        double[][] doubleArray26 = bigMatrixImpl24.getDataAsDoubleArray();
        double[] doubleArray28 = bigMatrixImpl24.getColumnAsDoubleArray((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl5.equals((java.lang.Object) realMatrixImpl16);
        int int19 = realMatrixImpl16.getRowDimension();
        java.lang.Class<?> wildcardClass20 = realMatrixImpl16.getClass();
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrixImpl6.scalarMultiply((double) 100L);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = realMatrixImpl12.add(realMatrixImpl15);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl22 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl23 = realMatrixImpl19.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = realMatrixImpl12.add(realMatrixImpl22);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrixImpl12.getColumnMatrix((int) ' ');
        java.lang.Object obj27 = null;
        boolean boolean28 = realMatrixImpl12.equals(obj27);
        boolean boolean29 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl30 = realMatrixImpl6.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl33 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = realMatrixImpl33.add(realMatrixImpl36);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl40.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = realMatrixImpl33.add(realMatrixImpl43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl33.scalarAdd((double) (byte) 1);
        double[] doubleArray49 = realMatrixImpl33.getColumn((int) (short) 10);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl(doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray54 = realMatrixImpl12.solve(doubleArray49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrixImpl16);
        org.junit.Assert.assertNotNull(realMatrixImpl23);
        org.junit.Assert.assertNotNull(realMatrixImpl24);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl30);
        org.junit.Assert.assertNotNull(realMatrixImpl37);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(realMatrixImpl45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        boolean boolean3 = realMatrixImpl2.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrixImpl2.scalarMultiply((double) 1L);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrixImpl2.transpose();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrixImpl2.scalarAdd((double) 2);
        int int5 = realMatrixImpl2.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl8 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl11 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = realMatrixImpl8.add(realMatrixImpl11);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl15 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl18 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl19 = realMatrixImpl15.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = realMatrixImpl8.add(realMatrixImpl18);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrixImpl8.scalarAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl25 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = realMatrixImpl25.add(realMatrixImpl28);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        boolean boolean34 = realMatrixImpl28.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl37 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl40 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrixImpl37.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl40);
        int int42 = realMatrixImpl40.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl28.subtract(realMatrixImpl40);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl44 = realMatrixImpl8.add(realMatrixImpl40);
        double[][] doubleArray45 = realMatrixImpl44.getData();
        int int46 = realMatrixImpl44.getColumnDimension();
        boolean boolean47 = realMatrixImpl2.equals((java.lang.Object) realMatrixImpl44);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl50 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl53 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = realMatrixImpl50.add(realMatrixImpl53);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl57 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl60 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = realMatrixImpl57.add(realMatrixImpl60);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrixImpl60.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl64);
        boolean boolean66 = realMatrixImpl60.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl69 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl72 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl69.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl72);
        int int74 = realMatrixImpl72.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl75 = realMatrixImpl60.subtract(realMatrixImpl72);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl53.subtract(realMatrixImpl75);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl44.subtract(realMatrixImpl75);
        int int78 = realMatrixImpl44.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl12);
        org.junit.Assert.assertNotNull(realMatrixImpl19);
        org.junit.Assert.assertNotNull(realMatrixImpl20);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrixImpl29);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrixImpl44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(realMatrixImpl54);
        org.junit.Assert.assertNotNull(realMatrixImpl61);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl75);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        boolean boolean7 = realMatrixImpl6.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl10 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl14 = realMatrixImpl10.add(realMatrixImpl13);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl17 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl20 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = realMatrixImpl17.add(realMatrixImpl20);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl20.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        boolean boolean26 = realMatrixImpl20.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl29 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl32 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrixImpl29.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl32);
        int int34 = realMatrixImpl32.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl20.subtract(realMatrixImpl32);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl36 = realMatrixImpl13.subtract(realMatrixImpl35);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl39 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl42 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl43 = realMatrixImpl39.add(realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl46 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrixImpl42.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl46);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrixImpl36.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl42);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl51 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl54 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = realMatrixImpl51.add(realMatrixImpl54);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl58 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl61 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl62 = realMatrixImpl58.add(realMatrixImpl61);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl65 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrixImpl61.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl65);
        boolean boolean67 = realMatrixImpl61.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl73 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrixImpl70.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl73);
        int int75 = realMatrixImpl73.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl76 = realMatrixImpl61.subtract(realMatrixImpl73);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl77 = realMatrixImpl54.subtract(realMatrixImpl76);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl80 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl83 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl84 = realMatrixImpl80.add(realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl87 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrixImpl83.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl87);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrixImpl77.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        org.apache.commons.math.linear.RealMatrix realMatrix90 = realMatrixImpl42.add((org.apache.commons.math.linear.RealMatrix) realMatrixImpl83);
        double[][] doubleArray91 = realMatrixImpl83.getDataRef();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl92 = realMatrixImpl6.subtract(realMatrixImpl83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix97 = realMatrixImpl83.getSubMatrix((int) (short) -1, (int) (byte) 0, 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realMatrixImpl14);
        org.junit.Assert.assertNotNull(realMatrixImpl21);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrixImpl36);
        org.junit.Assert.assertNotNull(realMatrixImpl43);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrixImpl55);
        org.junit.Assert.assertNotNull(realMatrixImpl62);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl76);
        org.junit.Assert.assertNotNull(realMatrixImpl77);
        org.junit.Assert.assertNotNull(realMatrixImpl84);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(realMatrixImpl92);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl2 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl5 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl6 = realMatrixImpl2.add(realMatrixImpl5);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl9 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl12 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl13 = realMatrixImpl9.add(realMatrixImpl12);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl16 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrixImpl12.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl16);
        boolean boolean18 = realMatrixImpl12.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl21 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl24 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrixImpl21.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl24);
        int int26 = realMatrixImpl24.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl27 = realMatrixImpl12.subtract(realMatrixImpl24);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl28 = realMatrixImpl5.subtract(realMatrixImpl27);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl31 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl34 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl35 = realMatrixImpl31.add(realMatrixImpl34);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl38 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrixImpl34.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl38);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrixImpl28.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl34);
        double[] doubleArray42 = realMatrixImpl34.getColumn(0);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl45 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl48 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl49 = realMatrixImpl45.add(realMatrixImpl48);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl52 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl55 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl56 = realMatrixImpl52.add(realMatrixImpl55);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl59 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrixImpl55.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl59);
        boolean boolean61 = realMatrixImpl55.isSquare();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl64 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl67 = new org.apache.commons.math.linear.RealMatrixImpl((int) (byte) 10, (int) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrixImpl64.subtract((org.apache.commons.math.linear.RealMatrix) realMatrixImpl67);
        int int69 = realMatrixImpl67.getRowDimension();
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl70 = realMatrixImpl55.subtract(realMatrixImpl67);
        org.apache.commons.math.linear.RealMatrixImpl realMatrixImpl71 = realMatrixImpl48.subtract(realMatrixImpl70);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrixImpl71.getColumnMatrix(0);
        double[][] doubleArray74 = realMatrixImpl71.getData();
        // The following exception was thrown during execution in test generation
        try {
            realMatrixImpl34.setSubMatrix(doubleArray74, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrixImpl6);
        org.junit.Assert.assertNotNull(realMatrixImpl13);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl27);
        org.junit.Assert.assertNotNull(realMatrixImpl28);
        org.junit.Assert.assertNotNull(realMatrixImpl35);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrixImpl49);
        org.junit.Assert.assertNotNull(realMatrixImpl56);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(realMatrixImpl70);
        org.junit.Assert.assertNotNull(realMatrixImpl71);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }
}


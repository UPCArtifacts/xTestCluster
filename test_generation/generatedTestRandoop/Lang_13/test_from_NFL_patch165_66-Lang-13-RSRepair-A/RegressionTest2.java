import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Class<?> wildcardClass12 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass11);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11, outputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(serializable10);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Class<?> wildcardClass8 = byteArray5.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + '4' + "'", obj5, '4');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray4.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass10 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass13, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray12);
        java.lang.Class<?> wildcardClass14 = byteArray13.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -111, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass8 = byteArray4.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass8 = byteArray4.getClass();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray11);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray12);
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(serializable10);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 100.0f + "'", obj5, 100.0f);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 100.0f + "'", obj6, 100.0f);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize(serializable6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone(serializable6);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable6, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(serializable8);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize(serializable5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable5, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray7.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray6.getClass();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11);
        java.lang.Class<?> wildcardClass14 = byteArray13.getClass();
        java.lang.Class<?> wildcardClass15 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass14);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize(serializable7);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable7, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.lang.Class<?> wildcardClass5 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class [B");
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize(serializable3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize(serializable3);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable3, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize(serializable6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable6, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 100.0f + "'", obj5, 100.0f);
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class java.lang.Object");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 37, -84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.Object");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.Object");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 37, -84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 'a' + "'", obj5, 'a');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1L);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass3 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Class<?> wildcardClass7 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 74, -84, -19, 0, 5, 118, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass8 = byteArray3.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass8 = serializable7.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 100.0f + "'", obj5, 100.0f);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 100.0f + "'", obj6, 100.0f);
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize(serializable8);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1L);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1L + "'", obj4, 1L);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray6.getClass();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        java.lang.Class<?> wildcardClass4 = serializable3.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 36, -84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass7 = byteArray3.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass9 = byteArray3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Class<?> wildcardClass10 = byteArray8.getClass();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray7);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(serializable9);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (short) -1);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass4 = byteArray1.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass8 = byteArray5.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (byte) -1 + "'", obj4, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray4.getClass();
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray4);
        java.lang.Class<?> wildcardClass8 = serializable7.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray5);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray11.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray9);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable11, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable11);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass4 = byteArray1.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass8 = byteArray5.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.lang.Class<?> wildcardClass10 = byteArray9.getClass();
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray7);
        java.lang.Class<?> wildcardClass10 = serializable9.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray7.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.lang.Class<?> wildcardClass11 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass12, outputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone(serializable7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize(serializable8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.io.Serializable serializable14 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray13);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable14);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass9 = byteArray5.getClass();
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class [B");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize(serializable5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.lang.Class<?> wildcardClass5 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass6 = byteArray3.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize(serializable4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass11 = serializable10.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass4 = byteArray1.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class [B");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.io.Serializable serializable0 = null;
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize(serializable0);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1, outputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 112]");
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class [B");
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass9 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 0.0f);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = byteArray3.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.Serializable serializable13 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable13);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize(serializable11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray12);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray12, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass11 = byteArray6.getClass();
        java.lang.Class<?> wildcardClass12 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11);
        java.lang.Class<?> wildcardClass14 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass11);
        java.io.Serializable serializable15 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(serializable15);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass10 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(serializable9);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class java.lang.Object");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 37, -84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.Object");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.Object");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 37, -84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Class<?> wildcardClass8 = byteArray4.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray12);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray7.getClass();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize(serializable3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '#');
        java.io.OutputStream outputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1, outputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 35]");
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray12);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + '4' + "'", obj5, '4');
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + '4' + "'", obj6, '4');
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray1.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray7.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray4);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + '4' + "'", obj6, '4');
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + '4' + "'", obj9, '4');
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + '4' + "'", obj10, '4');
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 0.0f);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass3 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize(serializable6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 100.0f + "'", obj5, 100.0f);
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class [B");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone(serializable7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize(serializable8);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable8, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass4 = byteArray3.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Class<?> wildcardClass10 = byteArray8.getClass();
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 0.0f);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1, outputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray4);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize(serializable7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + '4' + "'", obj6, '4');
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (short) 0);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class [B");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (short) 0);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2, outputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + (short) 0 + "'", obj3, (short) 0);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Class<?> wildcardClass8 = byteArray3.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Class<?> wildcardClass12 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Class<?> wildcardClass6 = byteArray3.getClass();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + '4' + "'", obj4, '4');
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass7 = byteArray4.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass12 = serializable11.getClass();
        java.lang.Class<?> wildcardClass13 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 'a' + "'", obj5, 'a');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Class<?> wildcardClass10 = byteArray8.getClass();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        java.lang.Class<?> wildcardClass5 = byteArray4.getClass();
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone(serializable7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize(serializable8);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        java.io.Serializable serializable12 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray9);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9, outputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(serializable12);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class java.lang.Object");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 37, -84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.Object");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.Object");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 37, -84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class java.lang.Object");
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass8 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (short) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (short) -1 + "'", obj2, (short) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1, -1]");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Class<?> wildcardClass10 = byteArray9.getClass();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray5);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass14 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        java.io.Serializable serializable14 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray12);
        byte[] byteArray15 = org.apache.commons.lang3.SerializationUtils.serialize(serializable14);
        java.lang.Object obj16 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray15);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(serializable14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Object obj15 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize(serializable3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize(serializable3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray7);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Class<?> wildcardClass12 = byteArray7.getClass();
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass12);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 'a' + "'", obj5, 'a');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -125, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize(serializable10);
        java.io.Serializable serializable12 = org.apache.commons.lang3.SerializationUtils.clone(serializable10);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable12, outputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable12);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass4 = byteArray1.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Class<?> wildcardClass11 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.lang.Class<?> wildcardClass8 = byteArray2.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass8 = byteArray3.getClass();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.Serializable serializable13 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray12);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray12, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable13);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) 100);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass12 = serializable11.getClass();
        java.io.Serializable serializable13 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass12);
        byte[] byteArray14 = org.apache.commons.lang3.SerializationUtils.serialize(serializable13);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(serializable13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        java.lang.Class<?> wildcardClass11 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 0.0f);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass7 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray4);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize(serializable7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + '4' + "'", obj6, '4');
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        java.lang.Class<?> wildcardClass14 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass13);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Class<?> wildcardClass10 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (short) 100);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 100]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (short) 100 + "'", obj2, (short) 100);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 100]");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass12 = serializable11.getClass();
        java.io.Serializable serializable13 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass12);
        byte[] byteArray14 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(serializable13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class [B");
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize(serializable10);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass4 = byteArray1.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass8 = byteArray5.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.lang.Class<?> wildcardClass10 = byteArray9.getClass();
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10);
        java.lang.Class<?> wildcardClass12 = byteArray11.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 100.0f + "'", obj5, 100.0f);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + '4' + "'", obj4, '4');
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class [B");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        java.lang.Class<?> wildcardClass4 = serializable3.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.Class");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.Class");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.Class");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Class<?> wildcardClass10 = byteArray9.getClass();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) 1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) 1 + "'", obj2, (byte) 1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass7 = byteArray3.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable9);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass7 = byteArray4.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize(serializable9);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass10 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray7.getClass();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 'a' + "'", obj5, 'a');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass11 = byteArray6.getClass();
        java.lang.Class<?> wildcardClass12 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray12);
        java.lang.Class<?> wildcardClass14 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass5 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize(serializable7);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 'a' + "'", obj5, 'a');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class [B");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 36, -84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray4.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone(serializable4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass7 = byteArray3.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + '4' + "'", obj5, '4');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 102, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass9);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray12);
        byte[] byteArray14 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray12);
        byte[] byteArray15 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray14);
        byte[] byteArray16 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray15);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class [B");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass11 = byteArray6.getClass();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1L);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 82, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 82, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        java.lang.Class<?> wildcardClass14 = byteArray13.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass8 = byteArray4.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 0.0f);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 0.0f + "'", obj3, 0.0f);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.io.Serializable serializable13 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray11);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(serializable13);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Class<?> wildcardClass11 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray4);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize(serializable7);
        java.lang.Class<?> wildcardClass9 = serializable7.getClass();
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + '4' + "'", obj6, '4');
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray4);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(serializable6);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Class<?> wildcardClass7 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass3);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class [B");
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass9 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass9);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray12);
        java.lang.Class<?> wildcardClass14 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray6.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.lang.Class<?> wildcardClass10 = byteArray9.getClass();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray13);
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.Serializable serializable12 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray11);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11, outputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable12);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray13);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (short) 100);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 100]");
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3, outputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Class<?> wildcardClass5 = byteArray2.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 100]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 100 + "'", obj3, 100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 81, -84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + '4' + "'", obj7, '4');
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass10 = byteArray5.getClass();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass11 = byteArray6.getClass();
        java.lang.Class<?> wildcardClass12 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass11);
        java.io.Serializable serializable13 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass11);
        java.io.Serializable serializable14 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass11);
        byte[] byteArray15 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(serializable13);
        org.junit.Assert.assertNotNull(serializable14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Class<?> wildcardClass7 = byteArray3.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass12 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Class<?> wildcardClass12 = byteArray11.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        byte[] byteArray15 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass5);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Class<?> wildcardClass11 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(serializable6);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) false);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 111, 111, 108, 101, 97, 110, -51, 32, 114, -128, -43, -100, -6, -18, 2, 0, 1, 90, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 111, 111, 108, 101, 97, 110, -51, 32, 114, -128, -43, -100, -6, -18, 2, 0, 1, 90, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + false + "'", obj3, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 47, -84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 111, 111, 108, 101, 97, 110, -51, 32, 114, -128, -43, -100, -6, -18, 2, 0, 1, 90, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0]");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        java.lang.Class<?> wildcardClass4 = serializable3.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 36, -84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Class<?> wildcardClass14 = byteArray9.getClass();
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + '4' + "'", obj4, '4');
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray11);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray13);
        java.lang.Class<?> wildcardClass15 = byteArray13.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 100.0f + "'", obj7, 100.0f);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class java.lang.Class");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class java.lang.Class");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class java.lang.Class");
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray6.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass12 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.lang.Class<?> wildcardClass13 = byteArray11.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 100.0f + "'", obj3, 100.0f);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.Float");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.Float");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.Float");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.Float");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.Float");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.Float");
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 10.0d);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 10.0d);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class [B");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize(serializable6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + '4' + "'", obj5, '4');
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass8 = byteArray4.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass5 = byteArray1.getClass();
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(serializable7);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        java.lang.Class<?> wildcardClass7 = byteArray1.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (byte) -1 + "'", obj4, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Class<?> wildcardClass12 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray13, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + '4' + "'", obj5, '4');
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 48, -84, -19, 0, 5, 118, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112]");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone(serializable9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(serializable10);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray7);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Class<?> wildcardClass12 = byteArray11.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0d);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1, outputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 64, 89, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0d + "'", obj2, 100.0d);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class [B");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class [B");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class [B");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 0.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 0.0f + "'", obj2, 0.0f);
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 0.0f + "'", obj3, 0.0f);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 0.0f + "'", obj4, 0.0f);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 0.0f + "'", obj5, 0.0f);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Class<?> wildcardClass8 = byteArray2.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize(serializable4);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.lang.Class<?> wildcardClass5 = byteArray2.getClass();
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (-1.0d));
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -65, -16, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (-1.0d) + "'", obj2, (-1.0d));
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + (-1.0d) + "'", obj3, (-1.0d));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) 100);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) 100);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 102, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -127, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 102, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray4.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Class<?> wildcardClass12 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Class<?> wildcardClass8 = byteArray4.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = byteArray4.getClass();
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 74, -84, -19, 0, 5, 118, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 101, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 74, -84, -19, 0, 5, 118, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 81, -84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.lang.Class<?> wildcardClass13 = byteArray11.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass7 = serializable6.getClass();
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone(serializable6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 100.0f + "'", obj5, 100.0f);
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(serializable8);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass7 = byteArray3.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass10);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize(serializable11);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable11, outputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Class<?> wildcardClass10 = byteArray9.getClass();
        java.lang.Class<?> wildcardClass11 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass10);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1L);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 1L + "'", obj3, 1L);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone(serializable7);
        java.lang.Class<?> wildcardClass9 = serializable8.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Class<?> wildcardClass11 = byteArray8.getClass();
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Class<?> wildcardClass13 = byteArray8.getClass();
        java.lang.Class<?> wildcardClass14 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass13);
        byte[] byteArray15 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass13);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray7.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 100.0f + "'", obj5, 100.0f);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 100.0f + "'", obj6, 100.0f);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray1.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize(serializable7);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass10);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize(serializable11);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + '4' + "'", obj5, '4');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) 100);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) 100);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (byte) 100 + "'", obj4, (byte) 100);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass8 = serializable7.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.lang.Class<?> wildcardClass5 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass5);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Object obj15 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        byte[] byteArray16 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        byte[] byteArray17 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray16);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize(serializable8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 'a' + "'", obj5, 'a');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass3 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray11);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray13);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray13, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Class<?> wildcardClass6 = byteArray3.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1.0f);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1.0f);
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2, outputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 63, -128, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 63, -128, 0, 0]");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass8 = byteArray7.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass12 = serializable11.getClass();
        java.lang.Class<?> wildcardClass13 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass12);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass13, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(serializable11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass9 = byteArray1.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 100.0f + "'", obj5, 100.0f);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 100.0f + "'", obj6, 100.0f);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass7 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class java.lang.Object");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 37, -84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class java.lang.Object");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class java.lang.Object");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class java.lang.Object");
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 10.0d);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 10.0d);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 64, 36, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable11);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        java.lang.Class<?> wildcardClass4 = serializable3.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass4);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize(serializable7);
        java.lang.Class<?> wildcardClass9 = serializable7.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        java.lang.Class<?> wildcardClass4 = serializable3.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize(serializable10);
        java.lang.Class<?> wildcardClass12 = serializable10.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone(serializable7);
        java.lang.Class<?> wildcardClass9 = serializable7.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Class<?> wildcardClass15 = byteArray10.getClass();
        byte[] byteArray16 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass15);
        byte[] byteArray17 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass15);
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass15, outputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass4 = byteArray1.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass9 = byteArray5.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + '4' + "'", obj5, '4');
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.lang.Class<?> wildcardClass5 = byteArray2.getClass();
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray7.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass4 = byteArray1.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass8 = byteArray5.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Class<?> wildcardClass10 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass5 = byteArray1.getClass();
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.lang.Class<?> wildcardClass11 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Class<?> wildcardClass10 = byteArray6.getClass();
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(serializable11);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        byte[] byteArray15 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass14);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray15, outputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1L);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 82, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 109, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 82, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize(serializable4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        java.io.Serializable serializable12 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(serializable12);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray11);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray12);
        byte[] byteArray14 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray12);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass10);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(serializable11);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        java.lang.Class<?> wildcardClass4 = serializable3.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = serializable7.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass11 = byteArray6.getClass();
        java.lang.Class<?> wildcardClass12 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass11);
        java.io.Serializable serializable13 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass11);
        java.io.Serializable serializable14 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass11);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable14, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(serializable13);
        org.junit.Assert.assertNotNull(serializable14);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Class<?> wildcardClass10 = byteArray8.getClass();
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(serializable11);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray5);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass7 = byteArray3.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        byte[] byteArray14 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        java.lang.Class<?> wildcardClass15 = byteArray10.getClass();
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class [B");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass7 = byteArray3.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.lang.Class<?> wildcardClass11 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        java.io.Serializable serializable11 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(serializable11);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray12);
        java.io.Serializable serializable14 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray12);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(serializable14);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable6 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray7.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass9 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 81, -84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray7.getClass();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.io.Serializable serializable0 = null;
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize(serializable0);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass3 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.io.OutputStream outputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2, outputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 112]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass4 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass7 = byteArray3.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass7);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (short) 0);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 104, 111, 114, 116, 104, 77, 55, 19, 52, 96, -38, 82, 2, 0, 1, 83, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0]");
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Class<?> wildcardClass12 = byteArray11.getClass();
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass12);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray13, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(serializable8);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + '4' + "'", obj4, '4');
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray11);
        java.lang.Object obj14 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray7.getClass();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        java.lang.Class<?> wildcardClass11 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class [B");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        java.lang.Class<?> wildcardClass4 = serializable3.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray6.getClass();
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 36, -84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 63, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 36, -84, -19, 0, 5, 118, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 108, 97, 115, 115, 44, 126, 85, 3, -39, -65, -107, 83, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray7.getClass();
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.lang.Class<?> wildcardClass13 = byteArray11.getClass();
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass13, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass11, outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1L);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass3 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone(serializable7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize(serializable8);
        java.lang.Class<?> wildcardClass10 = serializable8.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        java.io.Serializable serializable5 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(serializable5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray11);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray4);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize(serializable7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + '4' + "'", obj6, '4');
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        java.io.Serializable serializable14 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray12);
        byte[] byteArray15 = org.apache.commons.lang3.SerializationUtils.serialize(serializable14);
        byte[] byteArray16 = org.apache.commons.lang3.SerializationUtils.serialize(serializable14);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(serializable14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray6.getClass();
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray12);
        java.lang.Class<?> wildcardClass14 = byteArray13.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass12 = byteArray11.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        java.lang.Class<?> wildcardClass5 = byteArray2.getClass();
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.io.Serializable serializable0 = null;
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize(serializable0);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass3 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4, outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 112]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Object obj13 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 104, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray5);
        java.lang.Class<?> wildcardClass8 = serializable7.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray7);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray7.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.lang.Class<?> wildcardClass10 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.lang.Class<?> wildcardClass11 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.lang.Class<?> wildcardClass12 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1L);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray3.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 76, 111, 110, 103, 59, -117, -28, -112, -52, -113, 35, -33, 2, 0, 1, 74, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) -1);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) -1 + "'", obj2, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, -1]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + (byte) -1 + "'", obj6, (byte) -1);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass12 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.lang.Class<?> wildcardClass9 = obj8.getClass();
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(serializable10);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray5);
        java.lang.Class<?> wildcardClass8 = byteArray5.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + 100.0f + "'", obj5, 100.0f);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable10 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray12);
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray13, outputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 118, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5, outputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) 100);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.clone(byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + (byte) 100 + "'", obj2, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + (byte) 100 + "'", obj4, (byte) 100);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Class<?> wildcardClass10 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class [B");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray9);
        java.lang.Class<?> wildcardClass14 = byteArray13.getClass();
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray13, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class [B");
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1.0d);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1.0d);
        java.io.OutputStream outputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2, outputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 63, -16, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 68, 111, 117, 98, 108, 101, -128, -77, -62, 74, 41, 107, -5, 4, 2, 0, 1, 68, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 63, -16, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        java.lang.Class<?> wildcardClass8 = serializable7.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 'a' + "'", obj2, 'a');
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.lang.Class<?> wildcardClass11 = byteArray8.getClass();
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.lang.Class<?> wildcardClass13 = byteArray8.getClass();
        java.lang.Class<?> wildcardClass14 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass13);
        java.io.OutputStream outputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass13, outputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -96, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(serializable8);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) 100);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) (byte) 100);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray3.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 75, -84, -19, 0, 5, 115, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 66, 121, 116, 101, -100, 78, 96, -124, -18, 80, -11, 28, 2, 0, 1, 66, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 100]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.Serializable serializable13 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray12);
        byte[] byteArray14 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray12);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass4 = byteArray1.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray5);
        java.lang.Class<?> wildcardClass9 = serializable8.getClass();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable8, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "class [B");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray6.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.lang.Object obj10 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray9);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 91, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "class [B");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "class [B");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "class [B");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "class [B");
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass4 = byteArray1.getClass();
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize(serializable9, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 23, -84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable9);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray3);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.io.Serializable serializable0 = null;
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize(serializable0);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 112]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass12 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Class<?> wildcardClass8 = byteArray4.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.lang.Class<?> wildcardClass10 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray2);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj5);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass3);
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 'a');
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        java.lang.Class<?> wildcardClass3 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 97]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        java.lang.Object obj12 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        byte[] byteArray13 = org.apache.commons.lang3.SerializationUtils.clone(byteArray11);
        java.io.Serializable serializable14 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray11);
        java.lang.Object obj15 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray11);
        java.lang.Class<?> wildcardClass16 = obj15.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(serializable14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass4);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass4, outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 118, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 79, 98, 106, 101, 99, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "class java.lang.Object");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "class java.lang.Object");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.clone(byteArray5);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray7);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize(serializable9);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray5);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray10, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 100.0f + "'", obj4, 100.0f);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, -123, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 106, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray4.getClass();
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass6, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 1);
        java.lang.Class<?> wildcardClass2 = byteArray1.getClass();
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable7);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass1);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.clone(byteArray4);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8);
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass8, outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass2);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass5);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.io.Serializable serializable9 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray6);
        java.lang.Object obj11 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray10);
        byte[] byteArray12 = org.apache.commons.lang3.SerializationUtils.clone(byteArray10);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(serializable9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray4);
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray4);
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize(serializable7);
        java.lang.Object obj9 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray8, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + '4' + "'", obj6, '4');
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 77, -84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        java.io.Serializable serializable7 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray5);
        java.lang.Class<?> wildcardClass8 = byteArray5.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9);
        java.io.OutputStream outputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass9, outputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        byte[] byteArray2 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) '4');
        java.lang.Object obj3 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray2);
        byte[] byteArray4 = org.apache.commons.lang3.SerializationUtils.clone(byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray4);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        byte[] byteArray8 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass7);
        byte[] byteArray9 = org.apache.commons.lang3.SerializationUtils.clone(byteArray8);
        byte[] byteArray10 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        byte[] byteArray11 = org.apache.commons.lang3.SerializationUtils.clone(byteArray9);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + '4' + "'", obj3, '4');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 50, -84, -19, 0, 5, 115, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 67, 104, 97, 114, 97, 99, 116, 101, 114, 52, -117, 71, -39, 107, 26, 38, 120, 2, 0, 1, 67, 0, 5, 118, 97, 108, 117, 101, 120, 112, 0, 52]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-84, -19, 0, 5, 118, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112]");
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        byte[] byteArray1 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) 100.0f);
        java.lang.Object obj2 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray1);
        java.io.Serializable serializable3 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        java.io.Serializable serializable4 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray1);
        java.lang.Object obj7 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray6);
        java.io.Serializable serializable8 = org.apache.commons.lang3.SerializationUtils.clone((java.io.Serializable) byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + 100.0f + "'", obj2, 100.0f);
        org.junit.Assert.assertNotNull(serializable3);
        org.junit.Assert.assertNotNull(serializable4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 79, -84, -19, 0, 5, 115, 114, 0, 15, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 70, 108, 111, 97, 116, -38, -19, -55, -94, -37, 60, -16, -20, 2, 0, 1, 70, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 66, -56, 0, 0]");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        byte[] byteArray5 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        byte[] byteArray7 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3);
        java.lang.Object obj8 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -19, 0, 5, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 64, -84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "class org.apache.commons.lang3.SerializationUtils");
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.apache.commons.lang3.SerializationUtils serializationUtils0 = new org.apache.commons.lang3.SerializationUtils();
        java.lang.Class<?> wildcardClass1 = serializationUtils0.getClass();
        java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.SerializationUtils.clone(wildcardClass1);
        byte[] byteArray3 = org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) wildcardClass2);
        java.lang.Object obj4 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj5 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Object obj6 = org.apache.commons.lang3.SerializationUtils.deserialize(byteArray3);
        java.lang.Class<?> wildcardClass7 = byteArray3.getClass();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.SerializationUtils.serialize((java.io.Serializable) byteArray3, outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The OutputStream must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-84, -19, 0, 5, 118, 114, 0, 43, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 112]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "class org.apache.commons.lang3.SerializationUtils");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }
}


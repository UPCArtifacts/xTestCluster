import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        double double9 = simpleRegression0.predict(0.0d);
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        double double18 = simpleRegression12.getSlopeStdErr();
        double double19 = simpleRegression12.getSlope();
        double double21 = simpleRegression12.predict(0.9999999999999998d);
        double double22 = simpleRegression12.getIntercept();
        simpleRegression12.addData((-0.9974010885284709d), (double) '4');
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getRSquare();
        double double29 = simpleRegression26.getRegressionSumSquares();
        double double30 = simpleRegression26.getSlope();
        simpleRegression26.addData((double) (byte) 10, (double) (-1.0f));
        simpleRegression26.addData((double) 0L, (double) 'a');
        double double37 = simpleRegression26.getSlopeStdErr();
        simpleRegression26.clear();
        double double39 = simpleRegression26.getTotalSumSquares();
        double double41 = simpleRegression26.predict((double) (-1));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double43 = simpleRegression42.getTotalSumSquares();
        simpleRegression42.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getMeanSquareError();
        double double51 = simpleRegression45.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression52 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long53 = simpleRegression52.getN();
        double double54 = simpleRegression52.getSumSquaredErrors();
        double double55 = simpleRegression52.getRegressionSumSquares();
        simpleRegression52.addData(0.0d, (-1.0d));
        double double59 = simpleRegression52.getR();
        double double61 = simpleRegression52.predict(10.0d);
        double double63 = simpleRegression52.predict(100.0d);
        double double65 = simpleRegression52.predict((double) (short) 0);
        long long66 = simpleRegression52.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression67 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long68 = simpleRegression67.getN();
        double double69 = simpleRegression67.getSumSquaredErrors();
        double double71 = simpleRegression67.predict((double) 10L);
        double double72 = simpleRegression67.getIntercept();
        double double73 = simpleRegression67.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression74 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long75 = simpleRegression74.getN();
        double double76 = simpleRegression74.getSumSquaredErrors();
        long long77 = simpleRegression74.getN();
        long long78 = simpleRegression74.getN();
        double[][] doubleArray79 = new double[][] {};
        simpleRegression74.addData(doubleArray79);
        simpleRegression67.addData(doubleArray79);
        simpleRegression52.addData(doubleArray79);
        simpleRegression45.addData(doubleArray79);
        simpleRegression42.addData(doubleArray79);
        simpleRegression26.addData(doubleArray79);
        simpleRegression12.addData(doubleArray79);
        simpleRegression0.addData(doubleArray79);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(doubleArray79);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getR();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getIntercept();
        double double9 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlope();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        double double58 = simpleRegression0.getIntercept();
        double double59 = simpleRegression0.getR();
        double double60 = simpleRegression0.getR();
        double double61 = simpleRegression0.getTotalSumSquares();
        double double62 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.9999999999999838d) + "'", double58 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.9999999999999999d + "'", double59 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.9999999999999999d + "'", double60 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 8743.714285714286d + "'", double61 == 8743.714285714286d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 8743.714285714286d + "'", double62 == 8743.714285714286d);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        double double30 = simpleRegression0.getSlope();
        java.lang.Class<?> wildcardClass31 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-3.0d) + "'", double30 == (-3.0d));
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getR();
        double double6 = simpleRegression0.getMeanSquareError();
        double double7 = simpleRegression0.getMeanSquareError();
        java.lang.Class<?> wildcardClass8 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getMeanSquareError();
        double double7 = simpleRegression0.getIntercept();
        double double8 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.predict((double) (byte) 1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getSlopeStdErr();
        java.lang.Class<?> wildcardClass13 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.addData((double) 10.0f, (double) (short) 10);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        long long18 = simpleRegression15.getN();
        long long19 = simpleRegression15.getN();
        double[][] doubleArray20 = new double[][] {};
        simpleRegression15.addData(doubleArray20);
        simpleRegression0.addData(doubleArray20);
        double double23 = simpleRegression0.getR();
        double double24 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double10 = simpleRegression9.getSumSquaredErrors();
        double double11 = simpleRegression9.getSumSquaredErrors();
        simpleRegression9.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getSumSquaredErrors();
        double double17 = simpleRegression13.predict((double) 10L);
        double double18 = simpleRegression13.getIntercept();
        simpleRegression13.addData((double) (byte) 100, (double) 100.0f);
        double double23 = simpleRegression13.predict((double) 100L);
        double double24 = simpleRegression13.getMeanSquareError();
        long long25 = simpleRegression13.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getRSquare();
        double double29 = simpleRegression26.getTotalSumSquares();
        double[] doubleArray34 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray39 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray40 = new double[][] { doubleArray34, doubleArray39 };
        simpleRegression26.addData(doubleArray40);
        simpleRegression13.addData(doubleArray40);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression43 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long44 = simpleRegression43.getN();
        double double45 = simpleRegression43.getSumSquaredErrors();
        long long46 = simpleRegression43.getN();
        long long47 = simpleRegression43.getN();
        double[][] doubleArray48 = new double[][] {};
        simpleRegression43.addData(doubleArray48);
        simpleRegression13.addData(doubleArray48);
        simpleRegression9.addData(doubleArray48);
        simpleRegression0.addData(doubleArray48);
        double double53 = simpleRegression0.getSumSquaredErrors();
        double double54 = simpleRegression0.getTotalSumSquares();
        java.lang.Class<?> wildcardClass55 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getR();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double4 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double3 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getMeanSquareError();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression6 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double7 = simpleRegression6.getR();
        double double8 = simpleRegression6.getRegressionSumSquares();
        double double9 = simpleRegression6.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double14 = simpleRegression10.predict((double) 10L);
        double double15 = simpleRegression10.getIntercept();
        double double16 = simpleRegression10.getRegressionSumSquares();
        long long17 = simpleRegression10.getN();
        double double18 = simpleRegression10.getRSquare();
        double double19 = simpleRegression10.getRSquare();
        double double20 = simpleRegression10.getInterceptStdErr();
        double double21 = simpleRegression10.getTotalSumSquares();
        simpleRegression10.addData((double) 10.0f, (double) (short) 10);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long26 = simpleRegression25.getN();
        double double27 = simpleRegression25.getSumSquaredErrors();
        long long28 = simpleRegression25.getN();
        long long29 = simpleRegression25.getN();
        double[][] doubleArray30 = new double[][] {};
        simpleRegression25.addData(doubleArray30);
        simpleRegression10.addData(doubleArray30);
        simpleRegression6.addData(doubleArray30);
        simpleRegression0.addData(doubleArray30);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression35 = new org.apache.commons.math.stat.regression.SimpleRegression();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression36 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long37 = simpleRegression36.getN();
        double double38 = simpleRegression36.getRSquare();
        double double39 = simpleRegression36.getTotalSumSquares();
        double[] doubleArray44 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray49 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray50 = new double[][] { doubleArray44, doubleArray49 };
        simpleRegression36.addData(doubleArray50);
        simpleRegression35.addData(doubleArray50);
        simpleRegression0.addData(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getTotalSumSquares();
        long long13 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.5d + "'", double12 == 0.5d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getR();
        double double7 = simpleRegression0.getIntercept();
        double double8 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        double double42 = simpleRegression0.getInterceptStdErr();
        double double43 = simpleRegression0.getSignificance();
        double double44 = simpleRegression0.getInterceptStdErr();
        double double46 = simpleRegression0.predict((double) (short) -1);
        double double47 = simpleRegression0.getSumSquaredErrors();
        double double48 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 6.031565971695669E-7d + "'", double42 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 6.031565971695669E-7d + "'", double44 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-2.009999999999984d) + "'", double46 == (-2.009999999999984d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.8189894035458565E-12d + "'", double47 == 1.8189894035458565E-12d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 6.031565971695669E-7d + "'", double48 == 6.031565971695669E-7d);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.predict((double) 7L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.16666666666666652d + "'", double15 == 0.16666666666666652d);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        double double2 = simpleRegression0.getRegressionSumSquares();
        double double3 = simpleRegression0.getIntercept();
        double double4 = simpleRegression0.getR();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        double double11 = simpleRegression0.predict((-0.9974010885284709d));
        double double12 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getTotalSumSquares();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSlopeStdErr();
        long long10 = simpleRegression0.getN();
        double double12 = simpleRegression0.predict(0.0d);
        double double13 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.predict(7356.75d);
        long long16 = simpleRegression0.getN();
        simpleRegression0.addData(2.0300000000000153d, (-0.4531891518946872d));
        double double20 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getSlope();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.getSlope();
        long long14 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData(1.0d, (double) (short) 10);
        double double8 = simpleRegression0.getSlopeStdErr();
        double double9 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getSlope();
        long long6 = simpleRegression0.getN();
        double double7 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSlopeConfidenceInterval((-9.8d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getRSquare();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.predict((double) (byte) 1);
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        double double44 = simpleRegression0.getSlopeStdErr();
        double double45 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 6.514835844650013E-9d + "'", double44 == 6.514835844650013E-9d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.8189894035458565E-12d + "'", double45 == 1.8189894035458565E-12d);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSumSquaredErrors();
        double double5 = simpleRegression0.getInterceptStdErr();
        double double6 = simpleRegression0.getTotalSumSquares();
        double double7 = simpleRegression0.getTotalSumSquares();
        long long8 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double[] doubleArray8 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray13 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray14 = new double[][] { doubleArray8, doubleArray13 };
        simpleRegression0.addData(doubleArray14);
        double double16 = simpleRegression0.getSlopeStdErr();
        double double17 = simpleRegression0.getSumSquaredErrors();
        double double18 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSumSquaredErrors();
        double double13 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSlopeConfidenceInterval(6527.7024165291805d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression4 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long5 = simpleRegression4.getN();
        double double6 = simpleRegression4.getSumSquaredErrors();
        double double8 = simpleRegression4.predict((double) 10L);
        double double9 = simpleRegression4.getIntercept();
        simpleRegression4.addData((double) (byte) 100, (double) 100.0f);
        double double14 = simpleRegression4.predict((double) 100L);
        double double15 = simpleRegression4.getMeanSquareError();
        long long16 = simpleRegression4.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getRSquare();
        double double20 = simpleRegression17.getTotalSumSquares();
        double[] doubleArray25 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray30 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray31 = new double[][] { doubleArray25, doubleArray30 };
        simpleRegression17.addData(doubleArray31);
        simpleRegression4.addData(doubleArray31);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        long long37 = simpleRegression34.getN();
        long long38 = simpleRegression34.getN();
        double[][] doubleArray39 = new double[][] {};
        simpleRegression34.addData(doubleArray39);
        simpleRegression4.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        double double43 = simpleRegression0.getMeanSquareError();
        double double44 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double42 = simpleRegression0.getMeanSquareError();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression43 = new org.apache.commons.math.stat.regression.SimpleRegression();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression44 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long45 = simpleRegression44.getN();
        double double46 = simpleRegression44.getRSquare();
        double double47 = simpleRegression44.getTotalSumSquares();
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray57 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray58 = new double[][] { doubleArray52, doubleArray57 };
        simpleRegression44.addData(doubleArray58);
        simpleRegression43.addData(doubleArray58);
        simpleRegression0.addData(doubleArray58);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 3.637978807091713E-13d + "'", double42 == 3.637978807091713E-13d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        simpleRegression0.clear();
        double double8 = simpleRegression0.getTotalSumSquares();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getInterceptStdErr();
        java.lang.Class<?> wildcardClass12 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        double double58 = simpleRegression0.getIntercept();
        double double59 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.9999999999999838d) + "'", double58 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 6.031565971695669E-7d + "'", double59 == 6.031565971695669E-7d);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression40 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long41 = simpleRegression40.getN();
        double double42 = simpleRegression40.getSumSquaredErrors();
        double double44 = simpleRegression40.predict((double) 10L);
        double double45 = simpleRegression40.getIntercept();
        double double46 = simpleRegression40.getRegressionSumSquares();
        long long47 = simpleRegression40.getN();
        double double48 = simpleRegression40.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        simpleRegression49.addData((double) (byte) 100, (double) 100.0f);
        double double59 = simpleRegression49.predict((double) 100L);
        double double60 = simpleRegression49.getR();
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[] doubleArray66 = new double[] { 100L, 100.0d };
        double[] doubleArray69 = new double[] { 100L, 100.0d };
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[][] doubleArray79 = new double[][] { doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        simpleRegression49.addData(doubleArray79);
        simpleRegression40.addData(doubleArray79);
        simpleRegression0.addData(doubleArray79);
        double double83 = simpleRegression0.getRegressionSumSquares();
        double double84 = simpleRegression0.getInterceptStdErr();
        long long85 = simpleRegression0.getN();
        double double86 = simpleRegression0.getSumSquaredErrors();
        double double87 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 9416.307692307693d + "'", double83 == 9416.307692307693d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4.066480948555191E-7d + "'", double84 == 4.066480948555191E-7d);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 13L + "'", long85 == 13L);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.8189894035458565E-12d + "'", double86 == 1.8189894035458565E-12d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.9999999999999998d + "'", double87 == 0.9999999999999998d);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        simpleRegression0.addData((double) (byte) 1, 1.8189894035458565E-12d);
        double double10 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData((double) ' ', (-0.9999999999996163d));
        double double14 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(6527.7024165291805d, (-10.53030303030303d));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getTotalSumSquares();
        double double14 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getR();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData((double) 10.0f, 237.8600243518896d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        double double42 = simpleRegression0.getRSquare();
        double double43 = simpleRegression0.getSignificance();
        double double45 = simpleRegression0.predict((double) (-1));
        double double46 = simpleRegression0.getSignificance();
        double double47 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9999999999999998d + "'", double42 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-2.009999999999984d) + "'", double45 == (-2.009999999999984d));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0099999999999998d + "'", double47 == 1.0099999999999998d);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        long long4 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSlopeConfidenceInterval((-0.9974010885284709d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        long long12 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.predict((double) 0);
        double double14 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = simpleRegression0.getSlopeConfidenceInterval((double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getMeanSquareError();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        double double9 = simpleRegression0.getSumSquaredErrors();
        double double10 = simpleRegression0.getIntercept();
        long long11 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getSumSquaredErrors();
        double double13 = simpleRegression0.getSlopeStdErr();
        double double14 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSlopeConfidenceInterval(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.getSumSquaredErrors();
        double double14 = simpleRegression0.getRegressionSumSquares();
        java.lang.Class<?> wildcardClass15 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double42 = simpleRegression0.getSlope();
        double double44 = simpleRegression0.getSlopeConfidenceInterval(0.16666666666666666d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0099999999999998d + "'", double42 == 1.0099999999999998d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.053857521608771E-8d + "'", double44 == 1.053857521608771E-8d);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getMeanSquareError();
        double double4 = simpleRegression0.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        simpleRegression0.addData(doubleArray42);
        double double46 = simpleRegression0.getTotalSumSquares();
        double double47 = simpleRegression0.getTotalSumSquares();
        double double48 = simpleRegression0.getSlopeStdErr();
        double double49 = simpleRegression0.getRegressionSumSquares();
        double double50 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getSlope();
        double double16 = simpleRegression0.getTotalSumSquares();
        double double17 = simpleRegression0.getInterceptStdErr();
        double double18 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double19 = simpleRegression15.predict((double) 10L);
        double double20 = simpleRegression15.getIntercept();
        simpleRegression15.addData((double) (byte) 100, (double) 100.0f);
        double double24 = simpleRegression15.getIntercept();
        double double25 = simpleRegression15.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getSumSquaredErrors();
        double double30 = simpleRegression26.predict((double) 10L);
        double double31 = simpleRegression26.getIntercept();
        simpleRegression26.addData((double) (byte) 100, (double) 100.0f);
        double double36 = simpleRegression26.predict((double) 100L);
        double double37 = simpleRegression26.getMeanSquareError();
        long long38 = simpleRegression26.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getRSquare();
        double double42 = simpleRegression39.getTotalSumSquares();
        double[] doubleArray47 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray53 = new double[][] { doubleArray47, doubleArray52 };
        simpleRegression39.addData(doubleArray53);
        simpleRegression26.addData(doubleArray53);
        simpleRegression15.addData(doubleArray53);
        simpleRegression0.addData(doubleArray53);
        double double58 = simpleRegression0.getRegressionSumSquares();
        double double59 = simpleRegression0.getRegressionSumSquares();
        double double61 = simpleRegression0.predict((double) 6L);
        double double62 = simpleRegression0.getRegressionSumSquares();
        double double63 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getSumSquaredErrors();
        double double12 = simpleRegression0.getR();
        double double13 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.predict((double) (byte) 1);
        double double13 = simpleRegression0.getRegressionSumSquares();
        double double14 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double12 = simpleRegression0.predict((double) 0.0f);
        double double13 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getMeanSquareError();
        double double4 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.predict((double) 1L);
        long long12 = simpleRegression0.getN();
        double double13 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getSlopeStdErr();
        java.lang.Class<?> wildcardClass12 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRSquare();
        java.lang.Class<?> wildcardClass11 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        double double17 = simpleRegression0.getSumSquaredErrors();
        long long18 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression19 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long20 = simpleRegression19.getN();
        double double21 = simpleRegression19.getRSquare();
        double double22 = simpleRegression19.getTotalSumSquares();
        double[] doubleArray27 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray32 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray33 = new double[][] { doubleArray27, doubleArray32 };
        simpleRegression19.addData(doubleArray33);
        simpleRegression0.addData(doubleArray33);
        double double36 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getSumSquaredErrors();
        double double6 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double15 = simpleRegression11.predict((double) 10L);
        double double16 = simpleRegression11.getIntercept();
        simpleRegression11.addData((double) (byte) 100, (double) 100.0f);
        double double21 = simpleRegression11.predict((double) 100L);
        double double22 = simpleRegression11.getMeanSquareError();
        long long23 = simpleRegression11.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression24 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long25 = simpleRegression24.getN();
        double double26 = simpleRegression24.getSumSquaredErrors();
        double double28 = simpleRegression24.predict((double) 10L);
        double double29 = simpleRegression24.getIntercept();
        simpleRegression24.addData((double) (byte) 100, (double) 100.0f);
        double double34 = simpleRegression24.predict((double) 100L);
        double double35 = simpleRegression24.getMeanSquareError();
        long long36 = simpleRegression24.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression37 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long38 = simpleRegression37.getN();
        double double39 = simpleRegression37.getRSquare();
        double double40 = simpleRegression37.getTotalSumSquares();
        double[] doubleArray45 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray50 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray51 = new double[][] { doubleArray45, doubleArray50 };
        simpleRegression37.addData(doubleArray51);
        simpleRegression24.addData(doubleArray51);
        simpleRegression11.addData(doubleArray51);
        simpleRegression0.addData(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double11 = simpleRegression0.predict((double) (-1));
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(2926.4846611894172d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double[] doubleArray13 = new double[] { 1L, ' ' };
        double[] doubleArray16 = new double[] { 1L, ' ' };
        double[] doubleArray19 = new double[] { 1L, ' ' };
        double[] doubleArray22 = new double[] { 1L, ' ' };
        double[] doubleArray25 = new double[] { 1L, ' ' };
        double[] doubleArray28 = new double[] { 1L, ' ' };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        simpleRegression0.addData(doubleArray29);
        double double32 = simpleRegression0.predict((double) (short) 100);
        long long33 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = simpleRegression0.getSlopeConfidenceInterval((double) 2L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 6L + "'", long33 == 6L);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(Double.NaN, (double) 7L);
        double double9 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, 0.6812154343391408d);
        double double14 = simpleRegression0.predict((-200.0d));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        simpleRegression0.addData((double) 0L, (double) 'a');
        double double11 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        long long13 = simpleRegression0.getN();
        double double14 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getSlopeStdErr();
        long long11 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getIntercept();
        double double3 = simpleRegression0.getInterceptStdErr();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval(1.8189894035458565E-12d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getTotalSumSquares();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double19 = simpleRegression15.predict((double) 10L);
        double double20 = simpleRegression15.getIntercept();
        simpleRegression15.addData((double) (byte) 100, (double) 100.0f);
        double double24 = simpleRegression15.getIntercept();
        double double25 = simpleRegression15.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getSumSquaredErrors();
        double double30 = simpleRegression26.predict((double) 10L);
        double double31 = simpleRegression26.getIntercept();
        simpleRegression26.addData((double) (byte) 100, (double) 100.0f);
        double double36 = simpleRegression26.predict((double) 100L);
        double double37 = simpleRegression26.getMeanSquareError();
        long long38 = simpleRegression26.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getRSquare();
        double double42 = simpleRegression39.getTotalSumSquares();
        double[] doubleArray47 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray53 = new double[][] { doubleArray47, doubleArray52 };
        simpleRegression39.addData(doubleArray53);
        simpleRegression26.addData(doubleArray53);
        simpleRegression15.addData(doubleArray53);
        simpleRegression0.addData(doubleArray53);
        double double58 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double60 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        double double62 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getInterceptStdErr();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        double double2 = simpleRegression0.getRegressionSumSquares();
        double double3 = simpleRegression0.getR();
        long long4 = simpleRegression0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        double double13 = simpleRegression7.getRegressionSumSquares();
        long long14 = simpleRegression7.getN();
        double double15 = simpleRegression7.getR();
        double double16 = simpleRegression7.getSlope();
        double double17 = simpleRegression7.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getMeanSquareError();
        long long30 = simpleRegression18.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression31 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long32 = simpleRegression31.getN();
        double double33 = simpleRegression31.getSumSquaredErrors();
        double double35 = simpleRegression31.predict((double) 10L);
        double double36 = simpleRegression31.getIntercept();
        simpleRegression31.addData((double) (byte) 100, (double) 100.0f);
        double double41 = simpleRegression31.predict((double) 100L);
        double double42 = simpleRegression31.getMeanSquareError();
        long long43 = simpleRegression31.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression44 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long45 = simpleRegression44.getN();
        double double46 = simpleRegression44.getRSquare();
        double double47 = simpleRegression44.getTotalSumSquares();
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray57 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray58 = new double[][] { doubleArray52, doubleArray57 };
        simpleRegression44.addData(doubleArray58);
        simpleRegression31.addData(doubleArray58);
        simpleRegression18.addData(doubleArray58);
        simpleRegression7.addData(doubleArray58);
        simpleRegression0.addData(doubleArray58);
        double double64 = simpleRegression0.getIntercept();
        java.lang.Class<?> wildcardClass65 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression40 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long41 = simpleRegression40.getN();
        double double42 = simpleRegression40.getSumSquaredErrors();
        double double44 = simpleRegression40.predict((double) 10L);
        double double45 = simpleRegression40.getIntercept();
        double double46 = simpleRegression40.getRegressionSumSquares();
        long long47 = simpleRegression40.getN();
        double double48 = simpleRegression40.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        simpleRegression49.addData((double) (byte) 100, (double) 100.0f);
        double double59 = simpleRegression49.predict((double) 100L);
        double double60 = simpleRegression49.getR();
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[] doubleArray66 = new double[] { 100L, 100.0d };
        double[] doubleArray69 = new double[] { 100L, 100.0d };
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[][] doubleArray79 = new double[][] { doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        simpleRegression49.addData(doubleArray79);
        simpleRegression40.addData(doubleArray79);
        simpleRegression0.addData(doubleArray79);
        double double83 = simpleRegression0.getRegressionSumSquares();
        double double84 = simpleRegression0.getTotalSumSquares();
        double double85 = simpleRegression0.getSlopeStdErr();
        double double86 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 9416.307692307693d + "'", double83 == 9416.307692307693d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 9416.307692307693d + "'", double84 == 9416.307692307693d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4.232527564042065E-9d + "'", double85 == 4.232527564042065E-9d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-1.0d) + "'", double86 == (-1.0d));
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getRSquare();
        double double8 = simpleRegression0.getTotalSumSquares();
        double double9 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval((double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.predict((double) (byte) 10);
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.predict((double) (byte) 1);
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.getSlope();
        double double17 = simpleRegression0.getTotalSumSquares();
        double double18 = simpleRegression0.getRegressionSumSquares();
        double double19 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getIntercept();
        long long11 = simpleRegression0.getN();
        double double13 = simpleRegression0.predict(6.031565971695669E-7d);
        double double15 = simpleRegression0.predict(0.5d);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        double double50 = simpleRegression0.getSlopeStdErr();
        double double51 = simpleRegression0.getInterceptStdErr();
        java.lang.Class<?> wildcardClass52 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.addData(0.0d, (double) 10L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        double double9 = simpleRegression0.predict(10.0d);
        double double11 = simpleRegression0.predict(100.0d);
        double double13 = simpleRegression0.predict((double) (short) 0);
        long long14 = simpleRegression0.getN();
        double double15 = simpleRegression0.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getTotalSumSquares();
        double double19 = simpleRegression16.getSlopeStdErr();
        double double21 = simpleRegression16.predict((double) 3L);
        double double22 = simpleRegression16.getRegressionSumSquares();
        double double23 = simpleRegression16.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression24 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long25 = simpleRegression24.getN();
        double double26 = simpleRegression24.getSumSquaredErrors();
        double double28 = simpleRegression24.predict((double) 10L);
        double double29 = simpleRegression24.getMeanSquareError();
        double double30 = simpleRegression24.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression31 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long32 = simpleRegression31.getN();
        double double33 = simpleRegression31.getSumSquaredErrors();
        double double34 = simpleRegression31.getRegressionSumSquares();
        simpleRegression31.addData(0.0d, (-1.0d));
        double double38 = simpleRegression31.getR();
        double double40 = simpleRegression31.predict(10.0d);
        double double42 = simpleRegression31.predict(100.0d);
        double double44 = simpleRegression31.predict((double) (short) 0);
        long long45 = simpleRegression31.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression46 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long47 = simpleRegression46.getN();
        double double48 = simpleRegression46.getSumSquaredErrors();
        double double50 = simpleRegression46.predict((double) 10L);
        double double51 = simpleRegression46.getIntercept();
        double double52 = simpleRegression46.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression53 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long54 = simpleRegression53.getN();
        double double55 = simpleRegression53.getSumSquaredErrors();
        long long56 = simpleRegression53.getN();
        long long57 = simpleRegression53.getN();
        double[][] doubleArray58 = new double[][] {};
        simpleRegression53.addData(doubleArray58);
        simpleRegression46.addData(doubleArray58);
        simpleRegression31.addData(doubleArray58);
        simpleRegression24.addData(doubleArray58);
        simpleRegression16.addData(doubleArray58);
        simpleRegression0.addData(doubleArray58);
        double double65 = simpleRegression0.getSlope();
        double double66 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getIntercept();
        double double8 = simpleRegression0.getInterceptStdErr();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval((-89891.64177489174d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData((double) ' ', 8743.714285714286d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        long long50 = simpleRegression0.getN();
        long long51 = simpleRegression0.getN();
        double double52 = simpleRegression0.getTotalSumSquares();
        double double53 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 6L + "'", long50 == 6L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 6L + "'", long51 == 6L);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double4 = simpleRegression0.predict((double) (byte) 10);
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getR();
        double double8 = simpleRegression0.predict((double) (short) 10);
        double double9 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        double double15 = simpleRegression9.getRegressionSumSquares();
        long long16 = simpleRegression9.getN();
        double double17 = simpleRegression9.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getR();
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        simpleRegression18.addData(doubleArray48);
        simpleRegression9.addData(doubleArray48);
        simpleRegression0.addData(doubleArray48);
        double double52 = simpleRegression0.getRegressionSumSquares();
        double double53 = simpleRegression0.getTotalSumSquares();
        double double54 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double[] doubleArray13 = new double[] { 1L, ' ' };
        double[] doubleArray16 = new double[] { 1L, ' ' };
        double[] doubleArray19 = new double[] { 1L, ' ' };
        double[] doubleArray22 = new double[] { 1L, ' ' };
        double[] doubleArray25 = new double[] { 1L, ' ' };
        double[] doubleArray28 = new double[] { 1L, ' ' };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        simpleRegression0.addData(doubleArray29);
        double double31 = simpleRegression0.getSlope();
        double double32 = simpleRegression0.getRegressionSumSquares();
        double double33 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.predict((double) (-1.0f));
        long long12 = simpleRegression0.getN();
        simpleRegression0.addData((double) 100, (double) (short) 100);
        double double16 = simpleRegression0.getSlope();
        double double17 = simpleRegression0.getRegressionSumSquares();
        double double18 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression3 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long4 = simpleRegression3.getN();
        double double5 = simpleRegression3.getSumSquaredErrors();
        double double7 = simpleRegression3.predict((double) 10L);
        double double8 = simpleRegression3.getMeanSquareError();
        double double9 = simpleRegression3.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double13 = simpleRegression10.getRegressionSumSquares();
        simpleRegression10.addData(0.0d, (-1.0d));
        double double17 = simpleRegression10.getR();
        double double19 = simpleRegression10.predict(10.0d);
        double double21 = simpleRegression10.predict(100.0d);
        double double23 = simpleRegression10.predict((double) (short) 0);
        long long24 = simpleRegression10.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long26 = simpleRegression25.getN();
        double double27 = simpleRegression25.getSumSquaredErrors();
        double double29 = simpleRegression25.predict((double) 10L);
        double double30 = simpleRegression25.getIntercept();
        double double31 = simpleRegression25.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression32 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long33 = simpleRegression32.getN();
        double double34 = simpleRegression32.getSumSquaredErrors();
        long long35 = simpleRegression32.getN();
        long long36 = simpleRegression32.getN();
        double[][] doubleArray37 = new double[][] {};
        simpleRegression32.addData(doubleArray37);
        simpleRegression25.addData(doubleArray37);
        simpleRegression10.addData(doubleArray37);
        simpleRegression3.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double43 = simpleRegression0.getRegressionSumSquares();
        double double44 = simpleRegression0.getR();
        double double45 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getR();
        simpleRegression0.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        simpleRegression9.clear();
        double double15 = simpleRegression9.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        long long19 = simpleRegression16.getN();
        double double20 = simpleRegression16.getRSquare();
        double[] doubleArray25 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray30 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray35 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[][] doubleArray36 = new double[][] { doubleArray25, doubleArray30, doubleArray35 };
        simpleRegression16.addData(doubleArray36);
        simpleRegression9.addData(doubleArray36);
        simpleRegression0.addData(doubleArray36);
        double double40 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(8571.428571428572d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        double double12 = simpleRegression0.predict((double) 13L);
        double double13 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        double double9 = simpleRegression0.predict(10.0d);
        double double11 = simpleRegression0.predict(100.0d);
        double double12 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        double double50 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression51 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long52 = simpleRegression51.getN();
        double double53 = simpleRegression51.getSumSquaredErrors();
        double double55 = simpleRegression51.predict((double) 10L);
        double double56 = simpleRegression51.getIntercept();
        simpleRegression51.addData((double) (byte) 100, (double) 100.0f);
        double double61 = simpleRegression51.predict((double) 100L);
        double double62 = simpleRegression51.getMeanSquareError();
        long long63 = simpleRegression51.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression64 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long65 = simpleRegression64.getN();
        double double66 = simpleRegression64.getSumSquaredErrors();
        double double68 = simpleRegression64.predict((double) 10L);
        double double69 = simpleRegression64.getIntercept();
        simpleRegression64.addData((double) (byte) 100, (double) 100.0f);
        double double74 = simpleRegression64.predict((double) 100L);
        double double75 = simpleRegression64.getMeanSquareError();
        long long76 = simpleRegression64.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression77 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long78 = simpleRegression77.getN();
        double double79 = simpleRegression77.getRSquare();
        double double80 = simpleRegression77.getTotalSumSquares();
        double[] doubleArray85 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray90 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray91 = new double[][] { doubleArray85, doubleArray90 };
        simpleRegression77.addData(doubleArray91);
        simpleRegression64.addData(doubleArray91);
        simpleRegression51.addData(doubleArray91);
        simpleRegression0.addData(doubleArray91);
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        double double42 = simpleRegression0.getTotalSumSquares();
        double double43 = simpleRegression0.getTotalSumSquares();
        double double44 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double19 = simpleRegression15.predict((double) 10L);
        double double20 = simpleRegression15.getIntercept();
        simpleRegression15.addData((double) (byte) 100, (double) 100.0f);
        double double24 = simpleRegression15.getIntercept();
        double double25 = simpleRegression15.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getSumSquaredErrors();
        double double30 = simpleRegression26.predict((double) 10L);
        double double31 = simpleRegression26.getIntercept();
        simpleRegression26.addData((double) (byte) 100, (double) 100.0f);
        double double36 = simpleRegression26.predict((double) 100L);
        double double37 = simpleRegression26.getMeanSquareError();
        long long38 = simpleRegression26.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getRSquare();
        double double42 = simpleRegression39.getTotalSumSquares();
        double[] doubleArray47 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray53 = new double[][] { doubleArray47, doubleArray52 };
        simpleRegression39.addData(doubleArray53);
        simpleRegression26.addData(doubleArray53);
        simpleRegression15.addData(doubleArray53);
        simpleRegression0.addData(doubleArray53);
        double double58 = simpleRegression0.getRegressionSumSquares();
        double double59 = simpleRegression0.getRegressionSumSquares();
        double double60 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double62 = simpleRegression0.getSlopeConfidenceInterval((-0.2584033087426901d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData(1.6746918727301837E-8d, 6.031565971695669E-7d);
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval((-0.9999999999999838d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        double double58 = simpleRegression0.getIntercept();
        double double59 = simpleRegression0.getR();
        double double60 = simpleRegression0.getR();
        double double61 = simpleRegression0.getTotalSumSquares();
        double double62 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.9999999999999838d) + "'", double58 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.9999999999999999d + "'", double59 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.9999999999999999d + "'", double60 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 8743.714285714286d + "'", double61 == 8743.714285714286d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getRegressionSumSquares();
        double double13 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.getR();
        simpleRegression0.clear();
        simpleRegression0.addData(0.0d, 0.0d);
        java.lang.Class<?> wildcardClass19 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        long long5 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getIntercept();
        double double8 = simpleRegression0.getInterceptStdErr();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double12 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval(7318.560606060606d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double[] doubleArray13 = new double[] { 1L, ' ' };
        double[] doubleArray16 = new double[] { 1L, ' ' };
        double[] doubleArray19 = new double[] { 1L, ' ' };
        double[] doubleArray22 = new double[] { 1L, ' ' };
        double[] doubleArray25 = new double[] { 1L, ' ' };
        double[] doubleArray28 = new double[] { 1L, ' ' };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        simpleRegression0.addData(doubleArray29);
        double double32 = simpleRegression0.predict((double) (short) 100);
        double double33 = simpleRegression0.getSlope();
        double double34 = simpleRegression0.getIntercept();
        double double35 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        double double9 = simpleRegression0.predict(0.0d);
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getR();
        simpleRegression0.addData((double) 100.0f, 964.4545454545455d);
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSlopeConfidenceInterval(7356.75d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 466051.23966942145d + "'", double15 == 466051.23966942145d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9999999999999999d + "'", double16 == 0.9999999999999999d);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getR();
        double double14 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        double double50 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression51 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long52 = simpleRegression51.getN();
        double double53 = simpleRegression51.getSumSquaredErrors();
        double double55 = simpleRegression51.predict((double) 10L);
        double double56 = simpleRegression51.getIntercept();
        simpleRegression51.addData((double) (byte) 100, (double) 100.0f);
        double double61 = simpleRegression51.predict((double) 100L);
        double double62 = simpleRegression51.getMeanSquareError();
        long long63 = simpleRegression51.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression64 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long65 = simpleRegression64.getN();
        double double66 = simpleRegression64.getSumSquaredErrors();
        double double68 = simpleRegression64.predict((double) 10L);
        double double69 = simpleRegression64.getIntercept();
        simpleRegression64.addData((double) (byte) 100, (double) 100.0f);
        double double74 = simpleRegression64.predict((double) 100L);
        double double75 = simpleRegression64.getMeanSquareError();
        long long76 = simpleRegression64.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression77 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long78 = simpleRegression77.getN();
        double double79 = simpleRegression77.getRSquare();
        double double80 = simpleRegression77.getTotalSumSquares();
        double[] doubleArray85 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray90 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray91 = new double[][] { doubleArray85, doubleArray90 };
        simpleRegression77.addData(doubleArray91);
        simpleRegression64.addData(doubleArray91);
        simpleRegression51.addData(doubleArray91);
        simpleRegression0.addData(doubleArray91);
        double double96 = simpleRegression0.getIntercept();
        double double97 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 97.74308839823799d + "'", double96 == 97.74308839823799d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 7.419411939572464d + "'", double97 == 7.419411939572464d);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        double double15 = simpleRegression9.getRegressionSumSquares();
        long long16 = simpleRegression9.getN();
        double double17 = simpleRegression9.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getR();
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        simpleRegression18.addData(doubleArray48);
        simpleRegression9.addData(doubleArray48);
        simpleRegression0.addData(doubleArray48);
        double double52 = simpleRegression0.getRegressionSumSquares();
        double double53 = simpleRegression0.getTotalSumSquares();
        double double54 = simpleRegression0.getSlopeStdErr();
        double double55 = simpleRegression0.getTotalSumSquares();
        double double56 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        double double7 = simpleRegression0.getSlope();
        double double9 = simpleRegression0.predict(0.9999999999999998d);
        double double10 = simpleRegression0.getIntercept();
        double double11 = simpleRegression0.getInterceptStdErr();
        java.lang.Class<?> wildcardClass12 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        double double58 = simpleRegression0.getIntercept();
        double double59 = simpleRegression0.getR();
        double double60 = simpleRegression0.getR();
        double double61 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double63 = simpleRegression0.getSlopeConfidenceInterval((double) 4L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.9999999999999838d) + "'", double58 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.9999999999999999d + "'", double59 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.9999999999999999d + "'", double60 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 8743.714285714286d + "'", double61 == 8743.714285714286d);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getSumSquaredErrors();
        double double13 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double10 = simpleRegression7.getRegressionSumSquares();
        simpleRegression7.addData(0.0d, (-1.0d));
        double double14 = simpleRegression7.getR();
        double double16 = simpleRegression7.predict(10.0d);
        double double18 = simpleRegression7.predict(100.0d);
        double double20 = simpleRegression7.predict((double) (short) 0);
        long long21 = simpleRegression7.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression22 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long23 = simpleRegression22.getN();
        double double24 = simpleRegression22.getSumSquaredErrors();
        double double26 = simpleRegression22.predict((double) 10L);
        double double27 = simpleRegression22.getIntercept();
        double double28 = simpleRegression22.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression29 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long30 = simpleRegression29.getN();
        double double31 = simpleRegression29.getSumSquaredErrors();
        long long32 = simpleRegression29.getN();
        long long33 = simpleRegression29.getN();
        double[][] doubleArray34 = new double[][] {};
        simpleRegression29.addData(doubleArray34);
        simpleRegression22.addData(doubleArray34);
        simpleRegression7.addData(doubleArray34);
        simpleRegression0.addData(doubleArray34);
        double double39 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData((double) (-1.0f), (double) 0L);
        double double43 = simpleRegression0.getInterceptStdErr();
        double double44 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getIntercept();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getSumSquaredErrors();
        double double12 = simpleRegression0.getR();
        simpleRegression0.addData(378.6287878787878d, (double) 2L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        double double50 = simpleRegression0.getRSquare();
        java.lang.Class<?> wildcardClass51 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression4 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long5 = simpleRegression4.getN();
        double double6 = simpleRegression4.getSumSquaredErrors();
        double double8 = simpleRegression4.predict((double) 10L);
        double double9 = simpleRegression4.getIntercept();
        simpleRegression4.addData((double) (byte) 100, (double) 100.0f);
        double double14 = simpleRegression4.predict((double) 100L);
        double double15 = simpleRegression4.getMeanSquareError();
        long long16 = simpleRegression4.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getRSquare();
        double double20 = simpleRegression17.getTotalSumSquares();
        double[] doubleArray25 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray30 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray31 = new double[][] { doubleArray25, doubleArray30 };
        simpleRegression17.addData(doubleArray31);
        simpleRegression4.addData(doubleArray31);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        long long37 = simpleRegression34.getN();
        long long38 = simpleRegression34.getN();
        double[][] doubleArray39 = new double[][] {};
        simpleRegression34.addData(doubleArray39);
        simpleRegression4.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        double double43 = simpleRegression0.getR();
        double double44 = simpleRegression0.getIntercept();
        double double45 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.predict((double) (-1.0f));
        double double12 = simpleRegression0.getSlope();
        double double13 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        double double17 = simpleRegression0.getSumSquaredErrors();
        double double19 = simpleRegression0.predict((double) 6L);
        double double21 = simpleRegression0.predict(0.6812154343391408d);
        long long22 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getR();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getSlope();
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getSlope();
        long long11 = simpleRegression0.getN();
        double double12 = simpleRegression0.getSumSquaredErrors();
        double double13 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getSlope();
        long long5 = simpleRegression0.getN();
        double double6 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        double double9 = simpleRegression0.predict(0.0d);
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getR();
        simpleRegression0.addData((double) 100.0f, 964.4545454545455d);
        long long15 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getSumSquaredErrors();
        double double12 = simpleRegression0.getMeanSquareError();
        long long13 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.predict((double) (-1.0f));
        long long12 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getMeanSquareError();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getIntercept();
        double double15 = simpleRegression0.getInterceptStdErr();
        double double16 = simpleRegression0.getInterceptStdErr();
        double double17 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSlopeStdErr();
        double double15 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        long long31 = simpleRegression0.getN();
        simpleRegression0.addData(10.0d, (-1.0d));
        double double35 = simpleRegression0.getSumSquaredErrors();
        double double36 = simpleRegression0.getTotalSumSquares();
        java.lang.Class<?> wildcardClass37 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 38.189393939393085d + "'", double35 == 38.189393939393085d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 7356.75d + "'", double36 == 7356.75d);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double13 = simpleRegression0.predict(0.5967796441620488d);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSlopeConfidenceInterval((double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getMeanSquareError();
        java.lang.Class<?> wildcardClass6 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getRegressionSumSquares();
        double double17 = simpleRegression0.getSlopeStdErr();
        long long18 = simpleRegression0.getN();
        double double19 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData(1.0d, (double) (short) 10);
        java.lang.Class<?> wildcardClass8 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getRegressionSumSquares();
        long long11 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getTotalSumSquares();
        double[][] doubleArray6 = new double[][] {};
        simpleRegression0.addData(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        simpleRegression0.addData(6.0d, (double) 100);
        double double47 = simpleRegression0.getR();
        double double49 = simpleRegression0.predict(964.4545454545455d);
        java.lang.Class<?> wildcardClass50 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.6812154343391408d + "'", double47 == 0.6812154343391408d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 568.5168675396359d + "'", double49 == 568.5168675396359d);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        long long31 = simpleRegression0.getN();
        simpleRegression0.addData(10.0d, (-1.0d));
        double double35 = simpleRegression0.getSlopeStdErr();
        double double36 = simpleRegression0.getRegressionSumSquares();
        double double37 = simpleRegression0.getSlopeConfidenceInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.5378787878787817d + "'", double35 == 0.5378787878787817d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 7318.560606060606d + "'", double36 == 7318.560606060606d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2.314305586860937d + "'", double37 == 2.314305586860937d);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double4 = simpleRegression0.predict((double) (byte) 10);
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSlopeStdErr();
        double double16 = simpleRegression0.predict((double) (byte) 1);
        double double17 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        long long4 = simpleRegression0.getN();
        long long5 = simpleRegression0.getN();
        java.lang.Class<?> wildcardClass6 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval(2.716154737210983d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict(4.066480948555191E-7d);
        double double6 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSlopeConfidenceInterval(176.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlope();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.addData((double) 0, 38.189393939393085d);
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getTotalSumSquares();
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval(0.5812116291192775d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        double double7 = simpleRegression0.getSlope();
        double double8 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.predict(2.314305586860937d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getR();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        double double42 = simpleRegression0.getInterceptStdErr();
        double double43 = simpleRegression0.getSignificance();
        double double44 = simpleRegression0.getInterceptStdErr();
        double double45 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 6.031565971695669E-7d + "'", double42 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 6.031565971695669E-7d + "'", double44 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 8743.714285714286d + "'", double45 == 8743.714285714286d);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 0.0f);
        simpleRegression0.clear();
        double double10 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getSumSquaredErrors();
        double double14 = simpleRegression0.getSlope();
        double double15 = simpleRegression0.getSlopeStdErr();
        double double16 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        long long4 = simpleRegression0.getN();
        long long5 = simpleRegression0.getN();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        double double3 = simpleRegression0.getInterceptStdErr();
        double double4 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        double double42 = simpleRegression0.getInterceptStdErr();
        double double43 = simpleRegression0.getSignificance();
        double double44 = simpleRegression0.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getTotalSumSquares();
        double double48 = simpleRegression45.getSlopeStdErr();
        double double50 = simpleRegression45.predict((double) 3L);
        double double51 = simpleRegression45.getRegressionSumSquares();
        double double52 = simpleRegression45.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression53 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long54 = simpleRegression53.getN();
        double double55 = simpleRegression53.getSumSquaredErrors();
        double double57 = simpleRegression53.predict((double) 10L);
        double double58 = simpleRegression53.getMeanSquareError();
        double double59 = simpleRegression53.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        double double63 = simpleRegression60.getRegressionSumSquares();
        simpleRegression60.addData(0.0d, (-1.0d));
        double double67 = simpleRegression60.getR();
        double double69 = simpleRegression60.predict(10.0d);
        double double71 = simpleRegression60.predict(100.0d);
        double double73 = simpleRegression60.predict((double) (short) 0);
        long long74 = simpleRegression60.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression75 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long76 = simpleRegression75.getN();
        double double77 = simpleRegression75.getSumSquaredErrors();
        double double79 = simpleRegression75.predict((double) 10L);
        double double80 = simpleRegression75.getIntercept();
        double double81 = simpleRegression75.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression82 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long83 = simpleRegression82.getN();
        double double84 = simpleRegression82.getSumSquaredErrors();
        long long85 = simpleRegression82.getN();
        long long86 = simpleRegression82.getN();
        double[][] doubleArray87 = new double[][] {};
        simpleRegression82.addData(doubleArray87);
        simpleRegression75.addData(doubleArray87);
        simpleRegression60.addData(doubleArray87);
        simpleRegression53.addData(doubleArray87);
        simpleRegression45.addData(doubleArray87);
        simpleRegression0.addData(doubleArray87);
        double double94 = simpleRegression0.getSumSquaredErrors();
        double double95 = simpleRegression0.getRSquare();
        double double97 = simpleRegression0.predict(2926.4846611894172d);
        double double98 = simpleRegression0.getRegressionSumSquares();
        double double99 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 6.031565971695669E-7d + "'", double42 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 6.031565971695669E-7d + "'", double44 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.8189894035458565E-12d + "'", double94 == 1.8189894035458565E-12d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.9999999999999998d + "'", double95 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2954.7495078013108d + "'", double97 == 2954.7495078013108d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 8743.714285714283d + "'", double98 == 8743.714285714283d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1.0099999999999998d + "'", double99 == 1.0099999999999998d);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getRegressionSumSquares();
        double double9 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getIntercept();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData((double) '#', 0.9999999999999998d);
        simpleRegression0.addData(0.585116560900003d, 9416.307692307693d);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getRSquare();
        double double20 = simpleRegression17.getTotalSumSquares();
        double double21 = simpleRegression17.getInterceptStdErr();
        double double22 = simpleRegression17.getRegressionSumSquares();
        double double23 = simpleRegression17.getSumSquaredErrors();
        double double24 = simpleRegression17.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double26 = simpleRegression25.getSumSquaredErrors();
        double double27 = simpleRegression25.getTotalSumSquares();
        double double28 = simpleRegression25.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression29 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long30 = simpleRegression29.getN();
        double double31 = simpleRegression29.getSumSquaredErrors();
        double double32 = simpleRegression29.getRegressionSumSquares();
        simpleRegression29.addData(0.0d, (-1.0d));
        double double36 = simpleRegression29.getR();
        double double38 = simpleRegression29.predict(10.0d);
        double double40 = simpleRegression29.predict(100.0d);
        double double42 = simpleRegression29.predict((double) (short) 0);
        long long43 = simpleRegression29.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression44 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long45 = simpleRegression44.getN();
        double double46 = simpleRegression44.getSumSquaredErrors();
        double double48 = simpleRegression44.predict((double) 10L);
        double double49 = simpleRegression44.getIntercept();
        double double50 = simpleRegression44.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression51 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long52 = simpleRegression51.getN();
        double double53 = simpleRegression51.getSumSquaredErrors();
        long long54 = simpleRegression51.getN();
        long long55 = simpleRegression51.getN();
        double[][] doubleArray56 = new double[][] {};
        simpleRegression51.addData(doubleArray56);
        simpleRegression44.addData(doubleArray56);
        simpleRegression29.addData(doubleArray56);
        simpleRegression25.addData(doubleArray56);
        simpleRegression17.addData(doubleArray56);
        simpleRegression0.addData(doubleArray56);
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        simpleRegression0.addData((double) 0L, (double) 'a');
        double double11 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getIntercept();
        double double15 = simpleRegression0.getInterceptStdErr();
        double double16 = simpleRegression0.getInterceptStdErr();
        double double17 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getRSquare();
        double double8 = simpleRegression0.getTotalSumSquares();
        double double9 = simpleRegression0.getInterceptStdErr();
        java.lang.Class<?> wildcardClass10 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getTotalSumSquares();
        java.lang.Class<?> wildcardClass8 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        double double2 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        long long10 = simpleRegression0.getN();
        double double12 = simpleRegression0.predict((double) 1.0f);
        simpleRegression0.addData((double) 7L, (-1.0d));
        double double16 = simpleRegression0.getMeanSquareError();
        double double17 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        simpleRegression0.clear();
        simpleRegression0.addData(4.232527564042065E-9d, 9.022002373111071d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) 'a', (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        double double9 = simpleRegression0.predict(10.0d);
        double double11 = simpleRegression0.predict(100.0d);
        double double12 = simpleRegression0.getMeanSquareError();
        java.lang.Class<?> wildcardClass13 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.addData((double) 'a', (double) 3L);
        double double19 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(237.8600243518896d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double9 = simpleRegression0.predict((double) 0);
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getRSquare();
        double double12 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression40 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long41 = simpleRegression40.getN();
        double double42 = simpleRegression40.getSumSquaredErrors();
        double double44 = simpleRegression40.predict((double) 10L);
        double double45 = simpleRegression40.getIntercept();
        double double46 = simpleRegression40.getRegressionSumSquares();
        long long47 = simpleRegression40.getN();
        double double48 = simpleRegression40.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        simpleRegression49.addData((double) (byte) 100, (double) 100.0f);
        double double59 = simpleRegression49.predict((double) 100L);
        double double60 = simpleRegression49.getR();
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[] doubleArray66 = new double[] { 100L, 100.0d };
        double[] doubleArray69 = new double[] { 100L, 100.0d };
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[][] doubleArray79 = new double[][] { doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        simpleRegression49.addData(doubleArray79);
        simpleRegression40.addData(doubleArray79);
        simpleRegression0.addData(doubleArray79);
        double double83 = simpleRegression0.getRegressionSumSquares();
        double double84 = simpleRegression0.getInterceptStdErr();
        long long85 = simpleRegression0.getN();
        double double87 = simpleRegression0.predict(19.094696969696543d);
        double double89 = simpleRegression0.getSlopeConfidenceInterval(4.066480948555191E-7d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 9416.307692307693d + "'", double83 == 9416.307692307693d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4.066480948555191E-7d + "'", double84 == 4.066480948555191E-7d);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 13L + "'", long85 == 13L);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 18.28564393939351d + "'", double87 == 18.28564393939351d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 4.492039526641522E-8d + "'", double89 == 4.492039526641522E-8d);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.predict((double) 1L);
        long long12 = simpleRegression0.getN();
        double double13 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getSlopeStdErr();
        long long11 = simpleRegression0.getN();
        double double12 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getIntercept();
        double double5 = simpleRegression0.getSumSquaredErrors();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getR();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getR();
        simpleRegression0.addData(0.9999999999999999d, 0.0d);
        simpleRegression0.addData((double) (byte) 0, 7356.75d);
        double double18 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        simpleRegression0.clear();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double12 = simpleRegression9.getRegressionSumSquares();
        simpleRegression9.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        double double20 = simpleRegression16.predict((double) 10L);
        double double21 = simpleRegression16.getIntercept();
        simpleRegression16.addData((double) (byte) 100, (double) 100.0f);
        double double26 = simpleRegression16.predict((double) 100L);
        double double27 = simpleRegression16.getR();
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[] doubleArray39 = new double[] { 100L, 100.0d };
        double[] doubleArray42 = new double[] { 100L, 100.0d };
        double[] doubleArray45 = new double[] { 100L, 100.0d };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        simpleRegression16.addData(doubleArray46);
        simpleRegression9.addData(doubleArray46);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        double double55 = simpleRegression49.getRegressionSumSquares();
        long long56 = simpleRegression49.getN();
        double double57 = simpleRegression49.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression58 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long59 = simpleRegression58.getN();
        double double60 = simpleRegression58.getSumSquaredErrors();
        double double62 = simpleRegression58.predict((double) 10L);
        double double63 = simpleRegression58.getIntercept();
        simpleRegression58.addData((double) (byte) 100, (double) 100.0f);
        double double68 = simpleRegression58.predict((double) 100L);
        double double69 = simpleRegression58.getR();
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[] doubleArray81 = new double[] { 100L, 100.0d };
        double[] doubleArray84 = new double[] { 100L, 100.0d };
        double[] doubleArray87 = new double[] { 100L, 100.0d };
        double[][] doubleArray88 = new double[][] { doubleArray72, doubleArray75, doubleArray78, doubleArray81, doubleArray84, doubleArray87 };
        simpleRegression58.addData(doubleArray88);
        simpleRegression49.addData(doubleArray88);
        simpleRegression9.addData(doubleArray88);
        simpleRegression0.addData(doubleArray88);
        double double93 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSumSquaredErrors();
        double double13 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        long long4 = simpleRegression0.getN();
        double double6 = simpleRegression0.predict(0.0d);
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getTotalSumSquares();
        java.lang.Class<?> wildcardClass9 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        double double15 = simpleRegression9.getRegressionSumSquares();
        long long16 = simpleRegression9.getN();
        double double17 = simpleRegression9.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getR();
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        simpleRegression18.addData(doubleArray48);
        simpleRegression9.addData(doubleArray48);
        simpleRegression0.addData(doubleArray48);
        double double52 = simpleRegression0.getRegressionSumSquares();
        double double53 = simpleRegression0.getTotalSumSquares();
        double double54 = simpleRegression0.getSignificance();
        double double55 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData((double) 100, (double) 6L);
        double double13 = simpleRegression0.getSumSquaredErrors();
        double double14 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.getIntercept();
        double double16 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        double double51 = simpleRegression45.getRegressionSumSquares();
        long long52 = simpleRegression45.getN();
        double double53 = simpleRegression45.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        simpleRegression54.addData((double) (byte) 100, (double) 100.0f);
        double double64 = simpleRegression54.predict((double) 100L);
        double double65 = simpleRegression54.getR();
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        simpleRegression54.addData(doubleArray84);
        simpleRegression45.addData(doubleArray84);
        simpleRegression5.addData(doubleArray84);
        simpleRegression0.addData(doubleArray84);
        double double89 = simpleRegression0.getRSquare();
        double double90 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 100.0d + "'", double90 == 100.0d);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression3 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long4 = simpleRegression3.getN();
        double double5 = simpleRegression3.getSumSquaredErrors();
        double double7 = simpleRegression3.predict((double) 10L);
        double double8 = simpleRegression3.getMeanSquareError();
        double double9 = simpleRegression3.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double13 = simpleRegression10.getRegressionSumSquares();
        simpleRegression10.addData(0.0d, (-1.0d));
        double double17 = simpleRegression10.getR();
        double double19 = simpleRegression10.predict(10.0d);
        double double21 = simpleRegression10.predict(100.0d);
        double double23 = simpleRegression10.predict((double) (short) 0);
        long long24 = simpleRegression10.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long26 = simpleRegression25.getN();
        double double27 = simpleRegression25.getSumSquaredErrors();
        double double29 = simpleRegression25.predict((double) 10L);
        double double30 = simpleRegression25.getIntercept();
        double double31 = simpleRegression25.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression32 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long33 = simpleRegression32.getN();
        double double34 = simpleRegression32.getSumSquaredErrors();
        long long35 = simpleRegression32.getN();
        long long36 = simpleRegression32.getN();
        double[][] doubleArray37 = new double[][] {};
        simpleRegression32.addData(doubleArray37);
        simpleRegression25.addData(doubleArray37);
        simpleRegression10.addData(doubleArray37);
        simpleRegression3.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double43 = simpleRegression0.getRegressionSumSquares();
        double double44 = simpleRegression0.getR();
        double double45 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double46 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getRegressionSumSquares();
        double double12 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval((double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(Double.NaN, (double) 7L);
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.predict(6.0d);
        double double12 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        simpleRegression0.addData(38.189393939393085d, 3.732383556975903d);
        double double12 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.addData((double) 0, 38.189393939393085d);
        double double8 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData((-3.0d), (-3.0d));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        simpleRegression0.addData((double) 0L, (double) 'a');
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getInterceptStdErr();
        long long11 = simpleRegression0.getN();
        double double12 = simpleRegression0.getMeanSquareError();
        double double13 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getSumSquaredErrors();
        double double16 = simpleRegression13.getMeanSquareError();
        double double17 = simpleRegression13.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double21 = simpleRegression18.getRegressionSumSquares();
        simpleRegression18.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long26 = simpleRegression25.getN();
        double double27 = simpleRegression25.getSumSquaredErrors();
        double double29 = simpleRegression25.predict((double) 10L);
        double double30 = simpleRegression25.getIntercept();
        simpleRegression25.addData((double) (byte) 100, (double) 100.0f);
        double double35 = simpleRegression25.predict((double) 100L);
        double double36 = simpleRegression25.getR();
        double[] doubleArray39 = new double[] { 100L, 100.0d };
        double[] doubleArray42 = new double[] { 100L, 100.0d };
        double[] doubleArray45 = new double[] { 100L, 100.0d };
        double[] doubleArray48 = new double[] { 100L, 100.0d };
        double[] doubleArray51 = new double[] { 100L, 100.0d };
        double[] doubleArray54 = new double[] { 100L, 100.0d };
        double[][] doubleArray55 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 };
        simpleRegression25.addData(doubleArray55);
        simpleRegression18.addData(doubleArray55);
        simpleRegression13.addData(doubleArray55);
        simpleRegression0.addData(doubleArray55);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.5d + "'", double12 == 0.5d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(Double.NaN, (double) 7L);
        double double9 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, 0.6812154343391408d);
        double double13 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getRegressionSumSquares();
        double double12 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        long long42 = simpleRegression0.getN();
        double double43 = simpleRegression0.getMeanSquareError();
        double double44 = simpleRegression0.getRSquare();
        simpleRegression0.addData(7.419411939572464d, 9216.000000000002d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 7L + "'", long42 == 7L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 3.637978807091713E-13d + "'", double43 == 3.637978807091713E-13d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.9999999999999998d + "'", double44 == 0.9999999999999998d);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) (byte) 0, (double) (short) 100);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        simpleRegression0.addData((double) (byte) 0, (double) 13L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        double double23 = simpleRegression17.getRegressionSumSquares();
        double double24 = simpleRegression17.getSumSquaredErrors();
        double double25 = simpleRegression17.getMeanSquareError();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double27 = simpleRegression26.getSumSquaredErrors();
        double double28 = simpleRegression26.getSumSquaredErrors();
        simpleRegression26.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression30 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long31 = simpleRegression30.getN();
        double double32 = simpleRegression30.getSumSquaredErrors();
        double double34 = simpleRegression30.predict((double) 10L);
        double double35 = simpleRegression30.getIntercept();
        simpleRegression30.addData((double) (byte) 100, (double) 100.0f);
        double double40 = simpleRegression30.predict((double) 100L);
        double double41 = simpleRegression30.getMeanSquareError();
        long long42 = simpleRegression30.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression43 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long44 = simpleRegression43.getN();
        double double45 = simpleRegression43.getRSquare();
        double double46 = simpleRegression43.getTotalSumSquares();
        double[] doubleArray51 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray56 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray57 = new double[][] { doubleArray51, doubleArray56 };
        simpleRegression43.addData(doubleArray57);
        simpleRegression30.addData(doubleArray57);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        long long63 = simpleRegression60.getN();
        long long64 = simpleRegression60.getN();
        double[][] doubleArray65 = new double[][] {};
        simpleRegression60.addData(doubleArray65);
        simpleRegression30.addData(doubleArray65);
        simpleRegression26.addData(doubleArray65);
        simpleRegression17.addData(doubleArray65);
        simpleRegression0.addData(doubleArray65);
        java.lang.Class<?> wildcardClass71 = doubleArray65.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getRegressionSumSquares();
        double double17 = simpleRegression0.getSlopeStdErr();
        double double19 = simpleRegression0.predict((double) 10.0f);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getRegressionSumSquares();
        double double9 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double11 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double7 = simpleRegression0.predict(0.9999999999999999d);
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getRSquare();
        double double12 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getSlope();
        long long13 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(8400.857142857143d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getSumSquaredErrors();
        java.lang.Class<?> wildcardClass6 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double42 = simpleRegression0.getSlopeConfidenceInterval((-200.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 8743.714285714283d + "'", double40 == 8743.714285714283d);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSlopeConfidenceInterval(182.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double[] doubleArray13 = new double[] { 1L, ' ' };
        double[] doubleArray16 = new double[] { 1L, ' ' };
        double[] doubleArray19 = new double[] { 1L, ' ' };
        double[] doubleArray22 = new double[] { 1L, ' ' };
        double[] doubleArray25 = new double[] { 1L, ' ' };
        double[] doubleArray28 = new double[] { 1L, ' ' };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        simpleRegression0.addData(doubleArray29);
        double double32 = simpleRegression0.predict((double) (short) 100);
        double double33 = simpleRegression0.getMeanSquareError();
        double double34 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        double double2 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        double double58 = simpleRegression0.getIntercept();
        double double59 = simpleRegression0.getR();
        simpleRegression0.clear();
        double double62 = simpleRegression0.predict(0.5366294777987983d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.9999999999999838d) + "'", double58 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.9999999999999999d + "'", double59 == 0.9999999999999999d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        double double18 = simpleRegression12.getRegressionSumSquares();
        long long19 = simpleRegression12.getN();
        double double20 = simpleRegression12.getR();
        double double21 = simpleRegression12.getR();
        double double22 = simpleRegression12.getSumSquaredErrors();
        double double23 = simpleRegression12.getSlopeStdErr();
        double double24 = simpleRegression12.getSumSquaredErrors();
        double double25 = simpleRegression12.getRSquare();
        double double26 = simpleRegression12.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression27 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long28 = simpleRegression27.getN();
        double double29 = simpleRegression27.getSumSquaredErrors();
        double double31 = simpleRegression27.predict((double) 10L);
        double double32 = simpleRegression27.getIntercept();
        double double33 = simpleRegression27.getRegressionSumSquares();
        long long34 = simpleRegression27.getN();
        double double35 = simpleRegression27.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression36 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long37 = simpleRegression36.getN();
        double double38 = simpleRegression36.getSumSquaredErrors();
        double double40 = simpleRegression36.predict((double) 10L);
        double double41 = simpleRegression36.getIntercept();
        double double42 = simpleRegression36.getRegressionSumSquares();
        long long43 = simpleRegression36.getN();
        double double44 = simpleRegression36.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        simpleRegression45.addData((double) (byte) 100, (double) 100.0f);
        double double55 = simpleRegression45.predict((double) 100L);
        double double56 = simpleRegression45.getR();
        double[] doubleArray59 = new double[] { 100L, 100.0d };
        double[] doubleArray62 = new double[] { 100L, 100.0d };
        double[] doubleArray65 = new double[] { 100L, 100.0d };
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[][] doubleArray75 = new double[][] { doubleArray59, doubleArray62, doubleArray65, doubleArray68, doubleArray71, doubleArray74 };
        simpleRegression45.addData(doubleArray75);
        simpleRegression36.addData(doubleArray75);
        simpleRegression27.addData(doubleArray75);
        simpleRegression12.addData(doubleArray75);
        simpleRegression0.addData(doubleArray75);
        double double81 = simpleRegression0.getSlope();
        double double82 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        simpleRegression0.addData(2.0300000000000153d, (double) 100L);
        double double15 = simpleRegression0.getSlopeConfidenceInterval();
        double double17 = simpleRegression0.predict(9.31573003924374E-9d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 237.8600243518896d + "'", double15 == 237.8600243518896d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 41.90772484543353d + "'", double17 == 41.90772484543353d);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getR();
        simpleRegression0.addData(1.0099999999999998d, (double) ' ');
        double double8 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        long long31 = simpleRegression0.getN();
        simpleRegression0.addData(10.0d, (-1.0d));
        double double35 = simpleRegression0.getMeanSquareError();
        double double37 = simpleRegression0.getSlopeConfidenceInterval(0.0035355339059384605d);
        double double39 = simpleRegression0.predict(8571.428571428569d);
        double double40 = simpleRegression0.getMeanSquareError();
        long long41 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 19.094696969696543d + "'", double35 == 19.094696969696543d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 9.022002373111071d + "'", double37 == 9.022002373111071d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-89891.64177489174d) + "'", double39 == (-89891.64177489174d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 19.094696969696543d + "'", double40 == 19.094696969696543d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 4L + "'", long41 == 4L);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData((double) 1, 0.5d);
        simpleRegression0.addData(0.0d, (double) (short) 10);
        double double18 = simpleRegression0.predict(6.0d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-47.0d) + "'", double18 == (-47.0d));
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        simpleRegression0.clear();
        double double59 = simpleRegression0.getSlope();
        double double60 = simpleRegression0.getInterceptStdErr();
        double double61 = simpleRegression0.getSumSquaredErrors();
        long long62 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double63 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.predict((double) (byte) 1);
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.getSlope();
        double double17 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        long long42 = simpleRegression0.getN();
        double double43 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData((-0.2584033087426901d), (double) (short) 1);
        double double47 = simpleRegression0.getRegressionSumSquares();
        double double48 = simpleRegression0.getSlope();
        double double49 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6L + "'", long42 == 6L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 3513.007091486856d + "'", double47 == 3513.007091486856d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.49525318089709414d + "'", double48 == 0.49525318089709414d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.4181724592798012d + "'", double49 == 0.4181724592798012d);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        double double51 = simpleRegression45.getRegressionSumSquares();
        long long52 = simpleRegression45.getN();
        double double53 = simpleRegression45.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        simpleRegression54.addData((double) (byte) 100, (double) 100.0f);
        double double64 = simpleRegression54.predict((double) 100L);
        double double65 = simpleRegression54.getR();
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        simpleRegression54.addData(doubleArray84);
        simpleRegression45.addData(doubleArray84);
        simpleRegression5.addData(doubleArray84);
        simpleRegression0.addData(doubleArray84);
        double double89 = simpleRegression0.getRSquare();
        double double90 = simpleRegression0.getIntercept();
        double double92 = simpleRegression0.predict(1.8189894035458565E-12d);
        double double94 = simpleRegression0.predict(6.514835844650013E-9d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 100.0d + "'", double90 == 100.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 100.0d + "'", double92 == 100.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 100.0d + "'", double94 == 100.0d);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getIntercept();
        double double5 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval((double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        double double42 = simpleRegression0.getRSquare();
        double double43 = simpleRegression0.getSignificance();
        double double45 = simpleRegression0.predict((double) (-1));
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double47 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9999999999999998d + "'", double42 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-2.009999999999984d) + "'", double45 == (-2.009999999999984d));
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getIntercept();
        double double17 = simpleRegression0.predict((double) (short) -1);
        long long18 = simpleRegression0.getN();
        double double19 = simpleRegression0.getSlopeStdErr();
        double double20 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData(0.49525318089709414d, (double) (byte) 10);
        double double24 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = simpleRegression0.getSlopeConfidenceInterval((double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        double double5 = simpleRegression0.getR();
        double double6 = simpleRegression0.getRSquare();
        double double7 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        double double58 = simpleRegression0.getIntercept();
        double double59 = simpleRegression0.getR();
        double double60 = simpleRegression0.getSignificance();
        double double61 = simpleRegression0.getTotalSumSquares();
        double double62 = simpleRegression0.getSlopeStdErr();
        double double63 = simpleRegression0.getRegressionSumSquares();
        double double64 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.9999999999999838d) + "'", double58 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.9999999999999999d + "'", double59 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 8743.714285714286d + "'", double61 == 8743.714285714286d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 6.514835844650013E-9d + "'", double62 == 6.514835844650013E-9d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 8743.714285714283d + "'", double63 == 8743.714285714283d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 8743.714285714286d + "'", double64 == 8743.714285714286d);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getIntercept();
        double double2 = simpleRegression0.getInterceptStdErr();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval(182.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getSlope();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getInterceptStdErr();
        double double10 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval(4.492039526641522E-8d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getR();
        double[] doubleArray14 = new double[] { 100L, 100.0d };
        double[] doubleArray17 = new double[] { 100L, 100.0d };
        double[] doubleArray20 = new double[] { 100L, 100.0d };
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[][] doubleArray30 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        simpleRegression0.addData(doubleArray30);
        double double33 = simpleRegression0.predict(237.8600243518896d);
        double double34 = simpleRegression0.getInterceptStdErr();
        double double36 = simpleRegression0.predict(2.4416205765062092E-8d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRegressionSumSquares();
        double double41 = simpleRegression0.getSlopeConfidenceInterval();
        double double42 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double44 = simpleRegression0.getSlopeConfidenceInterval(200.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 8743.714285714283d + "'", double40 == 8743.714285714283d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.6746918727301837E-8d + "'", double41 == 1.6746918727301837E-8d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-0.9999999999999838d) + "'", double42 == (-0.9999999999999838d));
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRegressionSumSquares();
        long long5 = simpleRegression0.getN();
        double double6 = simpleRegression0.getIntercept();
        double double8 = simpleRegression0.predict(0.4181724592798012d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        double double15 = simpleRegression9.getRegressionSumSquares();
        long long16 = simpleRegression9.getN();
        double double17 = simpleRegression9.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getR();
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        simpleRegression18.addData(doubleArray48);
        simpleRegression9.addData(doubleArray48);
        simpleRegression0.addData(doubleArray48);
        double double52 = simpleRegression0.getRegressionSumSquares();
        double double53 = simpleRegression0.getTotalSumSquares();
        double double54 = simpleRegression0.getTotalSumSquares();
        double double55 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getRSquare();
        long long6 = simpleRegression0.getN();
        double double7 = simpleRegression0.getR();
        long long8 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        double double15 = simpleRegression9.getRegressionSumSquares();
        long long16 = simpleRegression9.getN();
        double double17 = simpleRegression9.getR();
        double double18 = simpleRegression9.getR();
        double double19 = simpleRegression9.getSumSquaredErrors();
        double double20 = simpleRegression9.getTotalSumSquares();
        double double22 = simpleRegression9.predict((double) (short) -1);
        double double23 = simpleRegression9.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression24 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long25 = simpleRegression24.getN();
        double double26 = simpleRegression24.getSumSquaredErrors();
        double double28 = simpleRegression24.predict((double) 10L);
        double double29 = simpleRegression24.getIntercept();
        simpleRegression24.addData((double) (byte) 100, (double) 100.0f);
        double double33 = simpleRegression24.getIntercept();
        double double34 = simpleRegression24.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression35 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long36 = simpleRegression35.getN();
        double double37 = simpleRegression35.getSumSquaredErrors();
        double double39 = simpleRegression35.predict((double) 10L);
        double double40 = simpleRegression35.getIntercept();
        simpleRegression35.addData((double) (byte) 100, (double) 100.0f);
        double double45 = simpleRegression35.predict((double) 100L);
        double double46 = simpleRegression35.getMeanSquareError();
        long long47 = simpleRegression35.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression48 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long49 = simpleRegression48.getN();
        double double50 = simpleRegression48.getRSquare();
        double double51 = simpleRegression48.getTotalSumSquares();
        double[] doubleArray56 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray61 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray62 = new double[][] { doubleArray56, doubleArray61 };
        simpleRegression48.addData(doubleArray62);
        simpleRegression35.addData(doubleArray62);
        simpleRegression24.addData(doubleArray62);
        simpleRegression9.addData(doubleArray62);
        simpleRegression0.addData(doubleArray62);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getTotalSumSquares();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSlopeStdErr();
        long long10 = simpleRegression0.getN();
        long long11 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval((double) 6L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval(99.99999999999999d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getIntercept();
        long long11 = simpleRegression0.getN();
        double double12 = simpleRegression0.getR();
        double double13 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getIntercept();
        double double8 = simpleRegression0.getInterceptStdErr();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double12 = simpleRegression0.getSumSquaredErrors();
        long long13 = simpleRegression0.getN();
        double double14 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getIntercept();
        double double3 = simpleRegression0.getInterceptStdErr();
        double double4 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double19 = simpleRegression15.predict((double) 10L);
        double double20 = simpleRegression15.getIntercept();
        simpleRegression15.addData((double) (byte) 100, (double) 100.0f);
        double double24 = simpleRegression15.getIntercept();
        double double25 = simpleRegression15.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getSumSquaredErrors();
        double double30 = simpleRegression26.predict((double) 10L);
        double double31 = simpleRegression26.getIntercept();
        simpleRegression26.addData((double) (byte) 100, (double) 100.0f);
        double double36 = simpleRegression26.predict((double) 100L);
        double double37 = simpleRegression26.getMeanSquareError();
        long long38 = simpleRegression26.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getRSquare();
        double double42 = simpleRegression39.getTotalSumSquares();
        double[] doubleArray47 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray53 = new double[][] { doubleArray47, doubleArray52 };
        simpleRegression39.addData(doubleArray53);
        simpleRegression26.addData(doubleArray53);
        simpleRegression15.addData(doubleArray53);
        simpleRegression0.addData(doubleArray53);
        double double58 = simpleRegression0.getRegressionSumSquares();
        double double59 = simpleRegression0.getRegressionSumSquares();
        double double60 = simpleRegression0.getSumSquaredErrors();
        java.lang.Class<?> wildcardClass61 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getR();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getMeanSquareError();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression6 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double7 = simpleRegression6.getR();
        double double8 = simpleRegression6.getRegressionSumSquares();
        double double9 = simpleRegression6.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double14 = simpleRegression10.predict((double) 10L);
        double double15 = simpleRegression10.getIntercept();
        double double16 = simpleRegression10.getRegressionSumSquares();
        long long17 = simpleRegression10.getN();
        double double18 = simpleRegression10.getRSquare();
        double double19 = simpleRegression10.getRSquare();
        double double20 = simpleRegression10.getInterceptStdErr();
        double double21 = simpleRegression10.getTotalSumSquares();
        simpleRegression10.addData((double) 10.0f, (double) (short) 10);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long26 = simpleRegression25.getN();
        double double27 = simpleRegression25.getSumSquaredErrors();
        long long28 = simpleRegression25.getN();
        long long29 = simpleRegression25.getN();
        double[][] doubleArray30 = new double[][] {};
        simpleRegression25.addData(doubleArray30);
        simpleRegression10.addData(doubleArray30);
        simpleRegression6.addData(doubleArray30);
        simpleRegression0.addData(doubleArray30);
        java.lang.Class<?> wildcardClass35 = doubleArray30.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double4 = simpleRegression0.predict((double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.predict((double) (-1.0f));
        double double12 = simpleRegression0.getSlope();
        double double13 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getRegressionSumSquares();
        double double8 = simpleRegression0.getSlopeStdErr();
        double double9 = simpleRegression0.getInterceptStdErr();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getIntercept();
        double double12 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) -1, (double) 0.0f);
        double double16 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getIntercept();
        long long11 = simpleRegression0.getN();
        double double12 = simpleRegression0.getR();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getRegressionSumSquares();
        long long15 = simpleRegression0.getN();
        double double17 = simpleRegression0.predict(4.232527564042065E-9d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getTotalSumSquares();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSlopeStdErr();
        long long10 = simpleRegression0.getN();
        long long11 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getMeanSquareError();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getRSquare();
        double double18 = simpleRegression15.getTotalSumSquares();
        double[] doubleArray23 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray28 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray29 = new double[][] { doubleArray23, doubleArray28 };
        simpleRegression15.addData(doubleArray29);
        simpleRegression0.addData(doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = simpleRegression0.getSlopeConfidenceInterval(10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.getSumSquaredErrors();
        double double14 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData(100.0d, 6.031565971695669E-7d);
        double double18 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        long long6 = simpleRegression0.getN();
        simpleRegression0.addData((double) (short) 10, 1.0d);
        double double11 = simpleRegression0.predict(0.5366294777987983d);
        simpleRegression0.addData(3.732383556975903d, (double) 8L);
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSlopeConfidenceInterval((-0.9999999999999838d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 24.5d + "'", double15 == 24.5d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        double double42 = simpleRegression0.getInterceptStdErr();
        double double43 = simpleRegression0.getSignificance();
        double double44 = simpleRegression0.getInterceptStdErr();
        double double46 = simpleRegression0.predict((double) (short) -1);
        double double47 = simpleRegression0.getSumSquaredErrors();
        double double48 = simpleRegression0.getR();
        long long49 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 6.031565971695669E-7d + "'", double42 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 6.031565971695669E-7d + "'", double44 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-2.009999999999984d) + "'", double46 == (-2.009999999999984d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.8189894035458565E-12d + "'", double47 == 1.8189894035458565E-12d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.9999999999999999d + "'", double48 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 7L + "'", long49 == 7L);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.predict((double) (byte) 1);
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getRSquare();
        double double19 = simpleRegression16.getRegressionSumSquares();
        double double20 = simpleRegression16.getRSquare();
        double double21 = simpleRegression16.getTotalSumSquares();
        double double22 = simpleRegression16.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression23 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long24 = simpleRegression23.getN();
        double double25 = simpleRegression23.getSumSquaredErrors();
        double double27 = simpleRegression23.predict((double) 10L);
        double double28 = simpleRegression23.getIntercept();
        simpleRegression23.addData((double) (byte) 100, (double) 100.0f);
        double double32 = simpleRegression23.getIntercept();
        double double33 = simpleRegression23.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        double double38 = simpleRegression34.predict((double) 10L);
        double double39 = simpleRegression34.getIntercept();
        simpleRegression34.addData((double) (byte) 100, (double) 100.0f);
        double double44 = simpleRegression34.predict((double) 100L);
        double double45 = simpleRegression34.getMeanSquareError();
        long long46 = simpleRegression34.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression47 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long48 = simpleRegression47.getN();
        double double49 = simpleRegression47.getRSquare();
        double double50 = simpleRegression47.getTotalSumSquares();
        double[] doubleArray55 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray60 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray61 = new double[][] { doubleArray55, doubleArray60 };
        simpleRegression47.addData(doubleArray61);
        simpleRegression34.addData(doubleArray61);
        simpleRegression23.addData(doubleArray61);
        simpleRegression16.addData(doubleArray61);
        simpleRegression0.addData(doubleArray61);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression67 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long68 = simpleRegression67.getN();
        double double69 = simpleRegression67.getSumSquaredErrors();
        long long70 = simpleRegression67.getN();
        double double71 = simpleRegression67.getTotalSumSquares();
        double double72 = simpleRegression67.getSlopeStdErr();
        double double73 = simpleRegression67.getR();
        double double75 = simpleRegression67.predict((double) 100);
        double[] doubleArray82 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[] doubleArray89 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[][] doubleArray90 = new double[][] { doubleArray82, doubleArray89 };
        simpleRegression67.addData(doubleArray90);
        simpleRegression0.addData(doubleArray90);
        double double93 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSlope();
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        double double9 = simpleRegression0.predict(0.0d);
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getR();
        simpleRegression0.addData((double) 100.0f, 964.4545454545455d);
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 466051.23966942145d + "'", double15 == 466051.23966942145d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9999999999999999d + "'", double16 == 0.9999999999999999d);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        long long42 = simpleRegression0.getN();
        double double43 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData((-0.2584033087426901d), (double) (short) 1);
        double double47 = simpleRegression0.getRegressionSumSquares();
        double double48 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6L + "'", long42 == 6L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 3513.007091486856d + "'", double47 == 3513.007091486856d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.116507100294446d + "'", double48 == 0.116507100294446d);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        simpleRegression0.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        long long8 = simpleRegression5.getN();
        double double9 = simpleRegression5.getRSquare();
        double[] doubleArray14 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray19 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray24 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[][] doubleArray25 = new double[][] { doubleArray14, doubleArray19, doubleArray24 };
        simpleRegression5.addData(doubleArray25);
        simpleRegression0.addData(doubleArray25);
        double double28 = simpleRegression0.getSumSquaredErrors();
        double double29 = simpleRegression0.getTotalSumSquares();
        double double30 = simpleRegression0.getRegressionSumSquares();
        double double31 = simpleRegression0.getSlopeConfidenceInterval();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSlopeStdErr();
        double double16 = simpleRegression0.predict((-1.0d));
        double double17 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getTotalSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getSumSquaredErrors();
        double double17 = simpleRegression13.predict((double) 10L);
        double double18 = simpleRegression13.getIntercept();
        double double19 = simpleRegression13.getRegressionSumSquares();
        long long20 = simpleRegression13.getN();
        double double21 = simpleRegression13.getR();
        double double22 = simpleRegression13.getSlope();
        double double23 = simpleRegression13.getRegressionSumSquares();
        double[] doubleArray26 = new double[] { 1L, ' ' };
        double[] doubleArray29 = new double[] { 1L, ' ' };
        double[] doubleArray32 = new double[] { 1L, ' ' };
        double[] doubleArray35 = new double[] { 1L, ' ' };
        double[] doubleArray38 = new double[] { 1L, ' ' };
        double[] doubleArray41 = new double[] { 1L, ' ' };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression13.addData(doubleArray42);
        double double44 = simpleRegression13.getSlope();
        double double45 = simpleRegression13.getMeanSquareError();
        simpleRegression13.clear();
        double[][] doubleArray47 = new double[][] {};
        simpleRegression13.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray47);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData(1.8189894035458565E-12d, (double) ' ');
        long long15 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getSumSquaredErrors();
        double double13 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.predict((double) 1L);
        double double12 = simpleRegression0.getSlope();
        double double13 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.predict(9216.000000000002d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData(4802.0d, (double) 3L);
        double double11 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(Double.NaN, (double) 7L);
        double double9 = simpleRegression0.getRegressionSumSquares();
        java.lang.Class<?> wildcardClass10 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.predict((double) (-1.0f));
        long long12 = simpleRegression0.getN();
        simpleRegression0.addData((double) 100, (double) (short) 100);
        double double16 = simpleRegression0.getSlopeStdErr();
        double double17 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        long long15 = simpleRegression12.getN();
        double double16 = simpleRegression12.getTotalSumSquares();
        double double17 = simpleRegression12.getSlopeStdErr();
        double double18 = simpleRegression12.getR();
        double double20 = simpleRegression12.predict((double) 100);
        double[] doubleArray27 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[] doubleArray34 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[][] doubleArray35 = new double[][] { doubleArray27, doubleArray34 };
        simpleRegression12.addData(doubleArray35);
        simpleRegression0.addData(doubleArray35);
        simpleRegression0.addData((double) 'a', 4142.092174397623d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        double double4 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.addData((-3.0d), (double) 100L);
        double double8 = simpleRegression0.getTotalSumSquares();
        double double9 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        long long15 = simpleRegression0.getN();
        double double16 = simpleRegression0.getR();
        double double18 = simpleRegression0.predict(4.232527564042065E-9d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        long long10 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getSlope();
        double double15 = simpleRegression0.predict(0.0d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        long long10 = simpleRegression0.getN();
        long long11 = simpleRegression0.getN();
        double double13 = simpleRegression0.predict((double) '#');
        double double14 = simpleRegression0.getRSquare();
        double double15 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        double double44 = simpleRegression0.getSumSquaredErrors();
        double double45 = simpleRegression0.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression46 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long47 = simpleRegression46.getN();
        double double48 = simpleRegression46.getSumSquaredErrors();
        double double50 = simpleRegression46.predict((double) 10L);
        double double51 = simpleRegression46.getIntercept();
        double double52 = simpleRegression46.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression53 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long54 = simpleRegression53.getN();
        double double55 = simpleRegression53.getSumSquaredErrors();
        double double56 = simpleRegression53.getRegressionSumSquares();
        simpleRegression53.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        double double64 = simpleRegression60.predict((double) 10L);
        double double65 = simpleRegression60.getIntercept();
        simpleRegression60.addData((double) (byte) 100, (double) 100.0f);
        double double70 = simpleRegression60.predict((double) 100L);
        double double71 = simpleRegression60.getR();
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[] doubleArray86 = new double[] { 100L, 100.0d };
        double[] doubleArray89 = new double[] { 100L, 100.0d };
        double[][] doubleArray90 = new double[][] { doubleArray74, doubleArray77, doubleArray80, doubleArray83, doubleArray86, doubleArray89 };
        simpleRegression60.addData(doubleArray90);
        simpleRegression53.addData(doubleArray90);
        simpleRegression46.addData(doubleArray90);
        simpleRegression0.addData(doubleArray90);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.8189894035458565E-12d + "'", double44 == 1.8189894035458565E-12d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-0.9999999999999838d) + "'", double45 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) 'a', (double) (byte) 100);
        double double9 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getIntercept();
        long long4 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getSlopeStdErr();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSlope();
        double double12 = simpleRegression0.predict(237.8600243518896d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getIntercept();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData((-0.9999999999999838d), (double) (-1));
        double double14 = simpleRegression0.getIntercept();
        double double16 = simpleRegression0.predict((double) (byte) -1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(99.99999999999999d, 18.28564393939351d);
        double double15 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData((double) 0.0f, 237.8600243518896d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        double double58 = simpleRegression0.getIntercept();
        double double59 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double61 = simpleRegression0.getSlopeConfidenceInterval(420.0059721406144d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.9999999999999838d) + "'", double58 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.8189894035458565E-12d + "'", double59 == 1.8189894035458565E-12d);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getTotalSumSquares();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getIntercept();
        double double12 = simpleRegression0.predict(9216.000000000002d);
        double double13 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval(4.492039526641522E-8d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getIntercept();
        double double17 = simpleRegression0.predict((double) (short) -1);
        long long18 = simpleRegression0.getN();
        double double19 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData(1.6536267304962332E-13d, 38.189393939393085d);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = simpleRegression0.getSlopeConfidenceInterval(466051.23966942145d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getSumSquaredErrors();
        double double5 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(Double.NaN, (double) 7L);
        double double10 = simpleRegression0.predict((double) 10L);
        double double12 = simpleRegression0.predict(5000.0d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        long long15 = simpleRegression0.getN();
        double double16 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getRSquare();
        double double20 = simpleRegression17.getTotalSumSquares();
        double double21 = simpleRegression17.getInterceptStdErr();
        double double22 = simpleRegression17.getRegressionSumSquares();
        double double23 = simpleRegression17.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression24 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long25 = simpleRegression24.getN();
        double double26 = simpleRegression24.getSumSquaredErrors();
        double double28 = simpleRegression24.predict((double) 10L);
        double double29 = simpleRegression24.getIntercept();
        double double30 = simpleRegression24.getRegressionSumSquares();
        long long31 = simpleRegression24.getN();
        double double32 = simpleRegression24.getR();
        double double33 = simpleRegression24.getSlope();
        double double34 = simpleRegression24.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression35 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long36 = simpleRegression35.getN();
        double double37 = simpleRegression35.getSumSquaredErrors();
        double double38 = simpleRegression35.getRegressionSumSquares();
        simpleRegression35.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        simpleRegression42.addData((double) (byte) 100, (double) 100.0f);
        double double52 = simpleRegression42.predict((double) 100L);
        double double53 = simpleRegression42.getR();
        double[] doubleArray56 = new double[] { 100L, 100.0d };
        double[] doubleArray59 = new double[] { 100L, 100.0d };
        double[] doubleArray62 = new double[] { 100L, 100.0d };
        double[] doubleArray65 = new double[] { 100L, 100.0d };
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[][] doubleArray72 = new double[][] { doubleArray56, doubleArray59, doubleArray62, doubleArray65, doubleArray68, doubleArray71 };
        simpleRegression42.addData(doubleArray72);
        simpleRegression35.addData(doubleArray72);
        double double75 = simpleRegression35.getRSquare();
        double double76 = simpleRegression35.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression77 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long78 = simpleRegression77.getN();
        double double79 = simpleRegression77.getSumSquaredErrors();
        double double81 = simpleRegression77.predict((double) 10L);
        double double82 = simpleRegression77.getIntercept();
        double double83 = simpleRegression77.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression84 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long85 = simpleRegression84.getN();
        double double86 = simpleRegression84.getSumSquaredErrors();
        long long87 = simpleRegression84.getN();
        long long88 = simpleRegression84.getN();
        double[][] doubleArray89 = new double[][] {};
        simpleRegression84.addData(doubleArray89);
        simpleRegression77.addData(doubleArray89);
        simpleRegression35.addData(doubleArray89);
        simpleRegression24.addData(doubleArray89);
        simpleRegression17.addData(doubleArray89);
        simpleRegression0.addData(doubleArray89);
        double double96 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.9999999999999998d + "'", double75 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.9999999999999999d + "'", double76 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression40 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long41 = simpleRegression40.getN();
        double double42 = simpleRegression40.getSumSquaredErrors();
        double double44 = simpleRegression40.predict((double) 10L);
        double double45 = simpleRegression40.getIntercept();
        double double46 = simpleRegression40.getRegressionSumSquares();
        long long47 = simpleRegression40.getN();
        double double48 = simpleRegression40.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        simpleRegression49.addData((double) (byte) 100, (double) 100.0f);
        double double59 = simpleRegression49.predict((double) 100L);
        double double60 = simpleRegression49.getR();
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[] doubleArray66 = new double[] { 100L, 100.0d };
        double[] doubleArray69 = new double[] { 100L, 100.0d };
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[][] doubleArray79 = new double[][] { doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        simpleRegression49.addData(doubleArray79);
        simpleRegression40.addData(doubleArray79);
        simpleRegression0.addData(doubleArray79);
        double double83 = simpleRegression0.getRegressionSumSquares();
        double double84 = simpleRegression0.getSumSquaredErrors();
        double double85 = simpleRegression0.getInterceptStdErr();
        double double86 = simpleRegression0.getMeanSquareError();
        long long87 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 9416.307692307693d + "'", double83 == 9416.307692307693d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.8189894035458565E-12d + "'", double84 == 1.8189894035458565E-12d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 4.066480948555191E-7d + "'", double85 == 4.066480948555191E-7d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.6536267304962332E-13d + "'", double86 == 1.6536267304962332E-13d);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 13L + "'", long87 == 13L);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getSlope();
        double double42 = simpleRegression0.predict((double) 3L);
        double double43 = simpleRegression0.getMeanSquareError();
        double double44 = simpleRegression0.getRSquare();
        long long45 = simpleRegression0.getN();
        double double46 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0099999999999998d + "'", double40 == 1.0099999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 2.0300000000000153d + "'", double42 == 2.0300000000000153d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 3.637978807091713E-13d + "'", double43 == 3.637978807091713E-13d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.9999999999999998d + "'", double44 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 7L + "'", long45 == 7L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 6.514835844650013E-9d + "'", double46 == 6.514835844650013E-9d);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getRegressionSumSquares();
        double double13 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.getR();
        simpleRegression0.clear();
        double double17 = simpleRegression0.predict(1.0099999999999998d);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSlopeConfidenceInterval(6.031565971695669E-7d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.predict((double) 2L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        simpleRegression0.clear();
        double double8 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.predict((-0.9999999999999838d));
        double double11 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        double double5 = simpleRegression0.getInterceptStdErr();
        double double6 = simpleRegression0.getMeanSquareError();
        java.lang.Class<?> wildcardClass7 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(1.0d, Double.NaN);
        double double14 = simpleRegression0.getSlopeStdErr();
        double double15 = simpleRegression0.getSlopeStdErr();
        double double16 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSlopeConfidenceInterval(237.8600243518896d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        double double51 = simpleRegression45.getRegressionSumSquares();
        long long52 = simpleRegression45.getN();
        double double53 = simpleRegression45.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        simpleRegression54.addData((double) (byte) 100, (double) 100.0f);
        double double64 = simpleRegression54.predict((double) 100L);
        double double65 = simpleRegression54.getR();
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        simpleRegression54.addData(doubleArray84);
        simpleRegression45.addData(doubleArray84);
        simpleRegression5.addData(doubleArray84);
        simpleRegression0.addData(doubleArray84);
        double double89 = simpleRegression0.getRSquare();
        double double90 = simpleRegression0.getIntercept();
        double double91 = simpleRegression0.getTotalSumSquares();
        double double92 = simpleRegression0.getRegressionSumSquares();
        double double93 = simpleRegression0.getInterceptStdErr();
        double double95 = simpleRegression0.predict(0.0d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 100.0d + "'", double90 == 100.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 100.0d + "'", double95 == 100.0d);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(Double.NaN, (double) 7L);
        double double9 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, 0.6812154343391408d);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression4 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long5 = simpleRegression4.getN();
        double double6 = simpleRegression4.getSumSquaredErrors();
        double double8 = simpleRegression4.predict((double) 10L);
        double double9 = simpleRegression4.getIntercept();
        simpleRegression4.addData((double) (byte) 100, (double) 100.0f);
        double double14 = simpleRegression4.predict((double) 100L);
        double double15 = simpleRegression4.getMeanSquareError();
        long long16 = simpleRegression4.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getRSquare();
        double double20 = simpleRegression17.getTotalSumSquares();
        double[] doubleArray25 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray30 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray31 = new double[][] { doubleArray25, doubleArray30 };
        simpleRegression17.addData(doubleArray31);
        simpleRegression4.addData(doubleArray31);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        long long37 = simpleRegression34.getN();
        long long38 = simpleRegression34.getN();
        double[][] doubleArray39 = new double[][] {};
        simpleRegression34.addData(doubleArray39);
        simpleRegression4.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        double double43 = simpleRegression0.getR();
        java.lang.Class<?> wildcardClass44 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        simpleRegression0.addData(1.8189894035458565E-12d, 0.0d);
        double double53 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.6454972243678946d + "'", double53 == 0.6454972243678946d);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getRSquare();
        long long12 = simpleRegression0.getN();
        double double14 = simpleRegression0.predict((double) 10L);
        double double15 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData((-0.9999999999981628d), 24.5d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getRegressionSumSquares();
        double double17 = simpleRegression0.getSlopeStdErr();
        double double18 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData((double) 1.0f, 2.314305586860937d);
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getRSquare();
        double double12 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        double double42 = simpleRegression0.getRSquare();
        double double43 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double45 = simpleRegression0.getSlopeConfidenceInterval(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9999999999999998d + "'", double42 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.9999999999999998d + "'", double43 == 0.9999999999999998d);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getSlope();
        double double41 = simpleRegression0.getRegressionSumSquares();
        double double42 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0099999999999998d + "'", double40 == 1.0099999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 8743.714285714283d + "'", double41 == 8743.714285714283d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9999999999999999d + "'", double42 == 0.9999999999999999d);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        long long50 = simpleRegression0.getN();
        long long51 = simpleRegression0.getN();
        double double52 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 6L + "'", long50 == 6L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 6L + "'", long51 == 6L);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        simpleRegression0.addData((double) (byte) 1, 1.8189894035458565E-12d);
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getSumSquaredErrors();
        double double13 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getSlope();
        double double12 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getSlope();
        long long13 = simpleRegression0.getN();
        double double14 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double4 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getRegressionSumSquares();
        double double17 = simpleRegression0.getSlopeStdErr();
        double double18 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getIntercept();
        double double16 = simpleRegression0.predict(8571.428571428569d);
        double double17 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        simpleRegression0.addData(0.0d, (double) ' ');
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression47 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long48 = simpleRegression47.getN();
        double double49 = simpleRegression47.getSumSquaredErrors();
        double double51 = simpleRegression47.predict((double) 10L);
        double double52 = simpleRegression47.getIntercept();
        double double53 = simpleRegression47.getRegressionSumSquares();
        double double54 = simpleRegression47.getSumSquaredErrors();
        double double55 = simpleRegression47.getMeanSquareError();
        double double56 = simpleRegression47.getRegressionSumSquares();
        double double57 = simpleRegression47.getSumSquaredErrors();
        double[] doubleArray61 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray65 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray69 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray73 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray77 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray81 = new double[] { (byte) 1, 0L, 'a' };
        double[][] doubleArray82 = new double[][] { doubleArray61, doubleArray65, doubleArray69, doubleArray73, doubleArray77, doubleArray81 };
        simpleRegression47.addData(doubleArray82);
        simpleRegression0.addData(doubleArray82);
        double double85 = simpleRegression0.getIntercept();
        double double86 = simpleRegression0.getSlopeConfidenceInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 3.1802735762866683d + "'", double85 == 3.1802735762866683d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.1055580249261676d + "'", double86 == 0.1055580249261676d);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getInterceptStdErr();
        double double6 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = simpleRegression0.getSlopeConfidenceInterval(3.732383556975903d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.predict(20.57675335994694d);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getSumSquaredErrors();
        double double12 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        double double4 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.addData((-3.0d), (double) 100L);
        double double8 = simpleRegression0.getTotalSumSquares();
        double double9 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.predict((double) (byte) 1);
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.getSlope();
        double double17 = simpleRegression0.getTotalSumSquares();
        double double18 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression19 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long20 = simpleRegression19.getN();
        double double21 = simpleRegression19.getSumSquaredErrors();
        double double23 = simpleRegression19.predict((double) 10L);
        double double24 = simpleRegression19.getIntercept();
        double double25 = simpleRegression19.getRegressionSumSquares();
        long long26 = simpleRegression19.getN();
        double double27 = simpleRegression19.getR();
        double double28 = simpleRegression19.getSlope();
        double double29 = simpleRegression19.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression30 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long31 = simpleRegression30.getN();
        double double32 = simpleRegression30.getSumSquaredErrors();
        double double34 = simpleRegression30.predict((double) 10L);
        double double35 = simpleRegression30.getIntercept();
        simpleRegression30.addData((double) (byte) 100, (double) 100.0f);
        double double40 = simpleRegression30.predict((double) 100L);
        double double41 = simpleRegression30.getMeanSquareError();
        long long42 = simpleRegression30.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression43 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long44 = simpleRegression43.getN();
        double double45 = simpleRegression43.getSumSquaredErrors();
        double double47 = simpleRegression43.predict((double) 10L);
        double double48 = simpleRegression43.getIntercept();
        simpleRegression43.addData((double) (byte) 100, (double) 100.0f);
        double double53 = simpleRegression43.predict((double) 100L);
        double double54 = simpleRegression43.getMeanSquareError();
        long long55 = simpleRegression43.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression56 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long57 = simpleRegression56.getN();
        double double58 = simpleRegression56.getRSquare();
        double double59 = simpleRegression56.getTotalSumSquares();
        double[] doubleArray64 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray69 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray70 = new double[][] { doubleArray64, doubleArray69 };
        simpleRegression56.addData(doubleArray70);
        simpleRegression43.addData(doubleArray70);
        simpleRegression30.addData(doubleArray70);
        simpleRegression19.addData(doubleArray70);
        simpleRegression0.addData(doubleArray70);
        java.lang.Class<?> wildcardClass76 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getRSquare();
        double double8 = simpleRegression0.getSumSquaredErrors();
        double double9 = simpleRegression0.getRSquare();
        long long10 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        long long4 = simpleRegression0.getN();
        java.lang.Class<?> wildcardClass5 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getIntercept();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.predict((double) (short) 1);
        simpleRegression0.clear();
        simpleRegression0.addData((double) 13L, Double.NaN);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.predict((double) 0);
        double double14 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = simpleRegression0.getSlopeConfidenceInterval(0.6454972243678946d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double10 = simpleRegression7.getRegressionSumSquares();
        simpleRegression7.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression14 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long15 = simpleRegression14.getN();
        double double16 = simpleRegression14.getSumSquaredErrors();
        double double18 = simpleRegression14.predict((double) 10L);
        double double19 = simpleRegression14.getIntercept();
        simpleRegression14.addData((double) (byte) 100, (double) 100.0f);
        double double24 = simpleRegression14.predict((double) 100L);
        double double25 = simpleRegression14.getR();
        double[] doubleArray28 = new double[] { 100L, 100.0d };
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[][] doubleArray44 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        simpleRegression14.addData(doubleArray44);
        simpleRegression7.addData(doubleArray44);
        simpleRegression0.addData(doubleArray44);
        simpleRegression0.clear();
        double double49 = simpleRegression0.getInterceptStdErr();
        double double50 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double[] doubleArray13 = new double[] { 1L, ' ' };
        double[] doubleArray16 = new double[] { 1L, ' ' };
        double[] doubleArray19 = new double[] { 1L, ' ' };
        double[] doubleArray22 = new double[] { 1L, ' ' };
        double[] doubleArray25 = new double[] { 1L, ' ' };
        double[] doubleArray28 = new double[] { 1L, ' ' };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        simpleRegression0.addData(doubleArray29);
        double double31 = simpleRegression0.getSlopeConfidenceInterval();
        simpleRegression0.clear();
        double double33 = simpleRegression0.getSumSquaredErrors();
        double double34 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSumSquaredErrors();
        double double5 = simpleRegression0.getRSquare();
        double double6 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSlopeConfidenceInterval(0.49525318089709414d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression8 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long9 = simpleRegression8.getN();
        double double10 = simpleRegression8.getSumSquaredErrors();
        double double12 = simpleRegression8.predict((double) 10L);
        double double13 = simpleRegression8.getIntercept();
        double double14 = simpleRegression8.getRegressionSumSquares();
        long long15 = simpleRegression8.getN();
        double double16 = simpleRegression8.getR();
        double double17 = simpleRegression8.getSlope();
        double double18 = simpleRegression8.getMeanSquareError();
        long long19 = simpleRegression8.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression20 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long21 = simpleRegression20.getN();
        double double22 = simpleRegression20.getSumSquaredErrors();
        double double24 = simpleRegression20.predict((double) 10L);
        double double25 = simpleRegression20.getIntercept();
        double double26 = simpleRegression20.getRegressionSumSquares();
        long long27 = simpleRegression20.getN();
        double double28 = simpleRegression20.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression29 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long30 = simpleRegression29.getN();
        double double31 = simpleRegression29.getSumSquaredErrors();
        double double33 = simpleRegression29.predict((double) 10L);
        double double34 = simpleRegression29.getIntercept();
        double double35 = simpleRegression29.getRegressionSumSquares();
        long long36 = simpleRegression29.getN();
        double double37 = simpleRegression29.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression38 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long39 = simpleRegression38.getN();
        double double40 = simpleRegression38.getSumSquaredErrors();
        double double42 = simpleRegression38.predict((double) 10L);
        double double43 = simpleRegression38.getIntercept();
        simpleRegression38.addData((double) (byte) 100, (double) 100.0f);
        double double48 = simpleRegression38.predict((double) 100L);
        double double49 = simpleRegression38.getR();
        double[] doubleArray52 = new double[] { 100L, 100.0d };
        double[] doubleArray55 = new double[] { 100L, 100.0d };
        double[] doubleArray58 = new double[] { 100L, 100.0d };
        double[] doubleArray61 = new double[] { 100L, 100.0d };
        double[] doubleArray64 = new double[] { 100L, 100.0d };
        double[] doubleArray67 = new double[] { 100L, 100.0d };
        double[][] doubleArray68 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        simpleRegression38.addData(doubleArray68);
        simpleRegression29.addData(doubleArray68);
        simpleRegression20.addData(doubleArray68);
        simpleRegression8.addData(doubleArray68);
        simpleRegression0.addData(doubleArray68);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData((double) 0, 0.0d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSlope();
        double double13 = simpleRegression0.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression14 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long15 = simpleRegression14.getN();
        long long16 = simpleRegression14.getN();
        double double17 = simpleRegression14.getRSquare();
        long long18 = simpleRegression14.getN();
        long long19 = simpleRegression14.getN();
        double double20 = simpleRegression14.getSlope();
        double double21 = simpleRegression14.getInterceptStdErr();
        double double22 = simpleRegression14.getR();
        simpleRegression14.addData((double) (byte) -1, (double) 3L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getSumSquaredErrors();
        double double29 = simpleRegression26.getRegressionSumSquares();
        double double30 = simpleRegression26.getR();
        simpleRegression26.addData(1.0099999999999998d, (double) ' ');
        double double34 = simpleRegression26.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression35 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long36 = simpleRegression35.getN();
        double double37 = simpleRegression35.getSumSquaredErrors();
        double double39 = simpleRegression35.predict((double) 10L);
        double double40 = simpleRegression35.getIntercept();
        simpleRegression35.addData((double) (byte) 100, (double) 100.0f);
        double double45 = simpleRegression35.predict((double) 100L);
        double double46 = simpleRegression35.getMeanSquareError();
        long long47 = simpleRegression35.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression48 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long49 = simpleRegression48.getN();
        double double50 = simpleRegression48.getSumSquaredErrors();
        double double52 = simpleRegression48.predict((double) 10L);
        double double53 = simpleRegression48.getIntercept();
        simpleRegression48.addData((double) (byte) 100, (double) 100.0f);
        double double58 = simpleRegression48.predict((double) 100L);
        double double59 = simpleRegression48.getMeanSquareError();
        long long60 = simpleRegression48.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression61 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long62 = simpleRegression61.getN();
        double double63 = simpleRegression61.getRSquare();
        double double64 = simpleRegression61.getTotalSumSquares();
        double[] doubleArray69 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray74 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray75 = new double[][] { doubleArray69, doubleArray74 };
        simpleRegression61.addData(doubleArray75);
        simpleRegression48.addData(doubleArray75);
        simpleRegression35.addData(doubleArray75);
        simpleRegression26.addData(doubleArray75);
        simpleRegression14.addData(doubleArray75);
        simpleRegression0.addData(doubleArray75);
        long long82 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 2L + "'", long82 == 2L);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        double double51 = simpleRegression45.getRegressionSumSquares();
        long long52 = simpleRegression45.getN();
        double double53 = simpleRegression45.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        simpleRegression54.addData((double) (byte) 100, (double) 100.0f);
        double double64 = simpleRegression54.predict((double) 100L);
        double double65 = simpleRegression54.getR();
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        simpleRegression54.addData(doubleArray84);
        simpleRegression45.addData(doubleArray84);
        simpleRegression5.addData(doubleArray84);
        simpleRegression0.addData(doubleArray84);
        double double89 = simpleRegression0.getRSquare();
        double double90 = simpleRegression0.getTotalSumSquares();
        double double91 = simpleRegression0.getSumSquaredErrors();
        long long92 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 6L + "'", long92 == 6L);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double19 = simpleRegression15.predict((double) 10L);
        double double20 = simpleRegression15.getIntercept();
        simpleRegression15.addData((double) (byte) 100, (double) 100.0f);
        double double24 = simpleRegression15.getIntercept();
        double double25 = simpleRegression15.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getSumSquaredErrors();
        double double30 = simpleRegression26.predict((double) 10L);
        double double31 = simpleRegression26.getIntercept();
        simpleRegression26.addData((double) (byte) 100, (double) 100.0f);
        double double36 = simpleRegression26.predict((double) 100L);
        double double37 = simpleRegression26.getMeanSquareError();
        long long38 = simpleRegression26.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getRSquare();
        double double42 = simpleRegression39.getTotalSumSquares();
        double[] doubleArray47 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray53 = new double[][] { doubleArray47, doubleArray52 };
        simpleRegression39.addData(doubleArray53);
        simpleRegression26.addData(doubleArray53);
        simpleRegression15.addData(doubleArray53);
        simpleRegression0.addData(doubleArray53);
        double double58 = simpleRegression0.getRegressionSumSquares();
        double double59 = simpleRegression0.getRegressionSumSquares();
        double double61 = simpleRegression0.predict((double) 6L);
        double double62 = simpleRegression0.getSumSquaredErrors();
        double double63 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        double double17 = simpleRegression0.getTotalSumSquares();
        double double18 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        double double9 = simpleRegression0.predict(0.0d);
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getIntercept();
        long long7 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSlopeConfidenceInterval((double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSumSquaredErrors();
        double double10 = simpleRegression0.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        long long14 = simpleRegression11.getN();
        double double15 = simpleRegression11.getTotalSumSquares();
        double double16 = simpleRegression11.getSlopeStdErr();
        double double17 = simpleRegression11.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        double double24 = simpleRegression18.getRegressionSumSquares();
        long long25 = simpleRegression18.getN();
        double double26 = simpleRegression18.getR();
        double double27 = simpleRegression18.getSlope();
        double double28 = simpleRegression18.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression29 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long30 = simpleRegression29.getN();
        double double31 = simpleRegression29.getSumSquaredErrors();
        double double33 = simpleRegression29.predict((double) 10L);
        double double34 = simpleRegression29.getIntercept();
        simpleRegression29.addData((double) (byte) 100, (double) 100.0f);
        double double39 = simpleRegression29.predict((double) 100L);
        double double40 = simpleRegression29.getMeanSquareError();
        long long41 = simpleRegression29.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        simpleRegression42.addData((double) (byte) 100, (double) 100.0f);
        double double52 = simpleRegression42.predict((double) 100L);
        double double53 = simpleRegression42.getMeanSquareError();
        long long54 = simpleRegression42.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression55 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long56 = simpleRegression55.getN();
        double double57 = simpleRegression55.getRSquare();
        double double58 = simpleRegression55.getTotalSumSquares();
        double[] doubleArray63 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray68 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray69 = new double[][] { doubleArray63, doubleArray68 };
        simpleRegression55.addData(doubleArray69);
        simpleRegression42.addData(doubleArray69);
        simpleRegression29.addData(doubleArray69);
        simpleRegression18.addData(doubleArray69);
        simpleRegression11.addData(doubleArray69);
        simpleRegression0.addData(doubleArray69);
        double double76 = simpleRegression0.getRegressionSumSquares();
        double double77 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        simpleRegression0.addData((double) (short) -1, (double) 0L);
        double double34 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double36 = simpleRegression0.getSlopeConfidenceInterval(2.0300000000000153d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 964.4545454545455d + "'", double34 == 964.4545454545455d);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getTotalSumSquares();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSlopeStdErr();
        long long10 = simpleRegression0.getN();
        double double12 = simpleRegression0.predict(0.0d);
        double double13 = simpleRegression0.getR();
        double double14 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        double double2 = simpleRegression0.getRegressionSumSquares();
        double double3 = simpleRegression0.getR();
        double double4 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(0.9999999999999998d, (double) 100L);
        double double9 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double11 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval(1.1875d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getMeanSquareError();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression6 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double7 = simpleRegression6.getR();
        double double8 = simpleRegression6.getRegressionSumSquares();
        double double9 = simpleRegression6.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double14 = simpleRegression10.predict((double) 10L);
        double double15 = simpleRegression10.getIntercept();
        double double16 = simpleRegression10.getRegressionSumSquares();
        long long17 = simpleRegression10.getN();
        double double18 = simpleRegression10.getRSquare();
        double double19 = simpleRegression10.getRSquare();
        double double20 = simpleRegression10.getInterceptStdErr();
        double double21 = simpleRegression10.getTotalSumSquares();
        simpleRegression10.addData((double) 10.0f, (double) (short) 10);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long26 = simpleRegression25.getN();
        double double27 = simpleRegression25.getSumSquaredErrors();
        long long28 = simpleRegression25.getN();
        long long29 = simpleRegression25.getN();
        double[][] doubleArray30 = new double[][] {};
        simpleRegression25.addData(doubleArray30);
        simpleRegression10.addData(doubleArray30);
        simpleRegression6.addData(doubleArray30);
        simpleRegression0.addData(doubleArray30);
        double double35 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        long long4 = simpleRegression0.getN();
        long long5 = simpleRegression0.getN();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.predict((double) (byte) 1);
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.getR();
        simpleRegression0.clear();
        double double18 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = simpleRegression0.getSlopeConfidenceInterval(964.4545454545455d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getR();
        simpleRegression0.addData(797.2971376003962d, (-3.0d));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.predict((double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getRegressionSumSquares();
        double double13 = simpleRegression0.getR();
        double double14 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getTotalSumSquares();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getIntercept();
        double double12 = simpleRegression0.predict(9216.000000000002d);
        double double13 = simpleRegression0.getIntercept();
        double double14 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSlopeConfidenceInterval((-200.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double12 = simpleRegression0.getR();
        double double13 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double16 = simpleRegression0.predict((-47.0d));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        long long13 = simpleRegression0.getN();
        double double14 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.predict(0.5366294777987983d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getTotalSumSquares();
        double double7 = simpleRegression0.getSlope();
        double double8 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        long long42 = simpleRegression0.getN();
        double double43 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData((-0.2584033087426901d), (double) (short) 1);
        double double47 = simpleRegression0.getRegressionSumSquares();
        double double48 = simpleRegression0.getSlope();
        java.lang.Class<?> wildcardClass49 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6L + "'", long42 == 6L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 3513.007091486856d + "'", double47 == 3513.007091486856d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.49525318089709414d + "'", double48 == 0.49525318089709414d);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getSumSquaredErrors();
        double double9 = simpleRegression0.getInterceptStdErr();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getSumSquaredErrors();
        double double12 = simpleRegression0.getMeanSquareError();
        double double13 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getTotalSumSquares();
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getSumSquaredErrors();
        double double17 = simpleRegression13.predict((double) 10L);
        double double18 = simpleRegression13.getIntercept();
        simpleRegression13.addData((double) (byte) 100, (double) 100.0f);
        double double23 = simpleRegression13.predict((double) 100L);
        double double24 = simpleRegression13.getMeanSquareError();
        long long25 = simpleRegression13.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getRSquare();
        double double29 = simpleRegression26.getTotalSumSquares();
        double[] doubleArray34 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray39 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray40 = new double[][] { doubleArray34, doubleArray39 };
        simpleRegression26.addData(doubleArray40);
        simpleRegression13.addData(doubleArray40);
        simpleRegression0.addData(doubleArray40);
        simpleRegression0.addData(6734.0d, (double) (short) -1);
        double double47 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2.9557395754188084E-4d + "'", double47 == 2.9557395754188084E-4d);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSumSquaredErrors();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.predict(378.6287878787878d);
        double double14 = simpleRegression0.predict(0.5812116291192775d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        double double42 = simpleRegression0.getRSquare();
        double double43 = simpleRegression0.getSignificance();
        double double45 = simpleRegression0.predict((double) (-1));
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double48 = simpleRegression0.getSlopeConfidenceInterval(3500.357122929351d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.9999999999999998d + "'", double42 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-2.009999999999984d) + "'", double45 == (-2.009999999999984d));
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getMeanSquareError();
        double double13 = simpleRegression0.getInterceptStdErr();
        double double14 = simpleRegression0.getInterceptStdErr();
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getSlope();
        long long12 = simpleRegression0.getN();
        double double14 = simpleRegression0.predict(0.23752863392368403d);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        simpleRegression0.clear();
        double double59 = simpleRegression0.getSlope();
        double double60 = simpleRegression0.getInterceptStdErr();
        double double61 = simpleRegression0.getSumSquaredErrors();
        long long62 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double63 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        double double18 = simpleRegression12.getRegressionSumSquares();
        long long19 = simpleRegression12.getN();
        simpleRegression12.clear();
        double double21 = simpleRegression12.getSlopeStdErr();
        double double22 = simpleRegression12.getMeanSquareError();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression23 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long24 = simpleRegression23.getN();
        double double25 = simpleRegression23.getSumSquaredErrors();
        long long26 = simpleRegression23.getN();
        double double27 = simpleRegression23.getTotalSumSquares();
        double double28 = simpleRegression23.getSumSquaredErrors();
        simpleRegression23.addData(0.9999999999999998d, (double) 100L);
        double double33 = simpleRegression23.predict((double) (byte) 100);
        simpleRegression23.addData((double) 100.0f, 4802.0d);
        double double37 = simpleRegression23.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression38 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long39 = simpleRegression38.getN();
        double double40 = simpleRegression38.getSumSquaredErrors();
        double double41 = simpleRegression38.getMeanSquareError();
        double double42 = simpleRegression38.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression43 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long44 = simpleRegression43.getN();
        double double45 = simpleRegression43.getSumSquaredErrors();
        double double46 = simpleRegression43.getRegressionSumSquares();
        simpleRegression43.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression50 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long51 = simpleRegression50.getN();
        double double52 = simpleRegression50.getSumSquaredErrors();
        double double54 = simpleRegression50.predict((double) 10L);
        double double55 = simpleRegression50.getIntercept();
        simpleRegression50.addData((double) (byte) 100, (double) 100.0f);
        double double60 = simpleRegression50.predict((double) 100L);
        double double61 = simpleRegression50.getR();
        double[] doubleArray64 = new double[] { 100L, 100.0d };
        double[] doubleArray67 = new double[] { 100L, 100.0d };
        double[] doubleArray70 = new double[] { 100L, 100.0d };
        double[] doubleArray73 = new double[] { 100L, 100.0d };
        double[] doubleArray76 = new double[] { 100L, 100.0d };
        double[] doubleArray79 = new double[] { 100L, 100.0d };
        double[][] doubleArray80 = new double[][] { doubleArray64, doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79 };
        simpleRegression50.addData(doubleArray80);
        simpleRegression43.addData(doubleArray80);
        simpleRegression38.addData(doubleArray80);
        simpleRegression23.addData(doubleArray80);
        simpleRegression12.addData(doubleArray80);
        simpleRegression0.addData(doubleArray80);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getR();
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        simpleRegression0.addData((double) 0L, (double) 'a');
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double15 = simpleRegression11.predict((double) 10L);
        double double16 = simpleRegression11.getIntercept();
        double double17 = simpleRegression11.getRegressionSumSquares();
        double double18 = simpleRegression11.getSumSquaredErrors();
        double double19 = simpleRegression11.getMeanSquareError();
        double double20 = simpleRegression11.getRegressionSumSquares();
        double double21 = simpleRegression11.getSumSquaredErrors();
        double[] doubleArray25 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray29 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray33 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray37 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray41 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray45 = new double[] { (byte) 1, 0L, 'a' };
        double[][] doubleArray46 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37, doubleArray41, doubleArray45 };
        simpleRegression11.addData(doubleArray46);
        simpleRegression0.addData(doubleArray46);
        double double49 = simpleRegression0.getSignificance();
        double double50 = simpleRegression0.getR();
        double double52 = simpleRegression0.predict((-200.0d));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.5366294777987983d + "'", double49 == 0.5366294777987983d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-0.2584033087426901d) + "'", double50 == (-0.2584033087426901d));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 563.4054054054055d + "'", double52 == 563.4054054054055d);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double4 = simpleRegression0.predict((double) (byte) 10);
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getRSquare();
        double double7 = simpleRegression0.getRSquare();
        double double8 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression40 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long41 = simpleRegression40.getN();
        double double42 = simpleRegression40.getSumSquaredErrors();
        double double44 = simpleRegression40.predict((double) 10L);
        double double45 = simpleRegression40.getIntercept();
        double double46 = simpleRegression40.getRegressionSumSquares();
        long long47 = simpleRegression40.getN();
        double double48 = simpleRegression40.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        simpleRegression49.addData((double) (byte) 100, (double) 100.0f);
        double double59 = simpleRegression49.predict((double) 100L);
        double double60 = simpleRegression49.getR();
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[] doubleArray66 = new double[] { 100L, 100.0d };
        double[] doubleArray69 = new double[] { 100L, 100.0d };
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[][] doubleArray79 = new double[][] { doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        simpleRegression49.addData(doubleArray79);
        simpleRegression40.addData(doubleArray79);
        simpleRegression0.addData(doubleArray79);
        double double83 = simpleRegression0.getRegressionSumSquares();
        double double84 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 9416.307692307693d + "'", double83 == 9416.307692307693d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.8189894035458565E-12d + "'", double84 == 1.8189894035458565E-12d);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double13 = simpleRegression10.getRegressionSumSquares();
        simpleRegression10.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression10.addData(doubleArray47);
        double double50 = simpleRegression10.getRegressionSumSquares();
        simpleRegression10.addData(3.637978807091713E-13d, 0.5d);
        double double54 = simpleRegression10.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression55 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long56 = simpleRegression55.getN();
        double double57 = simpleRegression55.getSumSquaredErrors();
        double double59 = simpleRegression55.predict((double) 10L);
        simpleRegression55.clear();
        double double61 = simpleRegression55.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression62 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long63 = simpleRegression62.getN();
        double double64 = simpleRegression62.getSumSquaredErrors();
        long long65 = simpleRegression62.getN();
        double double66 = simpleRegression62.getRSquare();
        double[] doubleArray71 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray76 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray81 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[][] doubleArray82 = new double[][] { doubleArray71, doubleArray76, doubleArray81 };
        simpleRegression62.addData(doubleArray82);
        simpleRegression55.addData(doubleArray82);
        simpleRegression10.addData(doubleArray82);
        simpleRegression0.addData(doubleArray82);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8743.714285714283d + "'", double50 == 8743.714285714283d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0035355339059384605d + "'", double54 == 0.0035355339059384605d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getSlopeStdErr();
        double double7 = simpleRegression0.getRegressionSumSquares();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.predict(0.9999999999999998d);
        long long14 = simpleRegression0.getN();
        double double15 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression8 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double9 = simpleRegression8.getSumSquaredErrors();
        double double10 = simpleRegression8.getTotalSumSquares();
        double double11 = simpleRegression8.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double15 = simpleRegression12.getRegressionSumSquares();
        simpleRegression12.addData(0.0d, (-1.0d));
        double double19 = simpleRegression12.getR();
        double double21 = simpleRegression12.predict(10.0d);
        double double23 = simpleRegression12.predict(100.0d);
        double double25 = simpleRegression12.predict((double) (short) 0);
        long long26 = simpleRegression12.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression27 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long28 = simpleRegression27.getN();
        double double29 = simpleRegression27.getSumSquaredErrors();
        double double31 = simpleRegression27.predict((double) 10L);
        double double32 = simpleRegression27.getIntercept();
        double double33 = simpleRegression27.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        long long37 = simpleRegression34.getN();
        long long38 = simpleRegression34.getN();
        double[][] doubleArray39 = new double[][] {};
        simpleRegression34.addData(doubleArray39);
        simpleRegression27.addData(doubleArray39);
        simpleRegression12.addData(doubleArray39);
        simpleRegression8.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        double double45 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        double double47 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getIntercept();
        double double15 = simpleRegression0.getInterceptStdErr();
        double double16 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double19 = simpleRegression0.predict(5000.0d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlope();
        double double12 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        double double2 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getTotalSumSquares();
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getRSquare();
        java.lang.Class<?> wildcardClass12 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double14 = simpleRegression13.getSumSquaredErrors();
        double double15 = simpleRegression13.getSumSquaredErrors();
        simpleRegression13.clear();
        simpleRegression13.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        long long21 = simpleRegression18.getN();
        double double22 = simpleRegression18.getRSquare();
        double[] doubleArray27 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray32 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray37 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[][] doubleArray38 = new double[][] { doubleArray27, doubleArray32, doubleArray37 };
        simpleRegression18.addData(doubleArray38);
        simpleRegression13.addData(doubleArray38);
        simpleRegression0.addData(doubleArray38);
        double double42 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 325.0d + "'", double42 == 325.0d);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData((double) 100, (double) 6L);
        double double13 = simpleRegression0.getSumSquaredErrors();
        double double14 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getIntercept();
        double double5 = simpleRegression0.getR();
        long long6 = simpleRegression0.getN();
        double double8 = simpleRegression0.predict((double) 8L);
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSlope();
        double double11 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSumSquaredErrors();
        double double5 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getTotalSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSlope();
        long long13 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getSumSquaredErrors();
        long long16 = simpleRegression13.getN();
        double double17 = simpleRegression13.getTotalSumSquares();
        double double18 = simpleRegression13.getSlopeStdErr();
        double double19 = simpleRegression13.getR();
        double double21 = simpleRegression13.predict((double) 100);
        double[] doubleArray28 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[] doubleArray35 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[][] doubleArray36 = new double[][] { doubleArray28, doubleArray35 };
        simpleRegression13.addData(doubleArray36);
        simpleRegression0.addData(doubleArray36);
        double double39 = simpleRegression0.getR();
        double double40 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double42 = simpleRegression0.getSlopeConfidenceInterval(1.6746918727301837E-8d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData((double) 1, 0.5d);
        simpleRegression0.addData(0.0d, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        double double17 = simpleRegression0.getSumSquaredErrors();
        long long18 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression19 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long20 = simpleRegression19.getN();
        double double21 = simpleRegression19.getRSquare();
        double double22 = simpleRegression19.getTotalSumSquares();
        double[] doubleArray27 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray32 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray33 = new double[][] { doubleArray27, doubleArray32 };
        simpleRegression19.addData(doubleArray33);
        simpleRegression0.addData(doubleArray33);
        double double37 = simpleRegression0.predict((double) (short) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(Double.NaN, (double) 7L);
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getTotalSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.predict(9416.307692307693d);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        double double20 = simpleRegression16.predict((double) 10L);
        double double21 = simpleRegression16.getIntercept();
        double double22 = simpleRegression16.getRegressionSumSquares();
        long long23 = simpleRegression16.getN();
        double double24 = simpleRegression16.getR();
        double double25 = simpleRegression16.getSlope();
        double double26 = simpleRegression16.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression27 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long28 = simpleRegression27.getN();
        double double29 = simpleRegression27.getSumSquaredErrors();
        double double30 = simpleRegression27.getRegressionSumSquares();
        simpleRegression27.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        double double38 = simpleRegression34.predict((double) 10L);
        double double39 = simpleRegression34.getIntercept();
        simpleRegression34.addData((double) (byte) 100, (double) 100.0f);
        double double44 = simpleRegression34.predict((double) 100L);
        double double45 = simpleRegression34.getR();
        double[] doubleArray48 = new double[] { 100L, 100.0d };
        double[] doubleArray51 = new double[] { 100L, 100.0d };
        double[] doubleArray54 = new double[] { 100L, 100.0d };
        double[] doubleArray57 = new double[] { 100L, 100.0d };
        double[] doubleArray60 = new double[] { 100L, 100.0d };
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        simpleRegression34.addData(doubleArray64);
        simpleRegression27.addData(doubleArray64);
        double double67 = simpleRegression27.getRSquare();
        double double68 = simpleRegression27.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression69 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long70 = simpleRegression69.getN();
        double double71 = simpleRegression69.getSumSquaredErrors();
        double double73 = simpleRegression69.predict((double) 10L);
        double double74 = simpleRegression69.getIntercept();
        double double75 = simpleRegression69.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression76 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long77 = simpleRegression76.getN();
        double double78 = simpleRegression76.getSumSquaredErrors();
        long long79 = simpleRegression76.getN();
        long long80 = simpleRegression76.getN();
        double[][] doubleArray81 = new double[][] {};
        simpleRegression76.addData(doubleArray81);
        simpleRegression69.addData(doubleArray81);
        simpleRegression27.addData(doubleArray81);
        simpleRegression16.addData(doubleArray81);
        simpleRegression0.addData(doubleArray81);
        java.lang.Class<?> wildcardClass87 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.9999999999999998d + "'", double67 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.9999999999999999d + "'", double68 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getMeanSquareError();
        double double4 = simpleRegression0.getSumSquaredErrors();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getTotalSumSquares();
        double double7 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.addData((-684.9318181818182d), (double) 100L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        long long18 = simpleRegression16.getN();
        double double19 = simpleRegression16.getRSquare();
        simpleRegression16.clear();
        double double21 = simpleRegression16.getSlope();
        double double22 = simpleRegression16.getMeanSquareError();
        simpleRegression16.clear();
        long long24 = simpleRegression16.getN();
        double double25 = simpleRegression16.getIntercept();
        double double26 = simpleRegression16.getR();
        double double27 = simpleRegression16.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression28 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long29 = simpleRegression28.getN();
        double double30 = simpleRegression28.getSumSquaredErrors();
        long long31 = simpleRegression28.getN();
        double double32 = simpleRegression28.getTotalSumSquares();
        double double33 = simpleRegression28.getSlopeStdErr();
        double double34 = simpleRegression28.getR();
        double double36 = simpleRegression28.predict((double) 100);
        double[] doubleArray43 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[] doubleArray50 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[][] doubleArray51 = new double[][] { doubleArray43, doubleArray50 };
        simpleRegression28.addData(doubleArray51);
        simpleRegression16.addData(doubleArray51);
        simpleRegression0.addData(doubleArray51);
        double double55 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.4549315102591258d + "'", double55 == 0.4549315102591258d);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        double double42 = simpleRegression0.getInterceptStdErr();
        double double43 = simpleRegression0.getSignificance();
        double double44 = simpleRegression0.getInterceptStdErr();
        double double46 = simpleRegression0.predict((double) (short) -1);
        double double47 = simpleRegression0.getSumSquaredErrors();
        double double48 = simpleRegression0.getInterceptStdErr();
        double double49 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 6.031565971695669E-7d + "'", double42 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 6.031565971695669E-7d + "'", double44 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-2.009999999999984d) + "'", double46 == (-2.009999999999984d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.8189894035458565E-12d + "'", double47 == 1.8189894035458565E-12d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 6.031565971695669E-7d + "'", double48 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        double double12 = simpleRegression0.predict((double) 13L);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getRegressionSumSquares();
        double double8 = simpleRegression0.getRegressionSumSquares();
        long long9 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.predict(182.0d);
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getR();
        double double6 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRegressionSumSquares();
        double double41 = simpleRegression0.getSlopeConfidenceInterval();
        // The following exception was thrown during execution in test generation
        try {
            double double43 = simpleRegression0.getSlopeConfidenceInterval(4783.782825602378d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 8743.714285714283d + "'", double40 == 8743.714285714283d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.6746918727301837E-8d + "'", double41 == 1.6746918727301837E-8d);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getIntercept();
        double double8 = simpleRegression0.getInterceptStdErr();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double12 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getTotalSumSquares();
        long long14 = simpleRegression0.getN();
        double double15 = simpleRegression0.getSlopeStdErr();
        double double16 = simpleRegression0.getTotalSumSquares();
        double double17 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getTotalSumSquares();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSlopeStdErr();
        long long10 = simpleRegression0.getN();
        double double12 = simpleRegression0.predict(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        simpleRegression0.addData((double) (short) 0, (double) (byte) 100);
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getIntercept();
        double double12 = simpleRegression0.getIntercept();
        simpleRegression0.addData(0.0d, 0.0d);
        double double17 = simpleRegression0.predict(4.492039526641522E-8d);
        java.lang.Class<?> wildcardClass18 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getIntercept();
        double double8 = simpleRegression0.getInterceptStdErr();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        long long12 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getIntercept();
        java.lang.Class<?> wildcardClass6 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        simpleRegression0.addData((double) 0L, (double) 'a');
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double15 = simpleRegression11.predict((double) 10L);
        double double16 = simpleRegression11.getIntercept();
        double double17 = simpleRegression11.getRegressionSumSquares();
        double double18 = simpleRegression11.getSumSquaredErrors();
        double double19 = simpleRegression11.getMeanSquareError();
        double double20 = simpleRegression11.getRegressionSumSquares();
        double double21 = simpleRegression11.getSumSquaredErrors();
        double[] doubleArray25 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray29 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray33 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray37 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray41 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray45 = new double[] { (byte) 1, 0L, 'a' };
        double[][] doubleArray46 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37, doubleArray41, doubleArray45 };
        simpleRegression11.addData(doubleArray46);
        simpleRegression0.addData(doubleArray46);
        double double49 = simpleRegression0.getSignificance();
        double double50 = simpleRegression0.getR();
        double double51 = simpleRegression0.getRegressionSumSquares();
        java.lang.Class<?> wildcardClass52 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.5366294777987983d + "'", double49 == 0.5366294777987983d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-0.2584033087426901d) + "'", double50 == (-0.2584033087426901d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 551.4054054054056d + "'", double51 == 551.4054054054056d);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        simpleRegression0.clear();
        double double59 = simpleRegression0.getSlope();
        double double60 = simpleRegression0.getInterceptStdErr();
        double double61 = simpleRegression0.getSumSquaredErrors();
        long long62 = simpleRegression0.getN();
        java.lang.Class<?> wildcardClass63 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getR();
        long long12 = simpleRegression0.getN();
        double double13 = simpleRegression0.getR();
        double double14 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        long long31 = simpleRegression0.getN();
        double double32 = simpleRegression0.getR();
        double double33 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        simpleRegression0.clear();
        double double8 = simpleRegression0.getTotalSumSquares();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getRegressionSumSquares();
        java.lang.Class<?> wildcardClass11 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double13 = simpleRegression10.getMeanSquareError();
        double double14 = simpleRegression10.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double18 = simpleRegression15.getRegressionSumSquares();
        simpleRegression15.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression22 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long23 = simpleRegression22.getN();
        double double24 = simpleRegression22.getSumSquaredErrors();
        double double26 = simpleRegression22.predict((double) 10L);
        double double27 = simpleRegression22.getIntercept();
        simpleRegression22.addData((double) (byte) 100, (double) 100.0f);
        double double32 = simpleRegression22.predict((double) 100L);
        double double33 = simpleRegression22.getR();
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[] doubleArray39 = new double[] { 100L, 100.0d };
        double[] doubleArray42 = new double[] { 100L, 100.0d };
        double[] doubleArray45 = new double[] { 100L, 100.0d };
        double[] doubleArray48 = new double[] { 100L, 100.0d };
        double[] doubleArray51 = new double[] { 100L, 100.0d };
        double[][] doubleArray52 = new double[][] { doubleArray36, doubleArray39, doubleArray42, doubleArray45, doubleArray48, doubleArray51 };
        simpleRegression22.addData(doubleArray52);
        simpleRegression15.addData(doubleArray52);
        simpleRegression10.addData(doubleArray52);
        simpleRegression0.addData(doubleArray52);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getSlopeStdErr();
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getInterceptStdErr();
        double double10 = simpleRegression0.getIntercept();
        double double11 = simpleRegression0.getSlope();
        double double12 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlope();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.getInterceptStdErr();
        double double15 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) -1, (double) (-1L));
        double double14 = simpleRegression0.getSlope();
        double double15 = simpleRegression0.getR();
        java.lang.Class<?> wildcardClass16 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getSumSquaredErrors();
        double double13 = simpleRegression0.predict((-0.4567424242424144d));
        double double14 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        double double12 = simpleRegression0.predict((double) 13L);
        double double13 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.getRSquare();
        double double15 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        simpleRegression0.clear();
        double double59 = simpleRegression0.getRSquare();
        double double60 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double61 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        simpleRegression0.clear();
        double double45 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double46 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getMeanSquareError();
        long long11 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        double double18 = simpleRegression12.getRegressionSumSquares();
        long long19 = simpleRegression12.getN();
        double double20 = simpleRegression12.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression21 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long22 = simpleRegression21.getN();
        double double23 = simpleRegression21.getSumSquaredErrors();
        double double25 = simpleRegression21.predict((double) 10L);
        double double26 = simpleRegression21.getIntercept();
        double double27 = simpleRegression21.getRegressionSumSquares();
        long long28 = simpleRegression21.getN();
        double double29 = simpleRegression21.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression30 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long31 = simpleRegression30.getN();
        double double32 = simpleRegression30.getSumSquaredErrors();
        double double34 = simpleRegression30.predict((double) 10L);
        double double35 = simpleRegression30.getIntercept();
        simpleRegression30.addData((double) (byte) 100, (double) 100.0f);
        double double40 = simpleRegression30.predict((double) 100L);
        double double41 = simpleRegression30.getR();
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[] doubleArray50 = new double[] { 100L, 100.0d };
        double[] doubleArray53 = new double[] { 100L, 100.0d };
        double[] doubleArray56 = new double[] { 100L, 100.0d };
        double[] doubleArray59 = new double[] { 100L, 100.0d };
        double[][] doubleArray60 = new double[][] { doubleArray44, doubleArray47, doubleArray50, doubleArray53, doubleArray56, doubleArray59 };
        simpleRegression30.addData(doubleArray60);
        simpleRegression21.addData(doubleArray60);
        simpleRegression12.addData(doubleArray60);
        simpleRegression0.addData(doubleArray60);
        double double65 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) (byte) 0, (double) (short) 100);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double4 = simpleRegression0.predict((double) (byte) 10);
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getR();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        double double9 = simpleRegression0.predict(0.0d);
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.predict((double) (byte) 1);
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.getR();
        simpleRegression0.clear();
        double double18 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double9 = simpleRegression5.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double13 = simpleRegression10.getRegressionSumSquares();
        simpleRegression10.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression10.addData(doubleArray47);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression50 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long51 = simpleRegression50.getN();
        double double52 = simpleRegression50.getSumSquaredErrors();
        double double54 = simpleRegression50.predict((double) 10L);
        double double55 = simpleRegression50.getIntercept();
        double double56 = simpleRegression50.getRegressionSumSquares();
        long long57 = simpleRegression50.getN();
        double double58 = simpleRegression50.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression59 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long60 = simpleRegression59.getN();
        double double61 = simpleRegression59.getSumSquaredErrors();
        double double63 = simpleRegression59.predict((double) 10L);
        double double64 = simpleRegression59.getIntercept();
        simpleRegression59.addData((double) (byte) 100, (double) 100.0f);
        double double69 = simpleRegression59.predict((double) 100L);
        double double70 = simpleRegression59.getR();
        double[] doubleArray73 = new double[] { 100L, 100.0d };
        double[] doubleArray76 = new double[] { 100L, 100.0d };
        double[] doubleArray79 = new double[] { 100L, 100.0d };
        double[] doubleArray82 = new double[] { 100L, 100.0d };
        double[] doubleArray85 = new double[] { 100L, 100.0d };
        double[] doubleArray88 = new double[] { 100L, 100.0d };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        simpleRegression59.addData(doubleArray89);
        simpleRegression50.addData(doubleArray89);
        simpleRegression10.addData(doubleArray89);
        simpleRegression5.addData(doubleArray89);
        simpleRegression0.addData(doubleArray89);
        double double95 = simpleRegression0.getSlopeStdErr();
        double double96 = simpleRegression0.getIntercept();
        double double97 = simpleRegression0.getSignificance();
        double double98 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 100.0d + "'", double96 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double97));
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(41.90772484543353d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double7 = simpleRegression0.predict(0.9999999999999999d);
        double double8 = simpleRegression0.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        long long11 = simpleRegression9.getN();
        double double12 = simpleRegression9.getRSquare();
        simpleRegression9.clear();
        double double14 = simpleRegression9.getSlope();
        simpleRegression9.addData((double) 3L, (double) 0);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        double double24 = simpleRegression18.getRegressionSumSquares();
        long long25 = simpleRegression18.getN();
        double double26 = simpleRegression18.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression27 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long28 = simpleRegression27.getN();
        double double29 = simpleRegression27.getSumSquaredErrors();
        double double31 = simpleRegression27.predict((double) 10L);
        double double32 = simpleRegression27.getIntercept();
        double double33 = simpleRegression27.getRegressionSumSquares();
        long long34 = simpleRegression27.getN();
        double double35 = simpleRegression27.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression36 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long37 = simpleRegression36.getN();
        double double38 = simpleRegression36.getSumSquaredErrors();
        double double40 = simpleRegression36.predict((double) 10L);
        double double41 = simpleRegression36.getIntercept();
        simpleRegression36.addData((double) (byte) 100, (double) 100.0f);
        double double46 = simpleRegression36.predict((double) 100L);
        double double47 = simpleRegression36.getR();
        double[] doubleArray50 = new double[] { 100L, 100.0d };
        double[] doubleArray53 = new double[] { 100L, 100.0d };
        double[] doubleArray56 = new double[] { 100L, 100.0d };
        double[] doubleArray59 = new double[] { 100L, 100.0d };
        double[] doubleArray62 = new double[] { 100L, 100.0d };
        double[] doubleArray65 = new double[] { 100L, 100.0d };
        double[][] doubleArray66 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 };
        simpleRegression36.addData(doubleArray66);
        simpleRegression27.addData(doubleArray66);
        simpleRegression18.addData(doubleArray66);
        simpleRegression9.addData(doubleArray66);
        simpleRegression0.addData(doubleArray66);
        double double72 = simpleRegression0.getSlopeConfidenceInterval();
        double double73 = simpleRegression0.getSignificance();
        double double74 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.predict(0.541396879312175d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRSquare();
        long long7 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getIntercept();
        long long11 = simpleRegression0.getN();
        double double12 = simpleRegression0.getR();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getRegressionSumSquares();
        double double15 = simpleRegression0.getR();
        double double16 = simpleRegression0.getTotalSumSquares();
        java.lang.Class<?> wildcardClass17 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        double double50 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        double double52 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        double[][] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            simpleRegression0.addData(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.predict((double) 8L);
        double double13 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        simpleRegression0.addData(2.0300000000000153d, (double) 100L);
        double double15 = simpleRegression0.getSlopeConfidenceInterval();
        double double16 = simpleRegression0.getSumSquaredErrors();
        double double17 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 237.8600243518896d + "'", double15 == 237.8600243518896d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 6527.7024165291805d + "'", double16 == 6527.7024165291805d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 206.29758347081932d + "'", double17 == 206.29758347081932d);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        simpleRegression0.addData(1.8189894035458565E-12d, 0.0d);
        double double53 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.416666666666656d + "'", double53 == 0.416666666666656d);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        simpleRegression0.addData((double) 10, (-1.0d));
        long long33 = simpleRegression0.getN();
        double double35 = simpleRegression0.predict((double) (short) -1);
        double double36 = simpleRegression0.getMeanSquareError();
        double double37 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 378.6287878787878d + "'", double35 == 378.6287878787878d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 19.094696969696543d + "'", double36 == 19.094696969696543d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 368.0984848484848d + "'", double37 == 368.0984848484848d);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double[] doubleArray13 = new double[] { 1L, ' ' };
        double[] doubleArray16 = new double[] { 1L, ' ' };
        double[] doubleArray19 = new double[] { 1L, ' ' };
        double[] doubleArray22 = new double[] { 1L, ' ' };
        double[] doubleArray25 = new double[] { 1L, ' ' };
        double[] doubleArray28 = new double[] { 1L, ' ' };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        simpleRegression0.addData(doubleArray29);
        double double32 = simpleRegression0.predict((double) (short) 100);
        double double33 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData((double) 1L, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = simpleRegression0.getSlopeConfidenceInterval((-0.9999999999981628d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        long long10 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double12 = simpleRegression0.getMeanSquareError();
        double double13 = simpleRegression0.getSlopeStdErr();
        double double14 = simpleRegression0.getR();
        double double15 = simpleRegression0.getSumSquaredErrors();
        java.lang.Class<?> wildcardClass16 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData(0.0d, 7318.560606060606d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getRSquare();
        double double8 = simpleRegression0.getTotalSumSquares();
        double double9 = simpleRegression0.getSumSquaredErrors();
        double double10 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        simpleRegression0.addData(0.0d, (double) ' ');
        simpleRegression0.clear();
        simpleRegression0.addData((double) 'a', (double) 100.0f);
        double double51 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double42 = simpleRegression0.getSlope();
        double double43 = simpleRegression0.getTotalSumSquares();
        double double44 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0099999999999998d + "'", double42 == 1.0099999999999998d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 8743.714285714286d + "'", double43 == 8743.714285714286d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.9999999999999999d + "'", double44 == 0.9999999999999999d);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlope();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getRSquare();
        double double6 = simpleRegression0.getMeanSquareError();
        double double8 = simpleRegression0.predict((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSlopeConfidenceInterval((double) 8L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getIntercept();
        long long11 = simpleRegression0.getN();
        double double12 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getIntercept();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSlopeStdErr();
        double double16 = simpleRegression0.predict((double) (byte) 1);
        double double17 = simpleRegression0.getSlope();
        double double18 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        simpleRegression0.clear();
        double double8 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.predict(6734.0d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getIntercept();
        double double11 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double11 = simpleRegression0.predict((double) 4L);
        double double12 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSumSquaredErrors();
        double double10 = simpleRegression0.getSlope();
        double double11 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval(2926.4846611894172d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getIntercept();
        double double2 = simpleRegression0.getInterceptStdErr();
        double double3 = simpleRegression0.getR();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getRSquare();
        double double8 = simpleRegression0.getRegressionSumSquares();
        double double9 = simpleRegression0.getTotalSumSquares();
        java.lang.Class<?> wildcardClass10 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        long long12 = simpleRegression0.getN();
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getR();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getTotalSumSquares();
        long long12 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        double double51 = simpleRegression45.getRegressionSumSquares();
        long long52 = simpleRegression45.getN();
        double double53 = simpleRegression45.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        simpleRegression54.addData((double) (byte) 100, (double) 100.0f);
        double double64 = simpleRegression54.predict((double) 100L);
        double double65 = simpleRegression54.getR();
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        simpleRegression54.addData(doubleArray84);
        simpleRegression45.addData(doubleArray84);
        simpleRegression5.addData(doubleArray84);
        simpleRegression0.addData(doubleArray84);
        double double89 = simpleRegression0.getRSquare();
        double double90 = simpleRegression0.getTotalSumSquares();
        double double91 = simpleRegression0.getRSquare();
        double double92 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(1.0d, Double.NaN);
        double double14 = simpleRegression0.getSlopeStdErr();
        double double15 = simpleRegression0.getSlopeStdErr();
        double double16 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) (byte) 0, (double) (short) 100);
        simpleRegression0.clear();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getR();
        double double14 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        double double42 = simpleRegression0.getSlopeStdErr();
        java.lang.Class<?> wildcardClass43 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        double double2 = simpleRegression0.getSlopeStdErr();
        double double3 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double8 = simpleRegression0.predict((double) 7L);
        simpleRegression0.addData((double) 1.0f, 3.637978807091713E-13d);
        double double12 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval(8571.428571428569d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        long long10 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double12 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.getMeanSquareError();
        java.lang.Class<?> wildcardClass14 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        long long31 = simpleRegression0.getN();
        simpleRegression0.addData(10.0d, (-1.0d));
        double double35 = simpleRegression0.getSlopeStdErr();
        double double36 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.5378787878787817d + "'", double35 == 0.5378787878787817d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.5378787878787817d + "'", double36 == 0.5378787878787817d);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getIntercept();
        double double2 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData((double) 10, 0.16666666666666652d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double9 = simpleRegression0.predict((double) 0);
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getSlope();
        double double13 = simpleRegression0.predict(0.0d);
        simpleRegression0.addData((double) 2L, (-89891.64177489174d));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getRSquare();
        simpleRegression0.addData((double) 6L, 6.0d);
        double double11 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getR();
        simpleRegression0.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        simpleRegression9.clear();
        double double15 = simpleRegression9.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        long long19 = simpleRegression16.getN();
        double double20 = simpleRegression16.getRSquare();
        double[] doubleArray25 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray30 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray35 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[][] doubleArray36 = new double[][] { doubleArray25, doubleArray30, doubleArray35 };
        simpleRegression16.addData(doubleArray36);
        simpleRegression9.addData(doubleArray36);
        simpleRegression0.addData(doubleArray36);
        double double40 = simpleRegression0.getMeanSquareError();
        double double41 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        simpleRegression0.addData(0.9999999999999998d, (double) ' ');
        simpleRegression0.addData(200.0d, (double) 0);
        double double16 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.33210220848722394d) + "'", double16 == (-0.33210220848722394d));
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 0, (double) 0.0f);
        double double8 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData(3.637978807091713E-13d, (double) 3L);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getIntercept();
        long long11 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getSumSquaredErrors();
        double double12 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getR();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.predict(7356.75d);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        double double13 = simpleRegression0.getRSquare();
        double double15 = simpleRegression0.predict(97.74308839823799d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getR();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.predict(7356.75d);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        long long31 = simpleRegression0.getN();
        simpleRegression0.addData(10.0d, (-1.0d));
        double double35 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.2842377260981912d + "'", double35 == 0.2842377260981912d);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        double double51 = simpleRegression45.getRegressionSumSquares();
        long long52 = simpleRegression45.getN();
        double double53 = simpleRegression45.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        simpleRegression54.addData((double) (byte) 100, (double) 100.0f);
        double double64 = simpleRegression54.predict((double) 100L);
        double double65 = simpleRegression54.getR();
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        simpleRegression54.addData(doubleArray84);
        simpleRegression45.addData(doubleArray84);
        simpleRegression5.addData(doubleArray84);
        simpleRegression0.addData(doubleArray84);
        double double89 = simpleRegression0.getRSquare();
        double double90 = simpleRegression0.getSlope();
        double double91 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double14 = simpleRegression0.predict(0.23752863392368403d);
        double double15 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getRSquare();
        long long6 = simpleRegression0.getN();
        double double7 = simpleRegression0.getR();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        double double7 = simpleRegression0.getRSquare();
        double double8 = simpleRegression0.getSlope();
        double double9 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(Double.NaN, (double) 7L);
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval(4142.092174397623d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        long long31 = simpleRegression0.getN();
        simpleRegression0.addData(10.0d, (-1.0d));
        double double35 = simpleRegression0.getSlopeStdErr();
        double double36 = simpleRegression0.getSlope();
        double double37 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.6983204134366925d + "'", double35 == 0.6983204134366925d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.2842377260981912d + "'", double36 == 0.2842377260981912d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.09364059557591d + "'", double37 == 35.09364059557591d);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getInterceptStdErr();
        long long7 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSlopeConfidenceInterval(0.2842377260981912d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getR();
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getRegressionSumSquares();
        double double17 = simpleRegression0.getSlopeStdErr();
        double double18 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double21 = simpleRegression0.predict((-0.9999999999999838d));
        simpleRegression0.addData(0.541396879312175d, (-0.4531891518946872d));
        double double25 = simpleRegression0.getSumSquaredErrors();
        double double26 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getSlope();
        long long12 = simpleRegression0.getN();
        double double13 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getRegressionSumSquares();
        double double17 = simpleRegression0.getSlopeStdErr();
        double double18 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double21 = simpleRegression0.predict((-0.9999999999999838d));
        double double22 = simpleRegression0.getSlopeStdErr();
        java.lang.Class<?> wildcardClass23 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.addData(93.71511627906978d, (double) (short) 100);
        double double16 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSlopeStdErr();
        double double15 = simpleRegression0.getR();
        double double16 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getSlopeConfidenceInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.6746918727301837E-8d + "'", double41 == 1.6746918727301837E-8d);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double4 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData((double) 100, (double) 6L);
        double double13 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getIntercept();
        double double12 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        java.lang.Class<?> wildcardClass13 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlope();
        long long4 = simpleRegression0.getN();
        long long5 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.predict((double) 0);
        double double14 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        double double13 = simpleRegression7.getRegressionSumSquares();
        long long14 = simpleRegression7.getN();
        double double15 = simpleRegression7.getR();
        double double16 = simpleRegression7.getSlope();
        double double17 = simpleRegression7.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double21 = simpleRegression18.getRegressionSumSquares();
        simpleRegression18.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long26 = simpleRegression25.getN();
        double double27 = simpleRegression25.getSumSquaredErrors();
        double double29 = simpleRegression25.predict((double) 10L);
        double double30 = simpleRegression25.getIntercept();
        simpleRegression25.addData((double) (byte) 100, (double) 100.0f);
        double double35 = simpleRegression25.predict((double) 100L);
        double double36 = simpleRegression25.getR();
        double[] doubleArray39 = new double[] { 100L, 100.0d };
        double[] doubleArray42 = new double[] { 100L, 100.0d };
        double[] doubleArray45 = new double[] { 100L, 100.0d };
        double[] doubleArray48 = new double[] { 100L, 100.0d };
        double[] doubleArray51 = new double[] { 100L, 100.0d };
        double[] doubleArray54 = new double[] { 100L, 100.0d };
        double[][] doubleArray55 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 };
        simpleRegression25.addData(doubleArray55);
        simpleRegression18.addData(doubleArray55);
        double double58 = simpleRegression18.getRSquare();
        double double59 = simpleRegression18.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        double double64 = simpleRegression60.predict((double) 10L);
        double double65 = simpleRegression60.getIntercept();
        double double66 = simpleRegression60.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression67 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long68 = simpleRegression67.getN();
        double double69 = simpleRegression67.getSumSquaredErrors();
        long long70 = simpleRegression67.getN();
        long long71 = simpleRegression67.getN();
        double[][] doubleArray72 = new double[][] {};
        simpleRegression67.addData(doubleArray72);
        simpleRegression60.addData(doubleArray72);
        simpleRegression18.addData(doubleArray72);
        simpleRegression7.addData(doubleArray72);
        simpleRegression0.addData(doubleArray72);
        double double78 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double79 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.9999999999999998d + "'", double58 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.9999999999999999d + "'", double59 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getInterceptStdErr();
        double double15 = simpleRegression0.getSlopeStdErr();
        double double16 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        double double9 = simpleRegression0.predict(10.0d);
        double double11 = simpleRegression0.predict(100.0d);
        double double13 = simpleRegression0.predict((double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 0, (double) 0.0f);
        double double8 = simpleRegression0.getInterceptStdErr();
        double double9 = simpleRegression0.getR();
        long long10 = simpleRegression0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        simpleRegression0.clear();
        double double59 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double60 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        long long42 = simpleRegression0.getN();
        long long43 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 7L + "'", long42 == 7L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 7L + "'", long43 == 7L);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        simpleRegression0.addData((-1.0d), (double) 100L);
        simpleRegression0.addData((double) (byte) -1, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getIntercept();
        double double3 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSlope();
        double double11 = simpleRegression0.getRegressionSumSquares();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.predict((double) 100L);
        double double16 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getRegressionSumSquares();
        double double9 = simpleRegression0.getInterceptStdErr();
        java.lang.Class<?> wildcardClass10 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double9 = simpleRegression5.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double13 = simpleRegression10.getRegressionSumSquares();
        simpleRegression10.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression10.addData(doubleArray47);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression50 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long51 = simpleRegression50.getN();
        double double52 = simpleRegression50.getSumSquaredErrors();
        double double54 = simpleRegression50.predict((double) 10L);
        double double55 = simpleRegression50.getIntercept();
        double double56 = simpleRegression50.getRegressionSumSquares();
        long long57 = simpleRegression50.getN();
        double double58 = simpleRegression50.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression59 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long60 = simpleRegression59.getN();
        double double61 = simpleRegression59.getSumSquaredErrors();
        double double63 = simpleRegression59.predict((double) 10L);
        double double64 = simpleRegression59.getIntercept();
        simpleRegression59.addData((double) (byte) 100, (double) 100.0f);
        double double69 = simpleRegression59.predict((double) 100L);
        double double70 = simpleRegression59.getR();
        double[] doubleArray73 = new double[] { 100L, 100.0d };
        double[] doubleArray76 = new double[] { 100L, 100.0d };
        double[] doubleArray79 = new double[] { 100L, 100.0d };
        double[] doubleArray82 = new double[] { 100L, 100.0d };
        double[] doubleArray85 = new double[] { 100L, 100.0d };
        double[] doubleArray88 = new double[] { 100L, 100.0d };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        simpleRegression59.addData(doubleArray89);
        simpleRegression50.addData(doubleArray89);
        simpleRegression10.addData(doubleArray89);
        simpleRegression5.addData(doubleArray89);
        simpleRegression0.addData(doubleArray89);
        double double95 = simpleRegression0.getSlopeStdErr();
        double double96 = simpleRegression0.getSlopeStdErr();
        double double97 = simpleRegression0.getSlopeConfidenceInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue(Double.isNaN(double96));
        org.junit.Assert.assertTrue(Double.isNaN(double97));
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getIntercept();
        double double3 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSlopeConfidenceInterval(7356.75d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.predict((double) 100L);
        double double16 = simpleRegression0.getSlopeStdErr();
        long long17 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.predict((-1.0d));
        double double15 = simpleRegression0.getMeanSquareError();
        java.lang.Class<?> wildcardClass16 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getRSquare();
        long long15 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double12 = simpleRegression9.getRegressionSumSquares();
        simpleRegression9.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        double double20 = simpleRegression16.predict((double) 10L);
        double double21 = simpleRegression16.getIntercept();
        simpleRegression16.addData((double) (byte) 100, (double) 100.0f);
        double double26 = simpleRegression16.predict((double) 100L);
        double double27 = simpleRegression16.getR();
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[] doubleArray39 = new double[] { 100L, 100.0d };
        double[] doubleArray42 = new double[] { 100L, 100.0d };
        double[] doubleArray45 = new double[] { 100L, 100.0d };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        simpleRegression16.addData(doubleArray46);
        simpleRegression9.addData(doubleArray46);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        double double55 = simpleRegression49.getRegressionSumSquares();
        long long56 = simpleRegression49.getN();
        double double57 = simpleRegression49.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression58 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long59 = simpleRegression58.getN();
        double double60 = simpleRegression58.getSumSquaredErrors();
        double double62 = simpleRegression58.predict((double) 10L);
        double double63 = simpleRegression58.getIntercept();
        simpleRegression58.addData((double) (byte) 100, (double) 100.0f);
        double double68 = simpleRegression58.predict((double) 100L);
        double double69 = simpleRegression58.getR();
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[] doubleArray81 = new double[] { 100L, 100.0d };
        double[] doubleArray84 = new double[] { 100L, 100.0d };
        double[] doubleArray87 = new double[] { 100L, 100.0d };
        double[][] doubleArray88 = new double[][] { doubleArray72, doubleArray75, doubleArray78, doubleArray81, doubleArray84, doubleArray87 };
        simpleRegression58.addData(doubleArray88);
        simpleRegression49.addData(doubleArray88);
        simpleRegression9.addData(doubleArray88);
        simpleRegression0.addData(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = simpleRegression0.getSlopeConfidenceInterval(65.29134366925075d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getInterceptStdErr();
        double double15 = simpleRegression0.getSlope();
        long long16 = simpleRegression0.getN();
        double double17 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getRSquare();
        java.lang.Class<?> wildcardClass11 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getSumSquaredErrors();
        double double17 = simpleRegression13.predict((double) 10L);
        simpleRegression13.clear();
        double double19 = simpleRegression13.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression20 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long21 = simpleRegression20.getN();
        double double22 = simpleRegression20.getSumSquaredErrors();
        long long23 = simpleRegression20.getN();
        double double24 = simpleRegression20.getRSquare();
        double[] doubleArray29 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray34 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray39 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[][] doubleArray40 = new double[][] { doubleArray29, doubleArray34, doubleArray39 };
        simpleRegression20.addData(doubleArray40);
        simpleRegression13.addData(doubleArray40);
        simpleRegression0.addData(doubleArray40);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.predict((double) (-1.0f));
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        double double15 = simpleRegression9.getRegressionSumSquares();
        long long16 = simpleRegression9.getN();
        double double17 = simpleRegression9.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getR();
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        simpleRegression18.addData(doubleArray48);
        simpleRegression9.addData(doubleArray48);
        simpleRegression0.addData(doubleArray48);
        double double52 = simpleRegression0.getR();
        double double53 = simpleRegression0.getInterceptStdErr();
        double double54 = simpleRegression0.getInterceptStdErr();
        double double56 = simpleRegression0.predict(797.2971376003962d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        long long6 = simpleRegression0.getN();
        java.lang.Class<?> wildcardClass7 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        double double9 = simpleRegression0.getInterceptStdErr();
        double double10 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        java.lang.Class<?> wildcardClass58 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        long long10 = simpleRegression0.getN();
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        long long42 = simpleRegression0.getN();
        double double43 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double45 = simpleRegression0.getSlopeConfidenceInterval(797.2971376003962d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6L + "'", long42 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getSumSquaredErrors();
        java.lang.Class<?> wildcardClass8 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSlope();
        double double11 = simpleRegression0.getRegressionSumSquares();
        double double12 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        long long10 = simpleRegression0.getN();
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval((double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        double double7 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSlopeConfidenceInterval((double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getRegressionSumSquares();
        double double3 = simpleRegression0.getInterceptStdErr();
        double double4 = simpleRegression0.getRSquare();
        java.lang.Class<?> wildcardClass5 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(0.23791906001465818d, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        long long4 = simpleRegression0.getN();
        long long5 = simpleRegression0.getN();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlope();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double4 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSlopeConfidenceInterval(6.514835844650013E-9d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        double double9 = simpleRegression0.predict(10.0d);
        double double11 = simpleRegression0.predict(100.0d);
        double double13 = simpleRegression0.predict((double) (short) 0);
        long long14 = simpleRegression0.getN();
        double double15 = simpleRegression0.getRSquare();
        double double17 = simpleRegression0.predict((double) 8L);
        double double18 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        simpleRegression0.addData((double) 10, (-1.0d));
        long long33 = simpleRegression0.getN();
        double double35 = simpleRegression0.predict((double) (short) -1);
        double double37 = simpleRegression0.predict((double) (short) 100);
        double double38 = simpleRegression0.getRSquare();
        long long39 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 65.00710594315245d + "'", double35 == 65.00710594315245d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 93.71511627906978d + "'", double37 == 93.71511627906978d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0764999079314125d + "'", double38 == 0.0764999079314125d);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4L + "'", long39 == 4L);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getTotalSumSquares();
        double double11 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.predict((-1.0d));
        double double15 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        double double42 = simpleRegression0.getTotalSumSquares();
        double double43 = simpleRegression0.getSlope();
        double double44 = simpleRegression0.getSlopeConfidenceInterval();
        double double45 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        double double42 = simpleRegression0.getTotalSumSquares();
        double double43 = simpleRegression0.getSlope();
        double double45 = simpleRegression0.predict((double) 1L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getRSquare();
        double double12 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getMeanSquareError();
        double double13 = simpleRegression0.predict((double) 0L);
        double double14 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double14 = simpleRegression11.getRegressionSumSquares();
        simpleRegression11.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getR();
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        simpleRegression18.addData(doubleArray48);
        simpleRegression11.addData(doubleArray48);
        double double51 = simpleRegression11.getRSquare();
        double double52 = simpleRegression11.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression53 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long54 = simpleRegression53.getN();
        double double55 = simpleRegression53.getSumSquaredErrors();
        double double57 = simpleRegression53.predict((double) 10L);
        double double58 = simpleRegression53.getIntercept();
        double double59 = simpleRegression53.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        long long63 = simpleRegression60.getN();
        long long64 = simpleRegression60.getN();
        double[][] doubleArray65 = new double[][] {};
        simpleRegression60.addData(doubleArray65);
        simpleRegression53.addData(doubleArray65);
        simpleRegression11.addData(doubleArray65);
        simpleRegression0.addData(doubleArray65);
        double double70 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.9999999999999998d + "'", double51 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.9999999999999999d + "'", double52 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = simpleRegression0.getSlopeConfidenceInterval(0.16666666666666666d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        double double51 = simpleRegression45.getRegressionSumSquares();
        long long52 = simpleRegression45.getN();
        double double53 = simpleRegression45.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        simpleRegression54.addData((double) (byte) 100, (double) 100.0f);
        double double64 = simpleRegression54.predict((double) 100L);
        double double65 = simpleRegression54.getR();
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        simpleRegression54.addData(doubleArray84);
        simpleRegression45.addData(doubleArray84);
        simpleRegression5.addData(doubleArray84);
        simpleRegression0.addData(doubleArray84);
        double double89 = simpleRegression0.getRSquare();
        double double90 = simpleRegression0.getIntercept();
        double double91 = simpleRegression0.getSumSquaredErrors();
        double double92 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        double double2 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSlopeConfidenceInterval(0.06677226996917d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval(10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData((double) 100, Double.NaN);
        double double14 = simpleRegression0.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getRSquare();
        double double19 = simpleRegression16.getTotalSumSquares();
        double[] doubleArray24 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray29 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray30 = new double[][] { doubleArray24, doubleArray29 };
        simpleRegression16.addData(doubleArray30);
        simpleRegression15.addData(doubleArray30);
        simpleRegression0.addData(doubleArray30);
        double double34 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRegressionSumSquares();
        long long5 = simpleRegression0.getN();
        double double6 = simpleRegression0.getIntercept();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.predict((double) (byte) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getR();
        double double7 = simpleRegression0.getIntercept();
        double double8 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression40 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long41 = simpleRegression40.getN();
        double double42 = simpleRegression40.getSumSquaredErrors();
        double double44 = simpleRegression40.predict((double) 10L);
        double double45 = simpleRegression40.getIntercept();
        double double46 = simpleRegression40.getRegressionSumSquares();
        long long47 = simpleRegression40.getN();
        double double48 = simpleRegression40.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        simpleRegression49.addData((double) (byte) 100, (double) 100.0f);
        double double59 = simpleRegression49.predict((double) 100L);
        double double60 = simpleRegression49.getR();
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[] doubleArray66 = new double[] { 100L, 100.0d };
        double[] doubleArray69 = new double[] { 100L, 100.0d };
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[][] doubleArray79 = new double[][] { doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        simpleRegression49.addData(doubleArray79);
        simpleRegression40.addData(doubleArray79);
        simpleRegression0.addData(doubleArray79);
        double double83 = simpleRegression0.getRegressionSumSquares();
        double double84 = simpleRegression0.getSumSquaredErrors();
        double double85 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 9416.307692307693d + "'", double83 == 9416.307692307693d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.8189894035458565E-12d + "'", double84 == 1.8189894035458565E-12d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 9416.307692307693d + "'", double85 == 9416.307692307693d);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression4 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long5 = simpleRegression4.getN();
        double double6 = simpleRegression4.getSumSquaredErrors();
        double double8 = simpleRegression4.predict((double) 10L);
        double double9 = simpleRegression4.getIntercept();
        simpleRegression4.addData((double) (byte) 100, (double) 100.0f);
        double double14 = simpleRegression4.predict((double) 100L);
        double double15 = simpleRegression4.getMeanSquareError();
        long long16 = simpleRegression4.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getRSquare();
        double double20 = simpleRegression17.getTotalSumSquares();
        double[] doubleArray25 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray30 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray31 = new double[][] { doubleArray25, doubleArray30 };
        simpleRegression17.addData(doubleArray31);
        simpleRegression4.addData(doubleArray31);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        long long37 = simpleRegression34.getN();
        long long38 = simpleRegression34.getN();
        double[][] doubleArray39 = new double[][] {};
        simpleRegression34.addData(doubleArray39);
        simpleRegression4.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        java.lang.Class<?> wildcardClass43 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        long long4 = simpleRegression0.getN();
        double double6 = simpleRegression0.predict(0.0d);
        long long7 = simpleRegression0.getN();
        double double9 = simpleRegression0.predict((double) 100.0f);
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.addData(0.23752863392368403d, 1.6536267304962332E-13d);
        double double16 = simpleRegression0.getSumSquaredErrors();
        double double18 = simpleRegression0.predict(Double.NaN);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSumSquaredErrors();
        double double6 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(Double.NaN, (double) 7L);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        double double13 = simpleRegression7.getRegressionSumSquares();
        long long14 = simpleRegression7.getN();
        double double15 = simpleRegression7.getR();
        double double16 = simpleRegression7.getSlope();
        double double17 = simpleRegression7.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double21 = simpleRegression18.getRegressionSumSquares();
        simpleRegression18.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long26 = simpleRegression25.getN();
        double double27 = simpleRegression25.getSumSquaredErrors();
        double double29 = simpleRegression25.predict((double) 10L);
        double double30 = simpleRegression25.getIntercept();
        simpleRegression25.addData((double) (byte) 100, (double) 100.0f);
        double double35 = simpleRegression25.predict((double) 100L);
        double double36 = simpleRegression25.getR();
        double[] doubleArray39 = new double[] { 100L, 100.0d };
        double[] doubleArray42 = new double[] { 100L, 100.0d };
        double[] doubleArray45 = new double[] { 100L, 100.0d };
        double[] doubleArray48 = new double[] { 100L, 100.0d };
        double[] doubleArray51 = new double[] { 100L, 100.0d };
        double[] doubleArray54 = new double[] { 100L, 100.0d };
        double[][] doubleArray55 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 };
        simpleRegression25.addData(doubleArray55);
        simpleRegression18.addData(doubleArray55);
        double double58 = simpleRegression18.getRSquare();
        double double59 = simpleRegression18.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        double double64 = simpleRegression60.predict((double) 10L);
        double double65 = simpleRegression60.getIntercept();
        double double66 = simpleRegression60.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression67 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long68 = simpleRegression67.getN();
        double double69 = simpleRegression67.getSumSquaredErrors();
        long long70 = simpleRegression67.getN();
        long long71 = simpleRegression67.getN();
        double[][] doubleArray72 = new double[][] {};
        simpleRegression67.addData(doubleArray72);
        simpleRegression60.addData(doubleArray72);
        simpleRegression18.addData(doubleArray72);
        simpleRegression7.addData(doubleArray72);
        simpleRegression0.addData(doubleArray72);
        double double78 = simpleRegression0.getInterceptStdErr();
        double double79 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.9999999999999998d + "'", double58 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.9999999999999999d + "'", double59 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double15 = simpleRegression11.predict((double) 10L);
        double double16 = simpleRegression11.getIntercept();
        double double17 = simpleRegression11.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        long long21 = simpleRegression18.getN();
        long long22 = simpleRegression18.getN();
        double[][] doubleArray23 = new double[][] {};
        simpleRegression18.addData(doubleArray23);
        simpleRegression11.addData(doubleArray23);
        double double27 = simpleRegression11.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression28 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long29 = simpleRegression28.getN();
        double double30 = simpleRegression28.getSumSquaredErrors();
        double double32 = simpleRegression28.predict((double) 10L);
        double double33 = simpleRegression28.getIntercept();
        simpleRegression28.addData((double) (byte) 100, (double) 100.0f);
        double double38 = simpleRegression28.predict((double) 100L);
        double double39 = simpleRegression28.getR();
        double[] doubleArray42 = new double[] { 100L, 100.0d };
        double[] doubleArray45 = new double[] { 100L, 100.0d };
        double[] doubleArray48 = new double[] { 100L, 100.0d };
        double[] doubleArray51 = new double[] { 100L, 100.0d };
        double[] doubleArray54 = new double[] { 100L, 100.0d };
        double[] doubleArray57 = new double[] { 100L, 100.0d };
        double[][] doubleArray58 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57 };
        simpleRegression28.addData(doubleArray58);
        simpleRegression11.addData(doubleArray58);
        simpleRegression0.addData(doubleArray58);
        double double62 = simpleRegression0.getInterceptStdErr();
        double double64 = simpleRegression0.predict(65.00710594315245d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double16 = simpleRegression7.getIntercept();
        double double17 = simpleRegression7.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getMeanSquareError();
        long long30 = simpleRegression18.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression31 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long32 = simpleRegression31.getN();
        double double33 = simpleRegression31.getRSquare();
        double double34 = simpleRegression31.getTotalSumSquares();
        double[] doubleArray39 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray44 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray45 = new double[][] { doubleArray39, doubleArray44 };
        simpleRegression31.addData(doubleArray45);
        simpleRegression18.addData(doubleArray45);
        simpleRegression7.addData(doubleArray45);
        simpleRegression0.addData(doubleArray45);
        double[][] doubleArray50 = null;
        // The following exception was thrown during execution in test generation
        try {
            simpleRegression0.addData(doubleArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double12 = simpleRegression0.predict((double) 100.0f);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.getRegressionSumSquares();
        double double18 = simpleRegression0.predict(1.0d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getTotalSumSquares();
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = simpleRegression0.getSlopeConfidenceInterval((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        simpleRegression0.clear();
        double double4 = simpleRegression0.getSumSquaredErrors();
        double double5 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.addData(65.00710594315245d, 6.0d);
        double double6 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        double double17 = simpleRegression0.getTotalSumSquares();
        double double18 = simpleRegression0.getTotalSumSquares();
        double double19 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double[] doubleArray13 = new double[] { 1L, ' ' };
        double[] doubleArray16 = new double[] { 1L, ' ' };
        double[] doubleArray19 = new double[] { 1L, ' ' };
        double[] doubleArray22 = new double[] { 1L, ' ' };
        double[] doubleArray25 = new double[] { 1L, ' ' };
        double[] doubleArray28 = new double[] { 1L, ' ' };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        simpleRegression0.addData(doubleArray29);
        double double32 = simpleRegression0.predict((double) (short) 100);
        double double33 = simpleRegression0.getMeanSquareError();
        double double34 = simpleRegression0.getRegressionSumSquares();
        double double35 = simpleRegression0.getRSquare();
        double double36 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getIntercept();
        long long12 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval(3396.9796511627906d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        double double9 = simpleRegression0.getIntercept();
        long long10 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double15 = simpleRegression11.predict((double) 10L);
        double double16 = simpleRegression11.getIntercept();
        double double17 = simpleRegression11.getRegressionSumSquares();
        long long18 = simpleRegression11.getN();
        double double19 = simpleRegression11.getR();
        double double20 = simpleRegression11.getR();
        double double21 = simpleRegression11.getSumSquaredErrors();
        double double22 = simpleRegression11.getTotalSumSquares();
        double double24 = simpleRegression11.predict((double) (short) -1);
        double double25 = simpleRegression11.getTotalSumSquares();
        long long26 = simpleRegression11.getN();
        double double27 = simpleRegression11.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression28 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long29 = simpleRegression28.getN();
        double double30 = simpleRegression28.getSumSquaredErrors();
        double double32 = simpleRegression28.predict((double) 10L);
        double double33 = simpleRegression28.getIntercept();
        double double34 = simpleRegression28.getRegressionSumSquares();
        long long35 = simpleRegression28.getN();
        double double36 = simpleRegression28.getR();
        double double37 = simpleRegression28.getSlope();
        double double38 = simpleRegression28.getRegressionSumSquares();
        double[] doubleArray41 = new double[] { 1L, ' ' };
        double[] doubleArray44 = new double[] { 1L, ' ' };
        double[] doubleArray47 = new double[] { 1L, ' ' };
        double[] doubleArray50 = new double[] { 1L, ' ' };
        double[] doubleArray53 = new double[] { 1L, ' ' };
        double[] doubleArray56 = new double[] { 1L, ' ' };
        double[][] doubleArray57 = new double[][] { doubleArray41, doubleArray44, doubleArray47, doubleArray50, doubleArray53, doubleArray56 };
        simpleRegression28.addData(doubleArray57);
        simpleRegression11.addData(doubleArray57);
        simpleRegression0.addData(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = simpleRegression0.getSlopeConfidenceInterval(1.4004436411137009E7d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData(0.030303030303030304d, (double) 10L);
        double double14 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.getRSquare();
        double double16 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        double double44 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double46 = simpleRegression0.getSlopeConfidenceInterval(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-0.9999999999999838d) + "'", double44 == (-0.9999999999999838d));
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getSlopeStdErr();
        java.lang.Class<?> wildcardClass7 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getIntercept();
        double double12 = simpleRegression0.getIntercept();
        double double14 = simpleRegression0.predict(10.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        double double51 = simpleRegression45.getRegressionSumSquares();
        long long52 = simpleRegression45.getN();
        double double53 = simpleRegression45.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        simpleRegression54.addData((double) (byte) 100, (double) 100.0f);
        double double64 = simpleRegression54.predict((double) 100L);
        double double65 = simpleRegression54.getR();
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        simpleRegression54.addData(doubleArray84);
        simpleRegression45.addData(doubleArray84);
        simpleRegression5.addData(doubleArray84);
        simpleRegression0.addData(doubleArray84);
        double double89 = simpleRegression0.getRSquare();
        double double90 = simpleRegression0.getSlope();
        double double91 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double4 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression3 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long4 = simpleRegression3.getN();
        double double5 = simpleRegression3.getSumSquaredErrors();
        double double6 = simpleRegression3.getRegressionSumSquares();
        simpleRegression3.addData(0.0d, (-1.0d));
        double double10 = simpleRegression3.getR();
        double double12 = simpleRegression3.predict(10.0d);
        double double14 = simpleRegression3.predict(100.0d);
        double double16 = simpleRegression3.predict((double) (short) 0);
        long long17 = simpleRegression3.getN();
        double double18 = simpleRegression3.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression19 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long20 = simpleRegression19.getN();
        long long21 = simpleRegression19.getN();
        double double22 = simpleRegression19.getRSquare();
        simpleRegression19.clear();
        double double24 = simpleRegression19.getSlope();
        double double25 = simpleRegression19.getMeanSquareError();
        simpleRegression19.clear();
        long long27 = simpleRegression19.getN();
        double double28 = simpleRegression19.getSlope();
        double double29 = simpleRegression19.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression30 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long31 = simpleRegression30.getN();
        double double32 = simpleRegression30.getTotalSumSquares();
        double double33 = simpleRegression30.getSlopeStdErr();
        double double35 = simpleRegression30.predict((double) 3L);
        double double36 = simpleRegression30.getRegressionSumSquares();
        double double37 = simpleRegression30.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression38 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long39 = simpleRegression38.getN();
        double double40 = simpleRegression38.getSumSquaredErrors();
        double double42 = simpleRegression38.predict((double) 10L);
        double double43 = simpleRegression38.getMeanSquareError();
        double double44 = simpleRegression38.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double48 = simpleRegression45.getRegressionSumSquares();
        simpleRegression45.addData(0.0d, (-1.0d));
        double double52 = simpleRegression45.getR();
        double double54 = simpleRegression45.predict(10.0d);
        double double56 = simpleRegression45.predict(100.0d);
        double double58 = simpleRegression45.predict((double) (short) 0);
        long long59 = simpleRegression45.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        double double64 = simpleRegression60.predict((double) 10L);
        double double65 = simpleRegression60.getIntercept();
        double double66 = simpleRegression60.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression67 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long68 = simpleRegression67.getN();
        double double69 = simpleRegression67.getSumSquaredErrors();
        long long70 = simpleRegression67.getN();
        long long71 = simpleRegression67.getN();
        double[][] doubleArray72 = new double[][] {};
        simpleRegression67.addData(doubleArray72);
        simpleRegression60.addData(doubleArray72);
        simpleRegression45.addData(doubleArray72);
        simpleRegression38.addData(doubleArray72);
        simpleRegression30.addData(doubleArray72);
        simpleRegression19.addData(doubleArray72);
        simpleRegression3.addData(doubleArray72);
        simpleRegression0.addData(doubleArray72);
        double double81 = simpleRegression0.getRSquare();
        simpleRegression0.addData((double) 10L, 1.4004436411137009E7d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getSlope();
        double double12 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(0.23791906001465818d, 0.0d);
        double double6 = simpleRegression0.getMeanSquareError();
        double double7 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getR();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(1.0d, Double.NaN);
        double double14 = simpleRegression0.getSlopeStdErr();
        double double15 = simpleRegression0.getSlopeStdErr();
        double double17 = simpleRegression0.predict((double) 10L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getRSquare();
        simpleRegression0.addData((-0.2946963824289245d), (double) (short) 1);
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlope();
        double double13 = simpleRegression0.predict(1.0000000000000002d);
        long long14 = simpleRegression0.getN();
        double double15 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        double double44 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.9999999999999999d + "'", double44 == 0.9999999999999999d);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getTotalSumSquares();
        double double9 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval(93.71511627906978d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getR();
        double double8 = simpleRegression0.predict((double) 100);
        double[] doubleArray15 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[] doubleArray22 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[][] doubleArray23 = new double[][] { doubleArray15, doubleArray22 };
        simpleRegression0.addData(doubleArray23);
        double double25 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        double double44 = simpleRegression0.getIntercept();
        double double45 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-0.9999999999999838d) + "'", double44 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSlopeConfidenceInterval((double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getIntercept();
        double double5 = simpleRegression0.getR();
        simpleRegression0.addData((double) (-1), 0.5366294777987983d);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        simpleRegression0.clear();
        double double8 = simpleRegression0.getTotalSumSquares();
        long long9 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double11 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double10 = simpleRegression7.getRegressionSumSquares();
        simpleRegression7.addData(0.0d, (-1.0d));
        double double14 = simpleRegression7.getR();
        double double16 = simpleRegression7.predict(10.0d);
        double double18 = simpleRegression7.predict(100.0d);
        double double20 = simpleRegression7.predict((double) (short) 0);
        long long21 = simpleRegression7.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression22 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long23 = simpleRegression22.getN();
        double double24 = simpleRegression22.getSumSquaredErrors();
        double double26 = simpleRegression22.predict((double) 10L);
        double double27 = simpleRegression22.getIntercept();
        double double28 = simpleRegression22.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression29 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long30 = simpleRegression29.getN();
        double double31 = simpleRegression29.getSumSquaredErrors();
        long long32 = simpleRegression29.getN();
        long long33 = simpleRegression29.getN();
        double[][] doubleArray34 = new double[][] {};
        simpleRegression29.addData(doubleArray34);
        simpleRegression22.addData(doubleArray34);
        simpleRegression7.addData(doubleArray34);
        simpleRegression0.addData(doubleArray34);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getSumSquaredErrors();
        long long42 = simpleRegression39.getN();
        double double43 = simpleRegression39.getTotalSumSquares();
        double double44 = simpleRegression39.getSlopeStdErr();
        double double45 = simpleRegression39.getR();
        double double47 = simpleRegression39.predict((double) 100);
        double[] doubleArray54 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[] doubleArray61 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[][] doubleArray62 = new double[][] { doubleArray54, doubleArray61 };
        simpleRegression39.addData(doubleArray62);
        simpleRegression0.addData(doubleArray62);
        double double65 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        double double59 = simpleRegression0.predict((double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            double double61 = simpleRegression0.getSlopeConfidenceInterval((double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-2.009999999999984d) + "'", double59 == (-2.009999999999984d));
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) -1, (double) (-1L));
        double double14 = simpleRegression0.getRSquare();
        double double15 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double17 = simpleRegression0.getRSquare();
        double double18 = simpleRegression0.getR();
        java.lang.Class<?> wildcardClass19 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        simpleRegression0.clear();
        java.lang.Class<?> wildcardClass4 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        simpleRegression0.addData((double) 10, (-1.0d));
        long long33 = simpleRegression0.getN();
        long long34 = simpleRegression0.getN();
        double double35 = simpleRegression0.getTotalSumSquares();
        java.lang.Class<?> wildcardClass36 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 7356.75d + "'", double35 == 7356.75d);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getMeanSquareError();
        double double13 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        simpleRegression0.clear();
        double double59 = simpleRegression0.getSlope();
        long long60 = simpleRegression0.getN();
        java.lang.Class<?> wildcardClass61 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval(93.71511627906978d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getSlope();
        double double41 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0099999999999998d + "'", double40 == 1.0099999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0099999999999998d + "'", double41 == 1.0099999999999998d);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double[] doubleArray8 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray13 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray14 = new double[][] { doubleArray8, doubleArray13 };
        simpleRegression0.addData(doubleArray14);
        double double16 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        simpleRegression0.addData((double) 1.0f, 6.514835844650013E-9d);
        double double22 = simpleRegression0.predict(0.23752863392368403d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double8 = simpleRegression0.predict((double) 100L);
        double double9 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.predict((double) (byte) 10);
        simpleRegression0.addData((double) '#', 4142.092174397623d);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval(65.00710594315245d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getInterceptStdErr();
        long long11 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.predict((-1.0d));
        double double15 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = simpleRegression0.getSlopeConfidenceInterval(0.06677226996917d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        long long15 = simpleRegression0.getN();
        double double16 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        double double23 = simpleRegression17.getRegressionSumSquares();
        long long24 = simpleRegression17.getN();
        double double25 = simpleRegression17.getR();
        double double26 = simpleRegression17.getSlope();
        double double27 = simpleRegression17.getRegressionSumSquares();
        double[] doubleArray30 = new double[] { 1L, ' ' };
        double[] doubleArray33 = new double[] { 1L, ' ' };
        double[] doubleArray36 = new double[] { 1L, ' ' };
        double[] doubleArray39 = new double[] { 1L, ' ' };
        double[] doubleArray42 = new double[] { 1L, ' ' };
        double[] doubleArray45 = new double[] { 1L, ' ' };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        simpleRegression17.addData(doubleArray46);
        simpleRegression0.addData(doubleArray46);
        double double49 = simpleRegression0.getSignificance();
        double double50 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getMeanSquareError();
        double double4 = simpleRegression0.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        simpleRegression0.addData(doubleArray42);
        double double46 = simpleRegression0.getTotalSumSquares();
        double double47 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getInterceptStdErr();
        long long7 = simpleRegression0.getN();
        double[] doubleArray9 = new double[] { 5000.0d };
        double[] doubleArray11 = new double[] { 5000.0d };
        double[] doubleArray13 = new double[] { 5000.0d };
        double[] doubleArray15 = new double[] { 5000.0d };
        double[] doubleArray17 = new double[] { 5000.0d };
        double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 };
        // The following exception was thrown during execution in test generation
        try {
            simpleRegression0.addData(doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[5000.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[5000.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[5000.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[5000.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[5000.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData(0.030303030303030304d, (double) 10L);
        double double14 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.getR();
        double double16 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getSlopeStdErr();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict(0.6983204134366925d);
        double double45 = simpleRegression0.predict(0.541396879312175d);
        double double47 = simpleRegression0.getSlopeConfidenceInterval(6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.2946963824289245d) + "'", double43 == (-0.2946963824289245d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-0.4531891518946872d) + "'", double45 == (-0.4531891518946872d));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2.053733234670214E-7d + "'", double47 == 2.053733234670214E-7d);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getR();
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        java.lang.Class<?> wildcardClass13 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double4 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSlopeConfidenceInterval(0.27658616728139623d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        long long10 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double12 = simpleRegression0.getMeanSquareError();
        double double13 = simpleRegression0.getSlopeStdErr();
        double double14 = simpleRegression0.getR();
        double double15 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getR();
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        double double7 = simpleRegression0.getR();
        java.lang.Class<?> wildcardClass8 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double11 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict((double) (short) -1);
        double double6 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSlopeConfidenceInterval((double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        double double59 = simpleRegression0.predict((double) (-1L));
        double double60 = simpleRegression0.getR();
        double double61 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-2.009999999999984d) + "'", double59 == (-2.009999999999984d));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.9999999999999999d + "'", double60 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.8189894035458565E-12d + "'", double61 == 1.8189894035458565E-12d);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSlopeConfidenceInterval((double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        long long10 = simpleRegression0.getN();
        double double12 = simpleRegression0.predict((double) 7L);
        java.lang.Class<?> wildcardClass13 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getR();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getSumSquaredErrors();
        double double9 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double42 = simpleRegression0.getSlopeConfidenceInterval(93.71511627906978d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        java.lang.Class<?> wildcardClass14 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double14 = simpleRegression10.predict((double) 10L);
        double double15 = simpleRegression10.getIntercept();
        double double16 = simpleRegression10.getRegressionSumSquares();
        long long17 = simpleRegression10.getN();
        double double18 = simpleRegression10.getR();
        double double19 = simpleRegression10.getR();
        double double20 = simpleRegression10.getSumSquaredErrors();
        double double21 = simpleRegression10.getSlopeStdErr();
        double double22 = simpleRegression10.getSumSquaredErrors();
        double double23 = simpleRegression10.getRSquare();
        double double24 = simpleRegression10.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long26 = simpleRegression25.getN();
        double double27 = simpleRegression25.getSumSquaredErrors();
        double double29 = simpleRegression25.predict((double) 10L);
        double double30 = simpleRegression25.getIntercept();
        double double31 = simpleRegression25.getRegressionSumSquares();
        long long32 = simpleRegression25.getN();
        double double33 = simpleRegression25.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        double double38 = simpleRegression34.predict((double) 10L);
        double double39 = simpleRegression34.getIntercept();
        double double40 = simpleRegression34.getRegressionSumSquares();
        long long41 = simpleRegression34.getN();
        double double42 = simpleRegression34.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression43 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long44 = simpleRegression43.getN();
        double double45 = simpleRegression43.getSumSquaredErrors();
        double double47 = simpleRegression43.predict((double) 10L);
        double double48 = simpleRegression43.getIntercept();
        simpleRegression43.addData((double) (byte) 100, (double) 100.0f);
        double double53 = simpleRegression43.predict((double) 100L);
        double double54 = simpleRegression43.getR();
        double[] doubleArray57 = new double[] { 100L, 100.0d };
        double[] doubleArray60 = new double[] { 100L, 100.0d };
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[] doubleArray66 = new double[] { 100L, 100.0d };
        double[] doubleArray69 = new double[] { 100L, 100.0d };
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[][] doubleArray73 = new double[][] { doubleArray57, doubleArray60, doubleArray63, doubleArray66, doubleArray69, doubleArray72 };
        simpleRegression43.addData(doubleArray73);
        simpleRegression34.addData(doubleArray73);
        simpleRegression25.addData(doubleArray73);
        simpleRegression10.addData(doubleArray73);
        simpleRegression0.addData(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = simpleRegression0.getSlopeConfidenceInterval((double) 4L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double[] doubleArray13 = new double[] { 1L, ' ' };
        double[] doubleArray16 = new double[] { 1L, ' ' };
        double[] doubleArray19 = new double[] { 1L, ' ' };
        double[] doubleArray22 = new double[] { 1L, ' ' };
        double[] doubleArray25 = new double[] { 1L, ' ' };
        double[] doubleArray28 = new double[] { 1L, ' ' };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        simpleRegression0.addData(doubleArray29);
        double double31 = simpleRegression0.getSlopeConfidenceInterval();
        double double32 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double15 = simpleRegression11.predict((double) 10L);
        double double16 = simpleRegression11.getIntercept();
        double double17 = simpleRegression11.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        long long21 = simpleRegression18.getN();
        long long22 = simpleRegression18.getN();
        double[][] doubleArray23 = new double[][] {};
        simpleRegression18.addData(doubleArray23);
        simpleRegression11.addData(doubleArray23);
        double double27 = simpleRegression11.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression28 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long29 = simpleRegression28.getN();
        double double30 = simpleRegression28.getSumSquaredErrors();
        double double32 = simpleRegression28.predict((double) 10L);
        double double33 = simpleRegression28.getIntercept();
        simpleRegression28.addData((double) (byte) 100, (double) 100.0f);
        double double38 = simpleRegression28.predict((double) 100L);
        double double39 = simpleRegression28.getR();
        double[] doubleArray42 = new double[] { 100L, 100.0d };
        double[] doubleArray45 = new double[] { 100L, 100.0d };
        double[] doubleArray48 = new double[] { 100L, 100.0d };
        double[] doubleArray51 = new double[] { 100L, 100.0d };
        double[] doubleArray54 = new double[] { 100L, 100.0d };
        double[] doubleArray57 = new double[] { 100L, 100.0d };
        double[][] doubleArray58 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57 };
        simpleRegression28.addData(doubleArray58);
        simpleRegression11.addData(doubleArray58);
        simpleRegression0.addData(doubleArray58);
        double double62 = simpleRegression0.getRSquare();
        double double63 = simpleRegression0.getIntercept();
        double double64 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(4.232527564042065E-9d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double[] doubleArray8 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray13 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray14 = new double[][] { doubleArray8, doubleArray13 };
        simpleRegression0.addData(doubleArray14);
        double double16 = simpleRegression0.getRegressionSumSquares();
        double double17 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = simpleRegression0.getSlopeConfidenceInterval((-0.2946963824289245d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getMeanSquareError();
        double double9 = simpleRegression5.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double13 = simpleRegression10.getRegressionSumSquares();
        simpleRegression10.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression10.addData(doubleArray47);
        simpleRegression5.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        double double52 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double54 = simpleRegression0.getSlopeConfidenceInterval(65.00710594315245d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.predict((double) (short) 0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.predict((double) (-1.0f));
        long long12 = simpleRegression0.getN();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getRegressionSumSquares();
        double double15 = simpleRegression0.getSlopeStdErr();
        double double16 = simpleRegression0.getRegressionSumSquares();
        long long17 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double10 = simpleRegression7.getRegressionSumSquares();
        simpleRegression7.addData(0.0d, (-1.0d));
        double double14 = simpleRegression7.getR();
        double double16 = simpleRegression7.predict(10.0d);
        double double18 = simpleRegression7.predict(100.0d);
        double double20 = simpleRegression7.predict((double) (short) 0);
        long long21 = simpleRegression7.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression22 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long23 = simpleRegression22.getN();
        double double24 = simpleRegression22.getSumSquaredErrors();
        double double26 = simpleRegression22.predict((double) 10L);
        double double27 = simpleRegression22.getIntercept();
        double double28 = simpleRegression22.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression29 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long30 = simpleRegression29.getN();
        double double31 = simpleRegression29.getSumSquaredErrors();
        long long32 = simpleRegression29.getN();
        long long33 = simpleRegression29.getN();
        double[][] doubleArray34 = new double[][] {};
        simpleRegression29.addData(doubleArray34);
        simpleRegression22.addData(doubleArray34);
        simpleRegression7.addData(doubleArray34);
        simpleRegression0.addData(doubleArray34);
        double double39 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double40 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getTotalSumSquares();
        double double14 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.16666666666666666d + "'", double12 == 0.16666666666666666d);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) 3L, (double) 0);
        double double9 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        simpleRegression0.addData((double) (short) 0, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval(3.637978807091713E-13d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double15 = simpleRegression11.predict((double) 10L);
        double double16 = simpleRegression11.getIntercept();
        double double17 = simpleRegression11.getRegressionSumSquares();
        long long18 = simpleRegression11.getN();
        double double19 = simpleRegression11.getR();
        double double20 = simpleRegression11.getSlope();
        double double21 = simpleRegression11.getRegressionSumSquares();
        double[] doubleArray24 = new double[] { 1L, ' ' };
        double[] doubleArray27 = new double[] { 1L, ' ' };
        double[] doubleArray30 = new double[] { 1L, ' ' };
        double[] doubleArray33 = new double[] { 1L, ' ' };
        double[] doubleArray36 = new double[] { 1L, ' ' };
        double[] doubleArray39 = new double[] { 1L, ' ' };
        double[][] doubleArray40 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39 };
        simpleRegression11.addData(doubleArray40);
        simpleRegression0.addData(doubleArray40);
        double double44 = simpleRegression0.getSlopeConfidenceInterval(0.2842377260981912d);
        java.lang.Class<?> wildcardClass45 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSlopeStdErr();
        double double15 = simpleRegression0.getMeanSquareError();
        java.lang.Class<?> wildcardClass16 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(96.93939393939395d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getMeanSquareError();
        double double5 = simpleRegression0.getRSquare();
        long long6 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getTotalSumSquares();
        double double8 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(1.6536267304962332E-13d, 9416.307692307693d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(0.9999999999999998d, (double) 100L);
        double double9 = simpleRegression0.getSumSquaredErrors();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        simpleRegression0.clear();
        double double4 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.predict((double) (byte) 1);
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.getR();
        simpleRegression0.clear();
        double double18 = simpleRegression0.getSlopeStdErr();
        double double19 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        java.lang.Class<?> wildcardClass42 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        simpleRegression0.addData((double) 10, (-1.0d));
        long long33 = simpleRegression0.getN();
        long long34 = simpleRegression0.getN();
        simpleRegression0.addData((double) (byte) 0, 0.6983204134366925d);
        double double38 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 9856.06263468293d + "'", double38 == 9856.06263468293d);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.addData(6.0d, (double) (short) 1);
        double double8 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getRSquare();
        double double12 = simpleRegression9.getTotalSumSquares();
        double double13 = simpleRegression9.getInterceptStdErr();
        double double14 = simpleRegression9.getRegressionSumSquares();
        double double15 = simpleRegression9.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        double double20 = simpleRegression16.predict((double) 10L);
        double double21 = simpleRegression16.getIntercept();
        double double22 = simpleRegression16.getRegressionSumSquares();
        long long23 = simpleRegression16.getN();
        double double24 = simpleRegression16.getR();
        double double25 = simpleRegression16.getSlope();
        double double26 = simpleRegression16.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression27 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long28 = simpleRegression27.getN();
        double double29 = simpleRegression27.getSumSquaredErrors();
        double double30 = simpleRegression27.getRegressionSumSquares();
        simpleRegression27.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        double double38 = simpleRegression34.predict((double) 10L);
        double double39 = simpleRegression34.getIntercept();
        simpleRegression34.addData((double) (byte) 100, (double) 100.0f);
        double double44 = simpleRegression34.predict((double) 100L);
        double double45 = simpleRegression34.getR();
        double[] doubleArray48 = new double[] { 100L, 100.0d };
        double[] doubleArray51 = new double[] { 100L, 100.0d };
        double[] doubleArray54 = new double[] { 100L, 100.0d };
        double[] doubleArray57 = new double[] { 100L, 100.0d };
        double[] doubleArray60 = new double[] { 100L, 100.0d };
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[][] doubleArray64 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        simpleRegression34.addData(doubleArray64);
        simpleRegression27.addData(doubleArray64);
        double double67 = simpleRegression27.getRSquare();
        double double68 = simpleRegression27.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression69 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long70 = simpleRegression69.getN();
        double double71 = simpleRegression69.getSumSquaredErrors();
        double double73 = simpleRegression69.predict((double) 10L);
        double double74 = simpleRegression69.getIntercept();
        double double75 = simpleRegression69.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression76 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long77 = simpleRegression76.getN();
        double double78 = simpleRegression76.getSumSquaredErrors();
        long long79 = simpleRegression76.getN();
        long long80 = simpleRegression76.getN();
        double[][] doubleArray81 = new double[][] {};
        simpleRegression76.addData(doubleArray81);
        simpleRegression69.addData(doubleArray81);
        simpleRegression27.addData(doubleArray81);
        simpleRegression16.addData(doubleArray81);
        simpleRegression9.addData(doubleArray81);
        simpleRegression0.addData(doubleArray81);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.9999999999999998d + "'", double67 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.9999999999999999d + "'", double68 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(doubleArray81);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        simpleRegression0.addData(0.6983204134366925d, (double) (byte) -1);
        double double15 = simpleRegression0.getSlopeConfidenceInterval();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        double double20 = simpleRegression16.predict((double) 10L);
        double double21 = simpleRegression16.getIntercept();
        double double22 = simpleRegression16.getRegressionSumSquares();
        double double23 = simpleRegression16.getSumSquaredErrors();
        double double24 = simpleRegression16.getMeanSquareError();
        double double25 = simpleRegression16.getRegressionSumSquares();
        double double26 = simpleRegression16.getSumSquaredErrors();
        double[] doubleArray30 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray34 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray38 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray42 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray46 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray50 = new double[] { (byte) 1, 0L, 'a' };
        double[][] doubleArray51 = new double[][] { doubleArray30, doubleArray34, doubleArray38, doubleArray42, doubleArray46, doubleArray50 };
        simpleRegression16.addData(doubleArray51);
        simpleRegression0.addData(doubleArray51);
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.23791906001465818d + "'", double15 == 0.23791906001465818d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval((double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getSlope();
        long long12 = simpleRegression0.getN();
        long long13 = simpleRegression0.getN();
        double double14 = simpleRegression0.getSlopeStdErr();
        double double15 = simpleRegression0.getSlopeStdErr();
        double double16 = simpleRegression0.getSlope();
        double double17 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval(0.9999999999999999d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        simpleRegression0.clear();
        double double59 = simpleRegression0.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        double double64 = simpleRegression60.predict((double) 10L);
        double double65 = simpleRegression60.getIntercept();
        double double66 = simpleRegression60.getRegressionSumSquares();
        long long67 = simpleRegression60.getN();
        double double68 = simpleRegression60.getR();
        double double69 = simpleRegression60.getSlope();
        double double70 = simpleRegression60.getRegressionSumSquares();
        simpleRegression60.addData((double) 100, Double.NaN);
        double double74 = simpleRegression60.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression75 = new org.apache.commons.math.stat.regression.SimpleRegression();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression76 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long77 = simpleRegression76.getN();
        double double78 = simpleRegression76.getRSquare();
        double double79 = simpleRegression76.getTotalSumSquares();
        double[] doubleArray84 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray89 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray90 = new double[][] { doubleArray84, doubleArray89 };
        simpleRegression76.addData(doubleArray90);
        simpleRegression75.addData(doubleArray90);
        simpleRegression60.addData(doubleArray90);
        simpleRegression0.addData(doubleArray90);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        simpleRegression0.clear();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getSumSquaredErrors();
        double double17 = simpleRegression13.predict((double) 10L);
        double double18 = simpleRegression13.getIntercept();
        simpleRegression13.addData((double) (byte) 100, (double) 100.0f);
        double double23 = simpleRegression13.predict((double) 100L);
        double double24 = simpleRegression13.getMeanSquareError();
        long long25 = simpleRegression13.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getRSquare();
        double double29 = simpleRegression26.getTotalSumSquares();
        double[] doubleArray34 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray39 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray40 = new double[][] { doubleArray34, doubleArray39 };
        simpleRegression26.addData(doubleArray40);
        simpleRegression13.addData(doubleArray40);
        simpleRegression0.addData(doubleArray40);
        double double44 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 6.0d + "'", double44 == 6.0d);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        long long10 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double12 = simpleRegression0.getMeanSquareError();
        double double13 = simpleRegression0.getSlopeStdErr();
        double double14 = simpleRegression0.getR();
        double double15 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        long long42 = simpleRegression0.getN();
        double double43 = simpleRegression0.getInterceptStdErr();
        double double44 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6L + "'", long42 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getIntercept();
        double double5 = simpleRegression0.getR();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getSumSquaredErrors();
        double double9 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double[] doubleArray8 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray13 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray14 = new double[][] { doubleArray8, doubleArray13 };
        simpleRegression0.addData(doubleArray14);
        double double16 = simpleRegression0.getRegressionSumSquares();
        double double17 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        double double4 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(96.96969696969698d, 0.007549314087103909d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        long long9 = simpleRegression0.getN();
        double double11 = simpleRegression0.predict(0.030303030303030304d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getIntercept();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData((-0.9999999999999838d), (double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(1.9431632708055285E-10d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double2 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        double double42 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-0.9999999999999838d) + "'", double42 == (-0.9999999999999838d));
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        long long14 = simpleRegression0.getN();
        double double15 = simpleRegression0.getInterceptStdErr();
        double double16 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getR();
        long long10 = simpleRegression0.getN();
        double double11 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.predict(Double.NaN);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        simpleRegression0.addData((double) 0L, (double) 'a');
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1.0d) + "'", double12 == (-1.0d));
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) 3L, (double) 0);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getTotalSumSquares();
        double double12 = simpleRegression9.getSlopeStdErr();
        double double14 = simpleRegression9.predict((double) 3L);
        double double15 = simpleRegression9.getRegressionSumSquares();
        double double16 = simpleRegression9.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getRSquare();
        double double20 = simpleRegression17.getRegressionSumSquares();
        double double21 = simpleRegression17.getRSquare();
        double double22 = simpleRegression17.getTotalSumSquares();
        double double23 = simpleRegression17.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression24 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long25 = simpleRegression24.getN();
        double double26 = simpleRegression24.getSumSquaredErrors();
        double double28 = simpleRegression24.predict((double) 10L);
        double double29 = simpleRegression24.getIntercept();
        simpleRegression24.addData((double) (byte) 100, (double) 100.0f);
        double double33 = simpleRegression24.getIntercept();
        double double34 = simpleRegression24.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression35 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long36 = simpleRegression35.getN();
        double double37 = simpleRegression35.getSumSquaredErrors();
        double double39 = simpleRegression35.predict((double) 10L);
        double double40 = simpleRegression35.getIntercept();
        simpleRegression35.addData((double) (byte) 100, (double) 100.0f);
        double double45 = simpleRegression35.predict((double) 100L);
        double double46 = simpleRegression35.getMeanSquareError();
        long long47 = simpleRegression35.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression48 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long49 = simpleRegression48.getN();
        double double50 = simpleRegression48.getRSquare();
        double double51 = simpleRegression48.getTotalSumSquares();
        double[] doubleArray56 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray61 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray62 = new double[][] { doubleArray56, doubleArray61 };
        simpleRegression48.addData(doubleArray62);
        simpleRegression35.addData(doubleArray62);
        simpleRegression24.addData(doubleArray62);
        simpleRegression17.addData(doubleArray62);
        simpleRegression9.addData(doubleArray62);
        simpleRegression0.addData(doubleArray62);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double8 = simpleRegression0.predict((double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        long long10 = simpleRegression0.getN();
        long long11 = simpleRegression0.getN();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getTotalSumSquares();
        long long14 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getSlope();
        double double42 = simpleRegression0.predict((double) 10L);
        double double43 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0099999999999998d + "'", double40 == 1.0099999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 9.100000000000014d + "'", double42 == 9.100000000000014d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.9999999999999999d + "'", double43 == 0.9999999999999999d);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getR();
        double double8 = simpleRegression0.predict((double) 100);
        double[] doubleArray15 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[] doubleArray22 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[][] doubleArray23 = new double[][] { doubleArray15, doubleArray22 };
        simpleRegression0.addData(doubleArray23);
        double double25 = simpleRegression0.getMeanSquareError();
        double double26 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        long long4 = simpleRegression0.getN();
        double double6 = simpleRegression0.predict(0.0d);
        long long7 = simpleRegression0.getN();
        double double9 = simpleRegression0.predict(0.9999999999999998d);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.getTotalSumSquares();
        double double17 = simpleRegression0.predict((-0.2946963824289245d));
        double double18 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        long long15 = simpleRegression12.getN();
        double double16 = simpleRegression12.getTotalSumSquares();
        double double17 = simpleRegression12.getSlopeStdErr();
        double double18 = simpleRegression12.getR();
        double double20 = simpleRegression12.predict((double) 100);
        double[] doubleArray27 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[] doubleArray34 = new double[] { 100, 1, 100, (-1L), '4', 6L };
        double[][] doubleArray35 = new double[][] { doubleArray27, doubleArray34 };
        simpleRegression12.addData(doubleArray35);
        simpleRegression0.addData(doubleArray35);
        double double38 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 1.0, 100.0, -1.0, 52.0, 6.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        double double51 = simpleRegression45.getRegressionSumSquares();
        long long52 = simpleRegression45.getN();
        double double53 = simpleRegression45.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        simpleRegression54.addData((double) (byte) 100, (double) 100.0f);
        double double64 = simpleRegression54.predict((double) 100L);
        double double65 = simpleRegression54.getR();
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        simpleRegression54.addData(doubleArray84);
        simpleRegression45.addData(doubleArray84);
        simpleRegression5.addData(doubleArray84);
        simpleRegression0.addData(doubleArray84);
        double double89 = simpleRegression0.getRSquare();
        double double90 = simpleRegression0.getIntercept();
        double double91 = simpleRegression0.getTotalSumSquares();
        double double92 = simpleRegression0.getMeanSquareError();
        double double93 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getSlopeStdErr();
        double double13 = simpleRegression0.getSlopeStdErr();
        java.lang.Class<?> wildcardClass14 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSlopeConfidenceInterval(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getRSquare();
        java.lang.Class<?> wildcardClass10 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) 10);
        double double17 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getR();
        double double13 = simpleRegression0.predict((double) (byte) -1);
        double double14 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData((double) 1, (-1.862645149230957E-9d));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        simpleRegression0.addData((double) 10L, (double) (-1.0f));
        long long8 = simpleRegression0.getN();
        double double10 = simpleRegression0.predict((-1.1666666666666667d));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        long long5 = simpleRegression0.getN();
        long long6 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getMeanSquareError();
        double double5 = simpleRegression0.getRSquare();
        long long6 = simpleRegression0.getN();
        java.lang.Class<?> wildcardClass7 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getSlope();
        double double13 = simpleRegression0.getInterceptStdErr();
        double double14 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getIntercept();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData((-0.9999999999999838d), (double) (-1));
        double double14 = simpleRegression0.getSumSquaredErrors();
        java.lang.Class<?> wildcardClass15 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        long long31 = simpleRegression0.getN();
        long long32 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression8 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long9 = simpleRegression8.getN();
        double double10 = simpleRegression8.getRSquare();
        double double11 = simpleRegression8.getRegressionSumSquares();
        double double12 = simpleRegression8.getRSquare();
        double double13 = simpleRegression8.getTotalSumSquares();
        double double14 = simpleRegression8.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double19 = simpleRegression15.predict((double) 10L);
        double double20 = simpleRegression15.getIntercept();
        simpleRegression15.addData((double) (byte) 100, (double) 100.0f);
        double double24 = simpleRegression15.getIntercept();
        double double25 = simpleRegression15.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getSumSquaredErrors();
        double double30 = simpleRegression26.predict((double) 10L);
        double double31 = simpleRegression26.getIntercept();
        simpleRegression26.addData((double) (byte) 100, (double) 100.0f);
        double double36 = simpleRegression26.predict((double) 100L);
        double double37 = simpleRegression26.getMeanSquareError();
        long long38 = simpleRegression26.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getRSquare();
        double double42 = simpleRegression39.getTotalSumSquares();
        double[] doubleArray47 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray53 = new double[][] { doubleArray47, doubleArray52 };
        simpleRegression39.addData(doubleArray53);
        simpleRegression26.addData(doubleArray53);
        simpleRegression15.addData(doubleArray53);
        simpleRegression8.addData(doubleArray53);
        simpleRegression0.addData(doubleArray53);
        java.lang.Class<?> wildcardClass59 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        double double17 = simpleRegression0.getTotalSumSquares();
        double double18 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression1 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long2 = simpleRegression1.getN();
        double double3 = simpleRegression1.getRSquare();
        double double4 = simpleRegression1.getTotalSumSquares();
        double[] doubleArray9 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray14 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray15 = new double[][] { doubleArray9, doubleArray14 };
        simpleRegression1.addData(doubleArray15);
        simpleRegression0.addData(doubleArray15);
        double double18 = simpleRegression0.getTotalSumSquares();
        double double19 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.getRegressionSumSquares();
        double double17 = simpleRegression0.getSlopeStdErr();
        double double18 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double21 = simpleRegression0.predict((-0.9999999999999838d));
        double double22 = simpleRegression0.getSlopeStdErr();
        double double23 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double8 = simpleRegression0.predict((double) (byte) 100);
        long long9 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval((double) 7L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double9 = simpleRegression0.predict(65.00710594315245d);
        double double10 = simpleRegression0.getIntercept();
        java.lang.Class<?> wildcardClass11 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.predict((double) (byte) 10);
        long long7 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getSumSquaredErrors();
        double double6 = simpleRegression0.getIntercept();
        double double7 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        simpleRegression0.addData(0.0d, (double) ' ');
        simpleRegression0.addData((double) 0L, 65.00710594315245d);
        java.lang.Class<?> wildcardClass50 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getR();
        double double7 = simpleRegression0.getSlopeStdErr();
        double double8 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getMeanSquareError();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double16 = simpleRegression15.getTotalSumSquares();
        simpleRegression15.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getMeanSquareError();
        double double24 = simpleRegression18.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long26 = simpleRegression25.getN();
        double double27 = simpleRegression25.getSumSquaredErrors();
        double double28 = simpleRegression25.getRegressionSumSquares();
        simpleRegression25.addData(0.0d, (-1.0d));
        double double32 = simpleRegression25.getR();
        double double34 = simpleRegression25.predict(10.0d);
        double double36 = simpleRegression25.predict(100.0d);
        double double38 = simpleRegression25.predict((double) (short) 0);
        long long39 = simpleRegression25.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression40 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long41 = simpleRegression40.getN();
        double double42 = simpleRegression40.getSumSquaredErrors();
        double double44 = simpleRegression40.predict((double) 10L);
        double double45 = simpleRegression40.getIntercept();
        double double46 = simpleRegression40.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression47 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long48 = simpleRegression47.getN();
        double double49 = simpleRegression47.getSumSquaredErrors();
        long long50 = simpleRegression47.getN();
        long long51 = simpleRegression47.getN();
        double[][] doubleArray52 = new double[][] {};
        simpleRegression47.addData(doubleArray52);
        simpleRegression40.addData(doubleArray52);
        simpleRegression25.addData(doubleArray52);
        simpleRegression18.addData(doubleArray52);
        simpleRegression15.addData(doubleArray52);
        simpleRegression0.addData(doubleArray52);
        double double59 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        long long50 = simpleRegression0.getN();
        long long51 = simpleRegression0.getN();
        double double52 = simpleRegression0.getSlopeConfidenceInterval();
        java.lang.Class<?> wildcardClass53 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 6L + "'", long50 == 6L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 6L + "'", long51 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(1.0d, Double.NaN);
        double double14 = simpleRegression0.getSlopeStdErr();
        double double15 = simpleRegression0.getSlopeStdErr();
        double double16 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        long long31 = simpleRegression0.getN();
        double double32 = simpleRegression0.getR();
        double double33 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        simpleRegression0.clear();
        double double8 = simpleRegression0.getTotalSumSquares();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        double double50 = simpleRegression0.getSlope();
        double double51 = simpleRegression0.getInterceptStdErr();
        double double52 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getIntercept();
        double double9 = simpleRegression0.getSlope();
        simpleRegression0.addData(0.9999999999999998d, 0.0d);
        double double13 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(4142.092174397623d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getInterceptStdErr();
        java.lang.Class<?> wildcardClass11 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double19 = simpleRegression15.predict((double) 10L);
        double double20 = simpleRegression15.getIntercept();
        simpleRegression15.addData((double) (byte) 100, (double) 100.0f);
        double double24 = simpleRegression15.getIntercept();
        double double25 = simpleRegression15.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getSumSquaredErrors();
        double double30 = simpleRegression26.predict((double) 10L);
        double double31 = simpleRegression26.getIntercept();
        simpleRegression26.addData((double) (byte) 100, (double) 100.0f);
        double double36 = simpleRegression26.predict((double) 100L);
        double double37 = simpleRegression26.getMeanSquareError();
        long long38 = simpleRegression26.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getRSquare();
        double double42 = simpleRegression39.getTotalSumSquares();
        double[] doubleArray47 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray53 = new double[][] { doubleArray47, doubleArray52 };
        simpleRegression39.addData(doubleArray53);
        simpleRegression26.addData(doubleArray53);
        simpleRegression15.addData(doubleArray53);
        simpleRegression0.addData(doubleArray53);
        double double58 = simpleRegression0.getRegressionSumSquares();
        long long59 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        double double64 = simpleRegression60.predict((double) 10L);
        double double65 = simpleRegression60.getMeanSquareError();
        double double66 = simpleRegression60.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression67 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long68 = simpleRegression67.getN();
        double double69 = simpleRegression67.getSumSquaredErrors();
        double double70 = simpleRegression67.getRegressionSumSquares();
        simpleRegression67.addData(0.0d, (-1.0d));
        double double74 = simpleRegression67.getR();
        double double76 = simpleRegression67.predict(10.0d);
        double double78 = simpleRegression67.predict(100.0d);
        double double80 = simpleRegression67.predict((double) (short) 0);
        long long81 = simpleRegression67.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression82 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long83 = simpleRegression82.getN();
        double double84 = simpleRegression82.getSumSquaredErrors();
        double double86 = simpleRegression82.predict((double) 10L);
        double double87 = simpleRegression82.getIntercept();
        double double88 = simpleRegression82.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression89 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long90 = simpleRegression89.getN();
        double double91 = simpleRegression89.getSumSquaredErrors();
        long long92 = simpleRegression89.getN();
        long long93 = simpleRegression89.getN();
        double[][] doubleArray94 = new double[][] {};
        simpleRegression89.addData(doubleArray94);
        simpleRegression82.addData(doubleArray94);
        simpleRegression67.addData(doubleArray94);
        simpleRegression60.addData(doubleArray94);
        simpleRegression0.addData(doubleArray94);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(doubleArray94);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        long long4 = simpleRegression0.getN();
        double double6 = simpleRegression0.predict(0.0d);
        long long7 = simpleRegression0.getN();
        double double9 = simpleRegression0.predict(0.9999999999999998d);
        double double10 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        java.lang.Class<?> wildcardClass12 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double[] doubleArray8 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray13 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray14 = new double[][] { doubleArray8, doubleArray13 };
        simpleRegression0.addData(doubleArray14);
        double double16 = simpleRegression0.getRegressionSumSquares();
        double double18 = simpleRegression0.predict(0.06787386507806925d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.predict((double) (short) 1);
        simpleRegression0.clear();
        double double15 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = simpleRegression0.getSlopeConfidenceInterval((double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getSlope();
        double double42 = simpleRegression0.predict((double) 10L);
        double double43 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0099999999999998d + "'", double40 == 1.0099999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 9.100000000000014d + "'", double42 == 9.100000000000014d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.9999999999999998d + "'", double43 == 0.9999999999999998d);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getMeanSquareError();
        double double13 = simpleRegression0.predict((double) 0L);
        double double14 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getTotalSumSquares();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        long long4 = simpleRegression0.getN();
        double double6 = simpleRegression0.predict(0.0d);
        double double7 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.predict(65.29134366925075d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        double double9 = simpleRegression0.predict(10.0d);
        double double11 = simpleRegression0.predict(100.0d);
        double double12 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getSlope();
        double double7 = simpleRegression0.getMeanSquareError();
        double double8 = simpleRegression0.getR();
        java.lang.Class<?> wildcardClass9 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData(0.030303030303030304d, (double) 10L);
        double double14 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.getRSquare();
        double double16 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval(0.007549314087103909d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        double double50 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData((-1.0d), (double) 1L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getRegressionSumSquares();
        long long2 = simpleRegression0.getN();
        double double4 = simpleRegression0.predict((double) 10L);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        simpleRegression0.addData((double) 10, (-1.0d));
        long long33 = simpleRegression0.getN();
        double double34 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3396.9796511627906d + "'", double34 == 3396.9796511627906d);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        simpleRegression0.clear();
        double double4 = simpleRegression0.getSumSquaredErrors();
        double double5 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getSlopeStdErr();
        double double7 = simpleRegression0.getTotalSumSquares();
        double double8 = simpleRegression0.getIntercept();
        double double9 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        double double42 = simpleRegression0.getInterceptStdErr();
        double double43 = simpleRegression0.getSignificance();
        double double44 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 6.031565971695669E-7d + "'", double42 == 6.031565971695669E-7d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.9999999999999999d + "'", double44 == 0.9999999999999999d);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getIntercept();
        simpleRegression0.addData(6793.959302325581d, (double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        long long19 = simpleRegression16.getN();
        double double20 = simpleRegression16.getTotalSumSquares();
        double double21 = simpleRegression16.getSlopeStdErr();
        double double22 = simpleRegression16.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression23 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long24 = simpleRegression23.getN();
        double double25 = simpleRegression23.getSumSquaredErrors();
        double double27 = simpleRegression23.predict((double) 10L);
        double double28 = simpleRegression23.getIntercept();
        double double29 = simpleRegression23.getRegressionSumSquares();
        long long30 = simpleRegression23.getN();
        double double31 = simpleRegression23.getR();
        double double32 = simpleRegression23.getSlope();
        double double33 = simpleRegression23.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        double double38 = simpleRegression34.predict((double) 10L);
        double double39 = simpleRegression34.getIntercept();
        simpleRegression34.addData((double) (byte) 100, (double) 100.0f);
        double double44 = simpleRegression34.predict((double) 100L);
        double double45 = simpleRegression34.getMeanSquareError();
        long long46 = simpleRegression34.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression47 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long48 = simpleRegression47.getN();
        double double49 = simpleRegression47.getSumSquaredErrors();
        double double51 = simpleRegression47.predict((double) 10L);
        double double52 = simpleRegression47.getIntercept();
        simpleRegression47.addData((double) (byte) 100, (double) 100.0f);
        double double57 = simpleRegression47.predict((double) 100L);
        double double58 = simpleRegression47.getMeanSquareError();
        long long59 = simpleRegression47.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getRSquare();
        double double63 = simpleRegression60.getTotalSumSquares();
        double[] doubleArray68 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray73 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray74 = new double[][] { doubleArray68, doubleArray73 };
        simpleRegression60.addData(doubleArray74);
        simpleRegression47.addData(doubleArray74);
        simpleRegression34.addData(doubleArray74);
        simpleRegression23.addData(doubleArray74);
        simpleRegression16.addData(doubleArray74);
        simpleRegression0.addData(doubleArray74);
        double double81 = simpleRegression0.getSumSquaredErrors();
        long long82 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 3L + "'", long82 == 3L);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double4 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        double double7 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData((double) 2L, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        simpleRegression0.clear();
        double double59 = simpleRegression0.getInterceptStdErr();
        double double60 = simpleRegression0.getRegressionSumSquares();
        double double61 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getMeanSquareError();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getRegressionSumSquares();
        double double15 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData(4142.092174397623d, (double) (short) 100);
        double double19 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) -1, 1.8189894035458565E-12d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double19 = simpleRegression15.predict((double) 10L);
        double double20 = simpleRegression15.getIntercept();
        simpleRegression15.addData((double) (byte) 100, (double) 100.0f);
        double double24 = simpleRegression15.getIntercept();
        double double25 = simpleRegression15.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getSumSquaredErrors();
        double double30 = simpleRegression26.predict((double) 10L);
        double double31 = simpleRegression26.getIntercept();
        simpleRegression26.addData((double) (byte) 100, (double) 100.0f);
        double double36 = simpleRegression26.predict((double) 100L);
        double double37 = simpleRegression26.getMeanSquareError();
        long long38 = simpleRegression26.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getRSquare();
        double double42 = simpleRegression39.getTotalSumSquares();
        double[] doubleArray47 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray53 = new double[][] { doubleArray47, doubleArray52 };
        simpleRegression39.addData(doubleArray53);
        simpleRegression26.addData(doubleArray53);
        simpleRegression15.addData(doubleArray53);
        simpleRegression0.addData(doubleArray53);
        double double58 = simpleRegression0.getRegressionSumSquares();
        double double59 = simpleRegression0.getRegressionSumSquares();
        double double60 = simpleRegression0.getSumSquaredErrors();
        double double62 = simpleRegression0.predict((-1.1666666666666667d));
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = simpleRegression0.getSlopeConfidenceInterval((double) 4L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getSumSquaredErrors();
        java.lang.Class<?> wildcardClass5 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getIntercept();
        simpleRegression0.addData(6793.959302325581d, (double) (-1L));
        java.lang.Class<?> wildcardClass16 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getTotalSumSquares();
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getRSquare();
        double double16 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSlopeConfidenceInterval((double) 8L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(1.0d, Double.NaN);
        double double14 = simpleRegression0.getInterceptStdErr();
        double double15 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double14 = simpleRegression11.getRegressionSumSquares();
        simpleRegression11.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getR();
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        simpleRegression18.addData(doubleArray48);
        simpleRegression11.addData(doubleArray48);
        double double51 = simpleRegression11.getRSquare();
        double double52 = simpleRegression11.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression53 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long54 = simpleRegression53.getN();
        double double55 = simpleRegression53.getSumSquaredErrors();
        double double57 = simpleRegression53.predict((double) 10L);
        double double58 = simpleRegression53.getIntercept();
        double double59 = simpleRegression53.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        long long63 = simpleRegression60.getN();
        long long64 = simpleRegression60.getN();
        double[][] doubleArray65 = new double[][] {};
        simpleRegression60.addData(doubleArray65);
        simpleRegression53.addData(doubleArray65);
        simpleRegression11.addData(doubleArray65);
        simpleRegression0.addData(doubleArray65);
        double double70 = simpleRegression0.getSlope();
        double double71 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.9999999999999998d + "'", double51 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.9999999999999999d + "'", double52 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (-1), 6.031565971695669E-7d);
        double double13 = simpleRegression0.getSlopeStdErr();
        double double14 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression40 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long41 = simpleRegression40.getN();
        double double42 = simpleRegression40.getSumSquaredErrors();
        double double44 = simpleRegression40.predict((double) 10L);
        double double45 = simpleRegression40.getIntercept();
        double double46 = simpleRegression40.getRegressionSumSquares();
        long long47 = simpleRegression40.getN();
        double double48 = simpleRegression40.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        simpleRegression49.addData((double) (byte) 100, (double) 100.0f);
        double double59 = simpleRegression49.predict((double) 100L);
        double double60 = simpleRegression49.getR();
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[] doubleArray66 = new double[] { 100L, 100.0d };
        double[] doubleArray69 = new double[] { 100L, 100.0d };
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[][] doubleArray79 = new double[][] { doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        simpleRegression49.addData(doubleArray79);
        simpleRegression40.addData(doubleArray79);
        simpleRegression0.addData(doubleArray79);
        double double83 = simpleRegression0.getRegressionSumSquares();
        double double84 = simpleRegression0.getInterceptStdErr();
        double double85 = simpleRegression0.getIntercept();
        double double86 = simpleRegression0.getSumSquaredErrors();
        double double87 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 9416.307692307693d + "'", double83 == 9416.307692307693d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4.066480948555191E-7d + "'", double84 == 4.066480948555191E-7d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + (-1.0d) + "'", double85 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.8189894035458565E-12d + "'", double86 == 1.8189894035458565E-12d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.8189894035458565E-12d + "'", double87 == 1.8189894035458565E-12d);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double14 = simpleRegression11.getRegressionSumSquares();
        simpleRegression11.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getR();
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        simpleRegression18.addData(doubleArray48);
        simpleRegression11.addData(doubleArray48);
        double double51 = simpleRegression11.getRSquare();
        double double52 = simpleRegression11.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression53 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long54 = simpleRegression53.getN();
        double double55 = simpleRegression53.getSumSquaredErrors();
        double double57 = simpleRegression53.predict((double) 10L);
        double double58 = simpleRegression53.getIntercept();
        double double59 = simpleRegression53.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        long long63 = simpleRegression60.getN();
        long long64 = simpleRegression60.getN();
        double[][] doubleArray65 = new double[][] {};
        simpleRegression60.addData(doubleArray65);
        simpleRegression53.addData(doubleArray65);
        simpleRegression11.addData(doubleArray65);
        simpleRegression0.addData(doubleArray65);
        double double70 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double71 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.9999999999999998d + "'", double51 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.9999999999999999d + "'", double52 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 0, (double) 0.0f);
        double double8 = simpleRegression0.getInterceptStdErr();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getIntercept();
        double double11 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        java.lang.Class<?> wildcardClass9 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getInterceptStdErr();
        long long11 = simpleRegression0.getN();
        double double12 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        simpleRegression0.clear();
        double double10 = simpleRegression0.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double15 = simpleRegression11.predict((double) 10L);
        double double16 = simpleRegression11.getIntercept();
        double double17 = simpleRegression11.getRegressionSumSquares();
        long long18 = simpleRegression11.getN();
        double double19 = simpleRegression11.getR();
        double double20 = simpleRegression11.getR();
        double double21 = simpleRegression11.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression22 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long23 = simpleRegression22.getN();
        double double24 = simpleRegression22.getSumSquaredErrors();
        double double26 = simpleRegression22.predict((double) 10L);
        double double27 = simpleRegression22.getIntercept();
        double double28 = simpleRegression22.getRegressionSumSquares();
        long long29 = simpleRegression22.getN();
        double double30 = simpleRegression22.getR();
        double double31 = simpleRegression22.getSlope();
        double double32 = simpleRegression22.getRegressionSumSquares();
        double[] doubleArray35 = new double[] { 1L, ' ' };
        double[] doubleArray38 = new double[] { 1L, ' ' };
        double[] doubleArray41 = new double[] { 1L, ' ' };
        double[] doubleArray44 = new double[] { 1L, ' ' };
        double[] doubleArray47 = new double[] { 1L, ' ' };
        double[] doubleArray50 = new double[] { 1L, ' ' };
        double[][] doubleArray51 = new double[][] { doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47, doubleArray50 };
        simpleRegression22.addData(doubleArray51);
        simpleRegression11.addData(doubleArray51);
        simpleRegression0.addData(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = simpleRegression0.getSlopeConfidenceInterval(93.71511627906978d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        double double2 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData((double) 100.0f, 1.4004436411137009E7d);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval(1.5555555555555556d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.predict((-0.9999999999999838d));
        double double11 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        simpleRegression0.addData(9856.06263468293d, 0.23752863392368403d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression40 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long41 = simpleRegression40.getN();
        double double42 = simpleRegression40.getSumSquaredErrors();
        double double44 = simpleRegression40.predict((double) 10L);
        double double45 = simpleRegression40.getIntercept();
        double double46 = simpleRegression40.getRegressionSumSquares();
        long long47 = simpleRegression40.getN();
        double double48 = simpleRegression40.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        simpleRegression49.addData((double) (byte) 100, (double) 100.0f);
        double double59 = simpleRegression49.predict((double) 100L);
        double double60 = simpleRegression49.getR();
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[] doubleArray66 = new double[] { 100L, 100.0d };
        double[] doubleArray69 = new double[] { 100L, 100.0d };
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[][] doubleArray79 = new double[][] { doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        simpleRegression49.addData(doubleArray79);
        simpleRegression40.addData(doubleArray79);
        simpleRegression0.addData(doubleArray79);
        double double83 = simpleRegression0.getRegressionSumSquares();
        double double85 = simpleRegression0.predict((-0.2946963824289245d));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 9416.307692307693d + "'", double83 == 9416.307692307693d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + (-1.2976433462532138d) + "'", double85 == (-1.2976433462532138d));
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getMeanSquareError();
        double double48 = simpleRegression42.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double52 = simpleRegression49.getRegressionSumSquares();
        simpleRegression49.addData(0.0d, (-1.0d));
        double double56 = simpleRegression49.getR();
        double double58 = simpleRegression49.predict(10.0d);
        double double60 = simpleRegression49.predict(100.0d);
        double double62 = simpleRegression49.predict((double) (short) 0);
        long long63 = simpleRegression49.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression64 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long65 = simpleRegression64.getN();
        double double66 = simpleRegression64.getSumSquaredErrors();
        double double68 = simpleRegression64.predict((double) 10L);
        double double69 = simpleRegression64.getIntercept();
        double double70 = simpleRegression64.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression71 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long72 = simpleRegression71.getN();
        double double73 = simpleRegression71.getSumSquaredErrors();
        long long74 = simpleRegression71.getN();
        long long75 = simpleRegression71.getN();
        double[][] doubleArray76 = new double[][] {};
        simpleRegression71.addData(doubleArray76);
        simpleRegression64.addData(doubleArray76);
        simpleRegression49.addData(doubleArray76);
        simpleRegression42.addData(doubleArray76);
        simpleRegression0.addData(doubleArray76);
        long long82 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999998d + "'", double41 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 7L + "'", long82 == 7L);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getMeanSquareError();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double13 = simpleRegression10.getTotalSumSquares();
        double double14 = simpleRegression10.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double16 = simpleRegression15.getSumSquaredErrors();
        double double17 = simpleRegression15.getSumSquaredErrors();
        simpleRegression15.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression19 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long20 = simpleRegression19.getN();
        double double21 = simpleRegression19.getSumSquaredErrors();
        double double23 = simpleRegression19.predict((double) 10L);
        double double24 = simpleRegression19.getIntercept();
        simpleRegression19.addData((double) (byte) 100, (double) 100.0f);
        double double29 = simpleRegression19.predict((double) 100L);
        double double30 = simpleRegression19.getMeanSquareError();
        long long31 = simpleRegression19.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression32 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long33 = simpleRegression32.getN();
        double double34 = simpleRegression32.getRSquare();
        double double35 = simpleRegression32.getTotalSumSquares();
        double[] doubleArray40 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray45 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray46 = new double[][] { doubleArray40, doubleArray45 };
        simpleRegression32.addData(doubleArray46);
        simpleRegression19.addData(doubleArray46);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression19.addData(doubleArray54);
        simpleRegression15.addData(doubleArray54);
        simpleRegression10.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        double double60 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getR();
        double double6 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData((double) 100L, 0.0d);
        simpleRegression0.clear();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getR();
        java.lang.Class<?> wildcardClass13 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSlope();
        double double11 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) 'a', (double) (byte) 100);
        double double9 = simpleRegression0.getMeanSquareError();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getRegressionSumSquares();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getMeanSquareError();
        double double5 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double15 = simpleRegression11.predict((double) 10L);
        double double16 = simpleRegression11.getIntercept();
        double double17 = simpleRegression11.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        long long21 = simpleRegression18.getN();
        long long22 = simpleRegression18.getN();
        double[][] doubleArray23 = new double[][] {};
        simpleRegression18.addData(doubleArray23);
        simpleRegression11.addData(doubleArray23);
        double double27 = simpleRegression11.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression28 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long29 = simpleRegression28.getN();
        double double30 = simpleRegression28.getSumSquaredErrors();
        double double32 = simpleRegression28.predict((double) 10L);
        double double33 = simpleRegression28.getIntercept();
        simpleRegression28.addData((double) (byte) 100, (double) 100.0f);
        double double38 = simpleRegression28.predict((double) 100L);
        double double39 = simpleRegression28.getR();
        double[] doubleArray42 = new double[] { 100L, 100.0d };
        double[] doubleArray45 = new double[] { 100L, 100.0d };
        double[] doubleArray48 = new double[] { 100L, 100.0d };
        double[] doubleArray51 = new double[] { 100L, 100.0d };
        double[] doubleArray54 = new double[] { 100L, 100.0d };
        double[] doubleArray57 = new double[] { 100L, 100.0d };
        double[][] doubleArray58 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57 };
        simpleRegression28.addData(doubleArray58);
        simpleRegression11.addData(doubleArray58);
        simpleRegression0.addData(doubleArray58);
        double double62 = simpleRegression0.getSlopeStdErr();
        double double64 = simpleRegression0.predict(Double.NaN);
        java.lang.Class<?> wildcardClass65 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSumSquaredErrors();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getTotalSumSquares();
        double double7 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        double double11 = simpleRegression7.getRSquare();
        double[] doubleArray16 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray21 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray26 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[][] doubleArray27 = new double[][] { doubleArray16, doubleArray21, doubleArray26 };
        simpleRegression7.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        double double30 = simpleRegression0.getR();
        double double31 = simpleRegression0.getSignificance();
        double double32 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getMeanSquareError();
        long long7 = simpleRegression0.getN();
        long long8 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSlopeConfidenceInterval((double) 3L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getRSquare();
        double double13 = simpleRegression10.getRegressionSumSquares();
        double double14 = simpleRegression10.getSlope();
        simpleRegression10.addData((double) (byte) 10, (double) (-1.0f));
        simpleRegression10.addData((double) 0L, (double) 'a');
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression21 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long22 = simpleRegression21.getN();
        double double23 = simpleRegression21.getSumSquaredErrors();
        double double25 = simpleRegression21.predict((double) 10L);
        double double26 = simpleRegression21.getIntercept();
        double double27 = simpleRegression21.getRegressionSumSquares();
        double double28 = simpleRegression21.getSumSquaredErrors();
        double double29 = simpleRegression21.getMeanSquareError();
        double double30 = simpleRegression21.getRegressionSumSquares();
        double double31 = simpleRegression21.getSumSquaredErrors();
        double[] doubleArray35 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray39 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray43 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray47 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray51 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray55 = new double[] { (byte) 1, 0L, 'a' };
        double[][] doubleArray56 = new double[][] { doubleArray35, doubleArray39, doubleArray43, doubleArray47, doubleArray51, doubleArray55 };
        simpleRegression21.addData(doubleArray56);
        simpleRegression10.addData(doubleArray56);
        simpleRegression0.addData(doubleArray56);
        double double60 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        double double17 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getIntercept();
        double double5 = simpleRegression0.getR();
        long long6 = simpleRegression0.getN();
        double double7 = simpleRegression0.getR();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSumSquaredErrors();
        double double10 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval((double) 6L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        double double17 = simpleRegression0.getTotalSumSquares();
        double double18 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double9 = simpleRegression5.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double13 = simpleRegression10.getRegressionSumSquares();
        simpleRegression10.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression10.addData(doubleArray47);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression50 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long51 = simpleRegression50.getN();
        double double52 = simpleRegression50.getSumSquaredErrors();
        double double54 = simpleRegression50.predict((double) 10L);
        double double55 = simpleRegression50.getIntercept();
        double double56 = simpleRegression50.getRegressionSumSquares();
        long long57 = simpleRegression50.getN();
        double double58 = simpleRegression50.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression59 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long60 = simpleRegression59.getN();
        double double61 = simpleRegression59.getSumSquaredErrors();
        double double63 = simpleRegression59.predict((double) 10L);
        double double64 = simpleRegression59.getIntercept();
        simpleRegression59.addData((double) (byte) 100, (double) 100.0f);
        double double69 = simpleRegression59.predict((double) 100L);
        double double70 = simpleRegression59.getR();
        double[] doubleArray73 = new double[] { 100L, 100.0d };
        double[] doubleArray76 = new double[] { 100L, 100.0d };
        double[] doubleArray79 = new double[] { 100L, 100.0d };
        double[] doubleArray82 = new double[] { 100L, 100.0d };
        double[] doubleArray85 = new double[] { 100L, 100.0d };
        double[] doubleArray88 = new double[] { 100L, 100.0d };
        double[][] doubleArray89 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85, doubleArray88 };
        simpleRegression59.addData(doubleArray89);
        simpleRegression50.addData(doubleArray89);
        simpleRegression10.addData(doubleArray89);
        simpleRegression5.addData(doubleArray89);
        simpleRegression0.addData(doubleArray89);
        double double95 = simpleRegression0.getSlopeStdErr();
        double double96 = simpleRegression0.getMeanSquareError();
        double double97 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue(Double.isNaN(double96));
        org.junit.Assert.assertTrue(Double.isNaN(double97));
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.addData(93.71511627906978d, (double) (short) 100);
        double double16 = simpleRegression0.getTotalSumSquares();
        double double17 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getSlope();
        double double12 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getIntercept();
        long long10 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        simpleRegression0.clear();
        double double59 = simpleRegression0.getSlope();
        double double60 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double62 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        double double51 = simpleRegression45.getRegressionSumSquares();
        long long52 = simpleRegression45.getN();
        double double53 = simpleRegression45.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        simpleRegression54.addData((double) (byte) 100, (double) 100.0f);
        double double64 = simpleRegression54.predict((double) 100L);
        double double65 = simpleRegression54.getR();
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        simpleRegression54.addData(doubleArray84);
        simpleRegression45.addData(doubleArray84);
        simpleRegression5.addData(doubleArray84);
        simpleRegression0.addData(doubleArray84);
        double double89 = simpleRegression0.getRSquare();
        double double90 = simpleRegression0.getSignificance();
        double double91 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = simpleRegression0.getSlopeConfidenceInterval(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        long long31 = simpleRegression0.getN();
        simpleRegression0.addData(10.0d, (-1.0d));
        double double35 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData((double) (byte) 0, 1.0099999999999998d);
        simpleRegression0.clear();
        long long40 = simpleRegression0.getN();
        double double41 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.6983204134366925d + "'", double35 == 0.6983204134366925d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getTotalSumSquares();
        double double14 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.predict((double) (short) 1);
        double double18 = simpleRegression0.predict((double) '#');
        long long19 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getRegressionSumSquares();
        double double16 = simpleRegression0.predict(4142.092174397623d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        double double7 = simpleRegression0.getSlope();
        double double9 = simpleRegression0.predict(0.9999999999999998d);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        long long15 = simpleRegression0.getN();
        double double16 = simpleRegression0.getR();
        double double17 = simpleRegression0.getMeanSquareError();
        double double18 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.addData(0.0d, 6272.666666119261d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getMeanSquareError();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        double double42 = simpleRegression0.getSignificance();
        double double43 = simpleRegression0.getSlope();
        double double44 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        simpleRegression0.addData((double) (short) 0, (double) (byte) 100);
        double double12 = simpleRegression0.getRSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getIntercept();
        double double14 = simpleRegression0.predict(7.199999999999999d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getIntercept();
        double double5 = simpleRegression0.getR();
        simpleRegression0.addData((double) (-1), 0.5366294777987983d);
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getIntercept();
        simpleRegression0.addData(6793.959302325581d, (double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        long long19 = simpleRegression16.getN();
        double double20 = simpleRegression16.getTotalSumSquares();
        double double21 = simpleRegression16.getSlopeStdErr();
        double double22 = simpleRegression16.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression23 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long24 = simpleRegression23.getN();
        double double25 = simpleRegression23.getSumSquaredErrors();
        double double27 = simpleRegression23.predict((double) 10L);
        double double28 = simpleRegression23.getIntercept();
        double double29 = simpleRegression23.getRegressionSumSquares();
        long long30 = simpleRegression23.getN();
        double double31 = simpleRegression23.getR();
        double double32 = simpleRegression23.getSlope();
        double double33 = simpleRegression23.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        double double38 = simpleRegression34.predict((double) 10L);
        double double39 = simpleRegression34.getIntercept();
        simpleRegression34.addData((double) (byte) 100, (double) 100.0f);
        double double44 = simpleRegression34.predict((double) 100L);
        double double45 = simpleRegression34.getMeanSquareError();
        long long46 = simpleRegression34.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression47 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long48 = simpleRegression47.getN();
        double double49 = simpleRegression47.getSumSquaredErrors();
        double double51 = simpleRegression47.predict((double) 10L);
        double double52 = simpleRegression47.getIntercept();
        simpleRegression47.addData((double) (byte) 100, (double) 100.0f);
        double double57 = simpleRegression47.predict((double) 100L);
        double double58 = simpleRegression47.getMeanSquareError();
        long long59 = simpleRegression47.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getRSquare();
        double double63 = simpleRegression60.getTotalSumSquares();
        double[] doubleArray68 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray73 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray74 = new double[][] { doubleArray68, doubleArray73 };
        simpleRegression60.addData(doubleArray74);
        simpleRegression47.addData(doubleArray74);
        simpleRegression34.addData(doubleArray74);
        simpleRegression23.addData(doubleArray74);
        simpleRegression16.addData(doubleArray74);
        simpleRegression0.addData(doubleArray74);
        double double81 = simpleRegression0.getSumSquaredErrors();
        double double82 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-1.0d) + "'", double82 == (-1.0d));
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getSlope();
        long long12 = simpleRegression0.getN();
        long long13 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSlopeConfidenceInterval(0.007549314087103909d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getIntercept();
        double double3 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getSlopeStdErr();
        long long11 = simpleRegression0.getN();
        simpleRegression0.addData((double) 0, 6.514835844650013E-9d);
        double double15 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double[] doubleArray14 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray18 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray22 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray26 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray30 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray34 = new double[] { (byte) 1, 0L, 'a' };
        double[][] doubleArray35 = new double[][] { doubleArray14, doubleArray18, doubleArray22, doubleArray26, doubleArray30, doubleArray34 };
        simpleRegression0.addData(doubleArray35);
        simpleRegression0.addData((double) 4L, 20.57675335994694d);
        double double40 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.2737367544323207E-14d + "'", double40 == 2.2737367544323207E-14d);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval((-0.4531891518946872d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRegressionSumSquares();
        double double13 = simpleRegression0.getR();
        double double14 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double4 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSlopeStdErr();
        double double15 = simpleRegression0.getMeanSquareError();
        long long16 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = simpleRegression0.getSlopeConfidenceInterval((double) 4L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 0, (double) 0.0f);
        double double8 = simpleRegression0.getInterceptStdErr();
        java.lang.Class<?> wildcardClass9 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        long long42 = simpleRegression0.getN();
        simpleRegression0.addData(5000.0d, 4142.092174397623d);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = simpleRegression0.getSlopeConfidenceInterval((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6L + "'", long42 == 6L);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        double double30 = simpleRegression0.getSignificance();
        double double31 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression4 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long5 = simpleRegression4.getN();
        double double6 = simpleRegression4.getSumSquaredErrors();
        double double8 = simpleRegression4.predict((double) 10L);
        double double9 = simpleRegression4.getIntercept();
        simpleRegression4.addData((double) (byte) 100, (double) 100.0f);
        double double14 = simpleRegression4.predict((double) 100L);
        double double15 = simpleRegression4.getMeanSquareError();
        long long16 = simpleRegression4.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getRSquare();
        double double20 = simpleRegression17.getTotalSumSquares();
        double[] doubleArray25 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray30 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray31 = new double[][] { doubleArray25, doubleArray30 };
        simpleRegression17.addData(doubleArray31);
        simpleRegression4.addData(doubleArray31);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        long long37 = simpleRegression34.getN();
        long long38 = simpleRegression34.getN();
        double[][] doubleArray39 = new double[][] {};
        simpleRegression34.addData(doubleArray39);
        simpleRegression4.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        long long43 = simpleRegression0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        simpleRegression0.addData(0.6983204134366925d, (double) (byte) -1);
        double double15 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(1.8189894035458565E-12d, 32.00236864771749d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.007549314087103909d + "'", double15 == 0.007549314087103909d);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getSlope();
        double double8 = simpleRegression0.predict(5000.0d);
        double double9 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        double double7 = simpleRegression0.getR();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getRSquare();
        java.lang.Class<?> wildcardClass14 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        long long30 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression31 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long32 = simpleRegression31.getN();
        double double33 = simpleRegression31.getSumSquaredErrors();
        double double35 = simpleRegression31.predict((double) 10L);
        double double36 = simpleRegression31.getIntercept();
        simpleRegression31.addData((double) (byte) 100, (double) 100.0f);
        double double41 = simpleRegression31.predict((double) 100L);
        double double42 = simpleRegression31.getMeanSquareError();
        long long43 = simpleRegression31.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression44 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long45 = simpleRegression44.getN();
        double double46 = simpleRegression44.getRSquare();
        double double47 = simpleRegression44.getTotalSumSquares();
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray57 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray58 = new double[][] { doubleArray52, doubleArray57 };
        simpleRegression44.addData(doubleArray58);
        simpleRegression31.addData(doubleArray58);
        simpleRegression0.addData(doubleArray58);
        double double63 = simpleRegression0.predict((double) 1.0f);
        double double65 = simpleRegression0.getSlopeConfidenceInterval(0.23791906001465818d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 97.0d + "'", double63 == 97.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2.856376132425441E-10d + "'", double65 == 2.856376132425441E-10d);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression8 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double9 = simpleRegression8.getSumSquaredErrors();
        double double10 = simpleRegression8.getTotalSumSquares();
        double double11 = simpleRegression8.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double15 = simpleRegression12.getRegressionSumSquares();
        simpleRegression12.addData(0.0d, (-1.0d));
        double double19 = simpleRegression12.getR();
        double double21 = simpleRegression12.predict(10.0d);
        double double23 = simpleRegression12.predict(100.0d);
        double double25 = simpleRegression12.predict((double) (short) 0);
        long long26 = simpleRegression12.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression27 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long28 = simpleRegression27.getN();
        double double29 = simpleRegression27.getSumSquaredErrors();
        double double31 = simpleRegression27.predict((double) 10L);
        double double32 = simpleRegression27.getIntercept();
        double double33 = simpleRegression27.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression34 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long35 = simpleRegression34.getN();
        double double36 = simpleRegression34.getSumSquaredErrors();
        long long37 = simpleRegression34.getN();
        long long38 = simpleRegression34.getN();
        double[][] doubleArray39 = new double[][] {};
        simpleRegression34.addData(doubleArray39);
        simpleRegression27.addData(doubleArray39);
        simpleRegression12.addData(doubleArray39);
        simpleRegression8.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) 'a', (double) (byte) 100);
        double double9 = simpleRegression0.getMeanSquareError();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getSumSquaredErrors();
        double double7 = simpleRegression0.getR();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getInterceptStdErr();
        double double11 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.addData((-0.2946963824289245d), (double) ' ');
        double double15 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double14 = simpleRegression11.getRegressionSumSquares();
        simpleRegression11.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getR();
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        simpleRegression18.addData(doubleArray48);
        simpleRegression11.addData(doubleArray48);
        double double51 = simpleRegression11.getRSquare();
        double double52 = simpleRegression11.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression53 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long54 = simpleRegression53.getN();
        double double55 = simpleRegression53.getSumSquaredErrors();
        double double57 = simpleRegression53.predict((double) 10L);
        double double58 = simpleRegression53.getIntercept();
        double double59 = simpleRegression53.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getSumSquaredErrors();
        long long63 = simpleRegression60.getN();
        long long64 = simpleRegression60.getN();
        double[][] doubleArray65 = new double[][] {};
        simpleRegression60.addData(doubleArray65);
        simpleRegression53.addData(doubleArray65);
        simpleRegression11.addData(doubleArray65);
        simpleRegression0.addData(doubleArray65);
        double double70 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.9999999999999998d + "'", double51 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.9999999999999999d + "'", double52 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSlopeStdErr();
        double double15 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        double double44 = simpleRegression0.getIntercept();
        double double45 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-0.9999999999999838d) + "'", double44 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 6.031565971695669E-7d + "'", double45 == 6.031565971695669E-7d);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getSlope();
        long long12 = simpleRegression0.getN();
        double double13 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSlopeConfidenceInterval(0.6812154343391408d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getTotalSumSquares();
        java.lang.Class<?> wildcardClass13 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double4 = simpleRegression0.predict((double) (byte) 10);
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getR();
        double double7 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double11 = simpleRegression0.getSlope();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getSlope();
        double double14 = simpleRegression0.getIntercept();
        double double15 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        simpleRegression0.addData((double) 10, (-1.0d));
        long long33 = simpleRegression0.getN();
        long long34 = simpleRegression0.getN();
        double double35 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression36 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long37 = simpleRegression36.getN();
        double double38 = simpleRegression36.getSumSquaredErrors();
        double double40 = simpleRegression36.predict((double) 10L);
        double double41 = simpleRegression36.getIntercept();
        simpleRegression36.addData((double) (byte) 100, (double) 100.0f);
        double double45 = simpleRegression36.getIntercept();
        double double46 = simpleRegression36.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression47 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long48 = simpleRegression47.getN();
        double double49 = simpleRegression47.getSumSquaredErrors();
        double double51 = simpleRegression47.predict((double) 10L);
        double double52 = simpleRegression47.getIntercept();
        simpleRegression47.addData((double) (byte) 100, (double) 100.0f);
        double double57 = simpleRegression47.predict((double) 100L);
        double double58 = simpleRegression47.getMeanSquareError();
        long long59 = simpleRegression47.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression60 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long61 = simpleRegression60.getN();
        double double62 = simpleRegression60.getRSquare();
        double double63 = simpleRegression60.getTotalSumSquares();
        double[] doubleArray68 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray73 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray74 = new double[][] { doubleArray68, doubleArray73 };
        simpleRegression60.addData(doubleArray74);
        simpleRegression47.addData(doubleArray74);
        simpleRegression36.addData(doubleArray74);
        simpleRegression0.addData(doubleArray74);
        double double79 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 7356.75d + "'", double35 == 7356.75d);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 78.47392290249432d + "'", double79 == 78.47392290249432d);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression40 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long41 = simpleRegression40.getN();
        double double42 = simpleRegression40.getSumSquaredErrors();
        double double44 = simpleRegression40.predict((double) 10L);
        double double45 = simpleRegression40.getIntercept();
        double double46 = simpleRegression40.getRegressionSumSquares();
        long long47 = simpleRegression40.getN();
        double double48 = simpleRegression40.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        simpleRegression49.addData((double) (byte) 100, (double) 100.0f);
        double double59 = simpleRegression49.predict((double) 100L);
        double double60 = simpleRegression49.getR();
        double[] doubleArray63 = new double[] { 100L, 100.0d };
        double[] doubleArray66 = new double[] { 100L, 100.0d };
        double[] doubleArray69 = new double[] { 100L, 100.0d };
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[][] doubleArray79 = new double[][] { doubleArray63, doubleArray66, doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        simpleRegression49.addData(doubleArray79);
        simpleRegression40.addData(doubleArray79);
        simpleRegression0.addData(doubleArray79);
        double double83 = simpleRegression0.getInterceptStdErr();
        double double84 = simpleRegression0.getSlopeConfidenceInterval();
        // The following exception was thrown during execution in test generation
        try {
            double double86 = simpleRegression0.getSlopeConfidenceInterval(6.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 4.066480948555191E-7d + "'", double83 == 4.066480948555191E-7d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 9.31573003924374E-9d + "'", double84 == 9.31573003924374E-9d);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getMeanSquareError();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.getR();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getTotalSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSlopeConfidenceInterval(65.29134366925075d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getIntercept();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.addData((double) 10.0f, 0.29496726124856915d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        double double6 = simpleRegression0.getRSquare();
        double double7 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression8 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long9 = simpleRegression8.getN();
        double double10 = simpleRegression8.getSumSquaredErrors();
        double double12 = simpleRegression8.predict((double) 10L);
        double double13 = simpleRegression8.getIntercept();
        double double14 = simpleRegression8.getRegressionSumSquares();
        double double15 = simpleRegression8.getSumSquaredErrors();
        double double16 = simpleRegression8.getMeanSquareError();
        double double17 = simpleRegression8.getRegressionSumSquares();
        double double18 = simpleRegression8.getSumSquaredErrors();
        double[] doubleArray22 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray26 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray30 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray34 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray38 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray42 = new double[] { (byte) 1, 0L, 'a' };
        double[][] doubleArray43 = new double[][] { doubleArray22, doubleArray26, doubleArray30, doubleArray34, doubleArray38, doubleArray42 };
        simpleRegression8.addData(doubleArray43);
        simpleRegression0.addData(doubleArray43);
        double double46 = simpleRegression0.getSlopeConfidenceInterval();
        double double47 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getInterceptStdErr();
        double double15 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        double double9 = simpleRegression0.predict(10.0d);
        double double11 = simpleRegression0.predict(100.0d);
        double double13 = simpleRegression0.predict((double) (short) 0);
        long long14 = simpleRegression0.getN();
        double double15 = simpleRegression0.getRSquare();
        double double17 = simpleRegression0.predict((double) 8L);
        double double18 = simpleRegression0.getSlopeStdErr();
        double double19 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getIntercept();
        double double12 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getTotalSumSquares();
        double double9 = simpleRegression0.getTotalSumSquares();
        double double10 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getSumSquaredErrors();
        double double13 = simpleRegression0.getRSquare();
        double double14 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getTotalSumSquares();
        double double11 = simpleRegression0.getRSquare();
        double double12 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression8 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long9 = simpleRegression8.getN();
        double double10 = simpleRegression8.getSumSquaredErrors();
        double double12 = simpleRegression8.predict((double) 10L);
        double double13 = simpleRegression8.getMeanSquareError();
        double double14 = simpleRegression8.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double18 = simpleRegression15.getRegressionSumSquares();
        simpleRegression15.addData(0.0d, (-1.0d));
        double double22 = simpleRegression15.getR();
        double double24 = simpleRegression15.predict(10.0d);
        double double26 = simpleRegression15.predict(100.0d);
        double double28 = simpleRegression15.predict((double) (short) 0);
        long long29 = simpleRegression15.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression30 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long31 = simpleRegression30.getN();
        double double32 = simpleRegression30.getSumSquaredErrors();
        double double34 = simpleRegression30.predict((double) 10L);
        double double35 = simpleRegression30.getIntercept();
        double double36 = simpleRegression30.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression37 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long38 = simpleRegression37.getN();
        double double39 = simpleRegression37.getSumSquaredErrors();
        long long40 = simpleRegression37.getN();
        long long41 = simpleRegression37.getN();
        double[][] doubleArray42 = new double[][] {};
        simpleRegression37.addData(doubleArray42);
        simpleRegression30.addData(doubleArray42);
        simpleRegression15.addData(doubleArray42);
        simpleRegression8.addData(doubleArray42);
        simpleRegression0.addData(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = simpleRegression0.getSlopeConfidenceInterval((-1.1666666666666667d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict((double) 3L);
        double double6 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        double double13 = simpleRegression7.getRegressionSumSquares();
        long long14 = simpleRegression7.getN();
        double double15 = simpleRegression7.getR();
        double double16 = simpleRegression7.getSlope();
        double double17 = simpleRegression7.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getMeanSquareError();
        long long30 = simpleRegression18.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression31 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long32 = simpleRegression31.getN();
        double double33 = simpleRegression31.getSumSquaredErrors();
        double double35 = simpleRegression31.predict((double) 10L);
        double double36 = simpleRegression31.getIntercept();
        simpleRegression31.addData((double) (byte) 100, (double) 100.0f);
        double double41 = simpleRegression31.predict((double) 100L);
        double double42 = simpleRegression31.getMeanSquareError();
        long long43 = simpleRegression31.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression44 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long45 = simpleRegression44.getN();
        double double46 = simpleRegression44.getRSquare();
        double double47 = simpleRegression44.getTotalSumSquares();
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray57 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray58 = new double[][] { doubleArray52, doubleArray57 };
        simpleRegression44.addData(doubleArray58);
        simpleRegression31.addData(doubleArray58);
        simpleRegression18.addData(doubleArray58);
        simpleRegression7.addData(doubleArray58);
        simpleRegression0.addData(doubleArray58);
        long long64 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 2L + "'", long64 == 2L);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getIntercept();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getIntercept();
        double double14 = simpleRegression0.getR();
        double double15 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.addData(97.0d, 6793.959302325581d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double[] doubleArray13 = new double[] { 1L, ' ' };
        double[] doubleArray16 = new double[] { 1L, ' ' };
        double[] doubleArray19 = new double[] { 1L, ' ' };
        double[] doubleArray22 = new double[] { 1L, ' ' };
        double[] doubleArray25 = new double[] { 1L, ' ' };
        double[] doubleArray28 = new double[] { 1L, ' ' };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        simpleRegression0.addData(doubleArray29);
        double double32 = simpleRegression0.predict((double) (short) 100);
        double double33 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        double double5 = simpleRegression0.getInterceptStdErr();
        double double6 = simpleRegression0.getR();
        double double7 = simpleRegression0.getIntercept();
        double double8 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getTotalSumSquares();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict(0.5366294777987983d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        simpleRegression0.clear();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        java.lang.Class<?> wildcardClass6 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getTotalSumSquares();
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getRSquare();
        double double16 = simpleRegression0.getR();
        double double17 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = simpleRegression0.getSlopeConfidenceInterval(3.637978807091713E-13d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.5d + "'", double14 == 0.5d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.16666666666666666d + "'", double17 == 0.16666666666666666d);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        long long58 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 7L + "'", long58 == 7L);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getMeanSquareError();
        double double13 = simpleRegression0.predict((double) 0L);
        simpleRegression0.addData(0.030303030303030304d, (double) 100L);
        double double17 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getR();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double4 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.getSlopeStdErr();
        java.lang.Class<?> wildcardClass6 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getMeanSquareError();
        long long14 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval((-0.9999999999999838d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression5 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long6 = simpleRegression5.getN();
        double double7 = simpleRegression5.getSumSquaredErrors();
        double double8 = simpleRegression5.getRegressionSumSquares();
        simpleRegression5.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression12 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long13 = simpleRegression12.getN();
        double double14 = simpleRegression12.getSumSquaredErrors();
        double double16 = simpleRegression12.predict((double) 10L);
        double double17 = simpleRegression12.getIntercept();
        simpleRegression12.addData((double) (byte) 100, (double) 100.0f);
        double double22 = simpleRegression12.predict((double) 100L);
        double double23 = simpleRegression12.getR();
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[][] doubleArray42 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        simpleRegression12.addData(doubleArray42);
        simpleRegression5.addData(doubleArray42);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression45 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long46 = simpleRegression45.getN();
        double double47 = simpleRegression45.getSumSquaredErrors();
        double double49 = simpleRegression45.predict((double) 10L);
        double double50 = simpleRegression45.getIntercept();
        double double51 = simpleRegression45.getRegressionSumSquares();
        long long52 = simpleRegression45.getN();
        double double53 = simpleRegression45.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        simpleRegression54.addData((double) (byte) 100, (double) 100.0f);
        double double64 = simpleRegression54.predict((double) 100L);
        double double65 = simpleRegression54.getR();
        double[] doubleArray68 = new double[] { 100L, 100.0d };
        double[] doubleArray71 = new double[] { 100L, 100.0d };
        double[] doubleArray74 = new double[] { 100L, 100.0d };
        double[] doubleArray77 = new double[] { 100L, 100.0d };
        double[] doubleArray80 = new double[] { 100L, 100.0d };
        double[] doubleArray83 = new double[] { 100L, 100.0d };
        double[][] doubleArray84 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 };
        simpleRegression54.addData(doubleArray84);
        simpleRegression45.addData(doubleArray84);
        simpleRegression5.addData(doubleArray84);
        simpleRegression0.addData(doubleArray84);
        double double89 = simpleRegression0.getRSquare();
        double double90 = simpleRegression0.getMeanSquareError();
        double double91 = simpleRegression0.getR();
        double double92 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        java.lang.Class<?> wildcardClass8 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        double double9 = simpleRegression0.predict(10.0d);
        double double11 = simpleRegression0.predict(100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval(0.5d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        double double13 = simpleRegression0.getSumSquaredErrors();
        double double14 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double11 = simpleRegression0.getSlope();
        double double12 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double[] doubleArray13 = new double[] { 1L, ' ' };
        double[] doubleArray16 = new double[] { 1L, ' ' };
        double[] doubleArray19 = new double[] { 1L, ' ' };
        double[] doubleArray22 = new double[] { 1L, ' ' };
        double[] doubleArray25 = new double[] { 1L, ' ' };
        double[] doubleArray28 = new double[] { 1L, ' ' };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        simpleRegression0.addData(doubleArray29);
        double double32 = simpleRegression0.predict((double) (short) 100);
        double double33 = simpleRegression0.getRegressionSumSquares();
        double double35 = simpleRegression0.predict(0.030303030303030304d);
        double double36 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double19 = simpleRegression15.predict((double) 10L);
        double double20 = simpleRegression15.getIntercept();
        simpleRegression15.addData((double) (byte) 100, (double) 100.0f);
        double double24 = simpleRegression15.getIntercept();
        double double25 = simpleRegression15.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getSumSquaredErrors();
        double double30 = simpleRegression26.predict((double) 10L);
        double double31 = simpleRegression26.getIntercept();
        simpleRegression26.addData((double) (byte) 100, (double) 100.0f);
        double double36 = simpleRegression26.predict((double) 100L);
        double double37 = simpleRegression26.getMeanSquareError();
        long long38 = simpleRegression26.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getRSquare();
        double double42 = simpleRegression39.getTotalSumSquares();
        double[] doubleArray47 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray53 = new double[][] { doubleArray47, doubleArray52 };
        simpleRegression39.addData(doubleArray53);
        simpleRegression26.addData(doubleArray53);
        simpleRegression15.addData(doubleArray53);
        simpleRegression0.addData(doubleArray53);
        double double58 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double60 = simpleRegression0.getSlope();
        long long61 = simpleRegression0.getN();
        double double62 = simpleRegression0.getSlopeStdErr();
        double double63 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double12 = simpleRegression9.getRegressionSumSquares();
        simpleRegression9.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        double double20 = simpleRegression16.predict((double) 10L);
        double double21 = simpleRegression16.getIntercept();
        simpleRegression16.addData((double) (byte) 100, (double) 100.0f);
        double double26 = simpleRegression16.predict((double) 100L);
        double double27 = simpleRegression16.getR();
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[] doubleArray39 = new double[] { 100L, 100.0d };
        double[] doubleArray42 = new double[] { 100L, 100.0d };
        double[] doubleArray45 = new double[] { 100L, 100.0d };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        simpleRegression16.addData(doubleArray46);
        simpleRegression9.addData(doubleArray46);
        double double49 = simpleRegression9.getRSquare();
        double double50 = simpleRegression9.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression51 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long52 = simpleRegression51.getN();
        double double53 = simpleRegression51.getSumSquaredErrors();
        double double55 = simpleRegression51.predict((double) 10L);
        double double56 = simpleRegression51.getMeanSquareError();
        double double57 = simpleRegression51.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression58 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long59 = simpleRegression58.getN();
        double double60 = simpleRegression58.getSumSquaredErrors();
        double double61 = simpleRegression58.getRegressionSumSquares();
        simpleRegression58.addData(0.0d, (-1.0d));
        double double65 = simpleRegression58.getR();
        double double67 = simpleRegression58.predict(10.0d);
        double double69 = simpleRegression58.predict(100.0d);
        double double71 = simpleRegression58.predict((double) (short) 0);
        long long72 = simpleRegression58.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression73 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long74 = simpleRegression73.getN();
        double double75 = simpleRegression73.getSumSquaredErrors();
        double double77 = simpleRegression73.predict((double) 10L);
        double double78 = simpleRegression73.getIntercept();
        double double79 = simpleRegression73.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression80 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long81 = simpleRegression80.getN();
        double double82 = simpleRegression80.getSumSquaredErrors();
        long long83 = simpleRegression80.getN();
        long long84 = simpleRegression80.getN();
        double[][] doubleArray85 = new double[][] {};
        simpleRegression80.addData(doubleArray85);
        simpleRegression73.addData(doubleArray85);
        simpleRegression58.addData(doubleArray85);
        simpleRegression51.addData(doubleArray85);
        simpleRegression9.addData(doubleArray85);
        simpleRegression0.addData(doubleArray85);
        java.lang.Class<?> wildcardClass92 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.9999999999999998d + "'", double49 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.9999999999999998d + "'", double50 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression15 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long16 = simpleRegression15.getN();
        double double17 = simpleRegression15.getSumSquaredErrors();
        double double19 = simpleRegression15.predict((double) 10L);
        double double20 = simpleRegression15.getIntercept();
        simpleRegression15.addData((double) (byte) 100, (double) 100.0f);
        double double24 = simpleRegression15.getIntercept();
        double double25 = simpleRegression15.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getSumSquaredErrors();
        double double30 = simpleRegression26.predict((double) 10L);
        double double31 = simpleRegression26.getIntercept();
        simpleRegression26.addData((double) (byte) 100, (double) 100.0f);
        double double36 = simpleRegression26.predict((double) 100L);
        double double37 = simpleRegression26.getMeanSquareError();
        long long38 = simpleRegression26.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getRSquare();
        double double42 = simpleRegression39.getTotalSumSquares();
        double[] doubleArray47 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray52 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray53 = new double[][] { doubleArray47, doubleArray52 };
        simpleRegression39.addData(doubleArray53);
        simpleRegression26.addData(doubleArray53);
        simpleRegression15.addData(doubleArray53);
        simpleRegression0.addData(doubleArray53);
        double double58 = simpleRegression0.getRegressionSumSquares();
        double double59 = simpleRegression0.getRegressionSumSquares();
        double double61 = simpleRegression0.predict((double) 6L);
        double double62 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData((double) 'a', 4.232527564042065E-9d);
        double double66 = simpleRegression0.getRegressionSumSquares();
        double double67 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 6272.666666119261d + "'", double66 == 6272.666666119261d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0000000000000004d + "'", double67 == 1.0000000000000004d);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        double double11 = simpleRegression7.getRSquare();
        double[] doubleArray16 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray21 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[] doubleArray26 = new double[] { 10, (byte) 10, 100.0f, 7L };
        double[][] doubleArray27 = new double[][] { doubleArray16, doubleArray21, doubleArray26 };
        simpleRegression7.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        double double30 = simpleRegression0.getR();
        double double31 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0, 10.0, 100.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.predict((double) (byte) 1);
        double double13 = simpleRegression0.getMeanSquareError();
        double double14 = simpleRegression0.getMeanSquareError();
        double double15 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.getSlope();
        double double17 = simpleRegression0.getTotalSumSquares();
        double double18 = simpleRegression0.getInterceptStdErr();
        double double19 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = simpleRegression0.getSlopeConfidenceInterval(0.2842377260981912d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(6.031565971695669E-7d, (double) 0.0f);
        double double19 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double21 = simpleRegression0.getR();
        double double22 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getTotalSumSquares();
        double[] doubleArray8 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray13 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray14 = new double[][] { doubleArray8, doubleArray13 };
        simpleRegression0.addData(doubleArray14);
        double double16 = simpleRegression0.getSlopeStdErr();
        java.lang.Class<?> wildcardClass17 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        double double9 = simpleRegression0.getRSquare();
        java.lang.Class<?> wildcardClass10 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        simpleRegression0.clear();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval(15.5d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double5 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.getMeanSquareError();
        simpleRegression0.clear();
        long long8 = simpleRegression0.getN();
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getIntercept();
        simpleRegression0.addData(6793.959302325581d, (double) (-1L));
        double double16 = simpleRegression0.getTotalSumSquares();
        double double17 = simpleRegression0.getSlope();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        simpleRegression9.addData((double) (byte) 100, (double) 100.0f);
        double double19 = simpleRegression9.predict((double) 100L);
        double double20 = simpleRegression9.getR();
        double[] doubleArray23 = new double[] { 100L, 100.0d };
        double[] doubleArray26 = new double[] { 100L, 100.0d };
        double[] doubleArray29 = new double[] { 100L, 100.0d };
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[][] doubleArray39 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        simpleRegression9.addData(doubleArray39);
        simpleRegression0.addData(doubleArray39);
        double double42 = simpleRegression0.getTotalSumSquares();
        double double43 = simpleRegression0.getSlope();
        double double44 = simpleRegression0.getSlopeConfidenceInterval();
        double double45 = simpleRegression0.getMeanSquareError();
        double double46 = simpleRegression0.getMeanSquareError();
        double double47 = simpleRegression0.getIntercept();
        double double48 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getTotalSumSquares();
        double double5 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double11 = simpleRegression0.getSlopeStdErr();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlopeStdErr();
        long long4 = simpleRegression0.getN();
        java.lang.Class<?> wildcardClass5 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        long long9 = simpleRegression0.getN();
        double double10 = simpleRegression0.getSlopeStdErr();
        long long11 = simpleRegression0.getN();
        simpleRegression0.addData((double) 0, 6.514835844650013E-9d);
        double double15 = simpleRegression0.getRSquare();
        long long16 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        double double15 = simpleRegression9.getRegressionSumSquares();
        long long16 = simpleRegression9.getN();
        double double17 = simpleRegression9.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getR();
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        simpleRegression18.addData(doubleArray48);
        simpleRegression9.addData(doubleArray48);
        simpleRegression0.addData(doubleArray48);
        double double52 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double14 = simpleRegression10.predict((double) 10L);
        double double15 = simpleRegression10.getIntercept();
        simpleRegression10.addData((double) (byte) 100, (double) 100.0f);
        double double20 = simpleRegression10.predict((double) 100L);
        double double21 = simpleRegression10.getMeanSquareError();
        long long22 = simpleRegression10.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression23 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long24 = simpleRegression23.getN();
        double double25 = simpleRegression23.getRSquare();
        double double26 = simpleRegression23.getTotalSumSquares();
        double[] doubleArray31 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray36 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray37 = new double[][] { doubleArray31, doubleArray36 };
        simpleRegression23.addData(doubleArray37);
        simpleRegression10.addData(doubleArray37);
        long long40 = simpleRegression10.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression41 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long42 = simpleRegression41.getN();
        double double43 = simpleRegression41.getSumSquaredErrors();
        double double45 = simpleRegression41.predict((double) 10L);
        double double46 = simpleRegression41.getIntercept();
        simpleRegression41.addData((double) (byte) 100, (double) 100.0f);
        double double51 = simpleRegression41.predict((double) 100L);
        double double52 = simpleRegression41.getMeanSquareError();
        long long53 = simpleRegression41.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getRSquare();
        double double57 = simpleRegression54.getTotalSumSquares();
        double[] doubleArray62 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray67 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray68 = new double[][] { doubleArray62, doubleArray67 };
        simpleRegression54.addData(doubleArray68);
        simpleRegression41.addData(doubleArray68);
        simpleRegression10.addData(doubleArray68);
        simpleRegression0.addData(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 3L + "'", long40 == 3L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        double double9 = simpleRegression0.predict(10.0d);
        double double11 = simpleRegression0.predict(100.0d);
        double double12 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.addData((double) ' ', 4.066480948555191E-7d);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        double double19 = simpleRegression16.getRegressionSumSquares();
        simpleRegression16.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression23 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long24 = simpleRegression23.getN();
        double double25 = simpleRegression23.getSumSquaredErrors();
        double double27 = simpleRegression23.predict((double) 10L);
        double double28 = simpleRegression23.getIntercept();
        simpleRegression23.addData((double) (byte) 100, (double) 100.0f);
        double double33 = simpleRegression23.predict((double) 100L);
        double double34 = simpleRegression23.getR();
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[] doubleArray49 = new double[] { 100L, 100.0d };
        double[] doubleArray52 = new double[] { 100L, 100.0d };
        double[][] doubleArray53 = new double[][] { doubleArray37, doubleArray40, doubleArray43, doubleArray46, doubleArray49, doubleArray52 };
        simpleRegression23.addData(doubleArray53);
        simpleRegression16.addData(doubleArray53);
        double double56 = simpleRegression16.getRSquare();
        double double57 = simpleRegression16.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression58 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long59 = simpleRegression58.getN();
        double double60 = simpleRegression58.getSumSquaredErrors();
        double double62 = simpleRegression58.predict((double) 10L);
        double double63 = simpleRegression58.getIntercept();
        double double64 = simpleRegression58.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression65 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long66 = simpleRegression65.getN();
        double double67 = simpleRegression65.getSumSquaredErrors();
        long long68 = simpleRegression65.getN();
        long long69 = simpleRegression65.getN();
        double[][] doubleArray70 = new double[][] {};
        simpleRegression65.addData(doubleArray70);
        simpleRegression58.addData(doubleArray70);
        simpleRegression16.addData(doubleArray70);
        simpleRegression0.addData(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.9999999999999998d + "'", double56 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.9999999999999999d + "'", double57 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(doubleArray70);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getSlope();
        double double42 = simpleRegression0.predict((double) 10L);
        long long43 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0099999999999998d + "'", double40 == 1.0099999999999998d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 9.100000000000014d + "'", double42 == 9.100000000000014d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 7L + "'", long43 == 7L);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getInterceptStdErr();
        double double12 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getTotalSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getIntercept();
        simpleRegression0.addData(93.71511627906978d, 35.09364059557591d);
        double double5 = simpleRegression0.getInterceptStdErr();
        double double6 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getR();
        simpleRegression0.clear();
        long long6 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        double double15 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = simpleRegression0.getSlopeConfidenceInterval(Double.NaN);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        double double17 = simpleRegression0.getSumSquaredErrors();
        long long18 = simpleRegression0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRegressionSumSquares();
        double double9 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        java.lang.Class<?> wildcardClass11 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        simpleRegression0.addData((double) 10, (-1.0d));
        long long33 = simpleRegression0.getN();
        double double35 = simpleRegression0.predict((double) (short) -1);
        double double37 = simpleRegression0.predict((double) (short) 100);
        double double38 = simpleRegression0.getRSquare();
        double double39 = simpleRegression0.getInterceptStdErr();
        long long40 = simpleRegression0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 65.00710594315245d + "'", double35 == 65.00710594315245d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 93.71511627906978d + "'", double37 == 93.71511627906978d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0764999079314125d + "'", double38 == 0.0764999079314125d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.09364059557591d + "'", double39 == 35.09364059557591d);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 4L + "'", long40 == 4L);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getSlopeStdErr();
        double double7 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(0.23791906001465818d, 9416.307692307693d);
        double double11 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double12 = simpleRegression9.getRegressionSumSquares();
        simpleRegression9.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression16 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long17 = simpleRegression16.getN();
        double double18 = simpleRegression16.getSumSquaredErrors();
        double double20 = simpleRegression16.predict((double) 10L);
        double double21 = simpleRegression16.getIntercept();
        simpleRegression16.addData((double) (byte) 100, (double) 100.0f);
        double double26 = simpleRegression16.predict((double) 100L);
        double double27 = simpleRegression16.getR();
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[] doubleArray39 = new double[] { 100L, 100.0d };
        double[] doubleArray42 = new double[] { 100L, 100.0d };
        double[] doubleArray45 = new double[] { 100L, 100.0d };
        double[][] doubleArray46 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        simpleRegression16.addData(doubleArray46);
        simpleRegression9.addData(doubleArray46);
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        double double53 = simpleRegression49.predict((double) 10L);
        double double54 = simpleRegression49.getIntercept();
        double double55 = simpleRegression49.getRegressionSumSquares();
        long long56 = simpleRegression49.getN();
        double double57 = simpleRegression49.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression58 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long59 = simpleRegression58.getN();
        double double60 = simpleRegression58.getSumSquaredErrors();
        double double62 = simpleRegression58.predict((double) 10L);
        double double63 = simpleRegression58.getIntercept();
        simpleRegression58.addData((double) (byte) 100, (double) 100.0f);
        double double68 = simpleRegression58.predict((double) 100L);
        double double69 = simpleRegression58.getR();
        double[] doubleArray72 = new double[] { 100L, 100.0d };
        double[] doubleArray75 = new double[] { 100L, 100.0d };
        double[] doubleArray78 = new double[] { 100L, 100.0d };
        double[] doubleArray81 = new double[] { 100L, 100.0d };
        double[] doubleArray84 = new double[] { 100L, 100.0d };
        double[] doubleArray87 = new double[] { 100L, 100.0d };
        double[][] doubleArray88 = new double[][] { doubleArray72, doubleArray75, doubleArray78, doubleArray81, doubleArray84, doubleArray87 };
        simpleRegression58.addData(doubleArray88);
        simpleRegression49.addData(doubleArray88);
        simpleRegression9.addData(doubleArray88);
        simpleRegression0.addData(doubleArray88);
        double double93 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        double double30 = simpleRegression0.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression31 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long32 = simpleRegression31.getN();
        double double33 = simpleRegression31.getTotalSumSquares();
        double double34 = simpleRegression31.getSlopeStdErr();
        double double36 = simpleRegression31.predict((double) 3L);
        double double37 = simpleRegression31.getRegressionSumSquares();
        double double38 = simpleRegression31.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression39 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long40 = simpleRegression39.getN();
        double double41 = simpleRegression39.getSumSquaredErrors();
        double double43 = simpleRegression39.predict((double) 10L);
        double double44 = simpleRegression39.getMeanSquareError();
        double double45 = simpleRegression39.getRSquare();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression46 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long47 = simpleRegression46.getN();
        double double48 = simpleRegression46.getSumSquaredErrors();
        double double49 = simpleRegression46.getRegressionSumSquares();
        simpleRegression46.addData(0.0d, (-1.0d));
        double double53 = simpleRegression46.getR();
        double double55 = simpleRegression46.predict(10.0d);
        double double57 = simpleRegression46.predict(100.0d);
        double double59 = simpleRegression46.predict((double) (short) 0);
        long long60 = simpleRegression46.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression61 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long62 = simpleRegression61.getN();
        double double63 = simpleRegression61.getSumSquaredErrors();
        double double65 = simpleRegression61.predict((double) 10L);
        double double66 = simpleRegression61.getIntercept();
        double double67 = simpleRegression61.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression68 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long69 = simpleRegression68.getN();
        double double70 = simpleRegression68.getSumSquaredErrors();
        long long71 = simpleRegression68.getN();
        long long72 = simpleRegression68.getN();
        double[][] doubleArray73 = new double[][] {};
        simpleRegression68.addData(doubleArray73);
        simpleRegression61.addData(doubleArray73);
        simpleRegression46.addData(doubleArray73);
        simpleRegression39.addData(doubleArray73);
        simpleRegression31.addData(doubleArray73);
        simpleRegression0.addData(doubleArray73);
        java.lang.Class<?> wildcardClass80 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.030303030303030304d + "'", double30 == 0.030303030303030304d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        double double59 = simpleRegression0.predict((double) (-1L));
        double double60 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-2.009999999999984d) + "'", double59 == (-2.009999999999984d));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.8189894035458565E-12d + "'", double60 == 1.8189894035458565E-12d);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getR();
        double double5 = simpleRegression0.getSlopeStdErr();
        double double6 = simpleRegression0.getIntercept();
        simpleRegression0.addData(0.16666666666666666d, 65.29134366925075d);
        double double10 = simpleRegression0.getMeanSquareError();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        double double6 = simpleRegression0.predict((double) (byte) 10);
        simpleRegression0.addData((double) '#', 4142.092174397623d);
        simpleRegression0.clear();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double12 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getInterceptStdErr();
        double double5 = simpleRegression0.getRegressionSumSquares();
        double double6 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getR();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getRSquare();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        double double7 = simpleRegression0.getR();
        simpleRegression0.addData((double) 6L, (double) (byte) 0);
        double double11 = simpleRegression0.getR();
        double double12 = simpleRegression0.getRSquare();
        double double13 = simpleRegression0.getSumSquaredErrors();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        long long10 = simpleRegression7.getN();
        long long11 = simpleRegression7.getN();
        double[][] doubleArray12 = new double[][] {};
        simpleRegression7.addData(doubleArray12);
        simpleRegression0.addData(doubleArray12);
        double double16 = simpleRegression0.predict((double) (-1L));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression17 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long18 = simpleRegression17.getN();
        double double19 = simpleRegression17.getSumSquaredErrors();
        double double21 = simpleRegression17.predict((double) 10L);
        double double22 = simpleRegression17.getIntercept();
        simpleRegression17.addData((double) (byte) 100, (double) 100.0f);
        double double27 = simpleRegression17.predict((double) 100L);
        double double28 = simpleRegression17.getR();
        double[] doubleArray31 = new double[] { 100L, 100.0d };
        double[] doubleArray34 = new double[] { 100L, 100.0d };
        double[] doubleArray37 = new double[] { 100L, 100.0d };
        double[] doubleArray40 = new double[] { 100L, 100.0d };
        double[] doubleArray43 = new double[] { 100L, 100.0d };
        double[] doubleArray46 = new double[] { 100L, 100.0d };
        double[][] doubleArray47 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        simpleRegression17.addData(doubleArray47);
        simpleRegression0.addData(doubleArray47);
        long long50 = simpleRegression0.getN();
        double double51 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 6L + "'", long50 == 6L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getR();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getTotalSumSquares();
        double double13 = simpleRegression0.predict((double) (short) -1);
        double double14 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.addData((double) ' ', 0.0d);
        simpleRegression0.addData((double) 10L, 9416.307692307693d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSlope();
        double double11 = simpleRegression0.getRegressionSumSquares();
        double double12 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getRSquare();
        double double6 = simpleRegression0.getTotalSumSquares();
        double double7 = simpleRegression0.getIntercept();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression9 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long10 = simpleRegression9.getN();
        double double11 = simpleRegression9.getSumSquaredErrors();
        double double13 = simpleRegression9.predict((double) 10L);
        double double14 = simpleRegression9.getIntercept();
        double double15 = simpleRegression9.getRegressionSumSquares();
        long long16 = simpleRegression9.getN();
        double double17 = simpleRegression9.getRegressionSumSquares();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression18 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long19 = simpleRegression18.getN();
        double double20 = simpleRegression18.getSumSquaredErrors();
        double double22 = simpleRegression18.predict((double) 10L);
        double double23 = simpleRegression18.getIntercept();
        simpleRegression18.addData((double) (byte) 100, (double) 100.0f);
        double double28 = simpleRegression18.predict((double) 100L);
        double double29 = simpleRegression18.getR();
        double[] doubleArray32 = new double[] { 100L, 100.0d };
        double[] doubleArray35 = new double[] { 100L, 100.0d };
        double[] doubleArray38 = new double[] { 100L, 100.0d };
        double[] doubleArray41 = new double[] { 100L, 100.0d };
        double[] doubleArray44 = new double[] { 100L, 100.0d };
        double[] doubleArray47 = new double[] { 100L, 100.0d };
        double[][] doubleArray48 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        simpleRegression18.addData(doubleArray48);
        simpleRegression9.addData(doubleArray48);
        simpleRegression0.addData(doubleArray48);
        double double52 = simpleRegression0.getR();
        double double53 = simpleRegression0.getInterceptStdErr();
        double double54 = simpleRegression0.getSignificance();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getSlopeStdErr();
        double double7 = simpleRegression0.getSlope();
        double double8 = simpleRegression0.getSlopeStdErr();
        java.lang.Class<?> wildcardClass9 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getSlopeStdErr();
        double double7 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(0.23791906001465818d, 9416.307692307693d);
        simpleRegression0.addData((double) 10.0f, (double) (short) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getIntercept();
        double double12 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        double double43 = simpleRegression0.predict((double) (byte) 0);
        double double44 = simpleRegression0.getSumSquaredErrors();
        double double45 = simpleRegression0.getSignificance();
        // The following exception was thrown during execution in test generation
        try {
            double double47 = simpleRegression0.getSlopeConfidenceInterval((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-0.9999999999999838d) + "'", double43 == (-0.9999999999999838d));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.8189894035458565E-12d + "'", double44 == 1.8189894035458565E-12d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getTotalSumSquares();
        java.lang.Class<?> wildcardClass12 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double9 = simpleRegression0.getIntercept();
        double double10 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.addData(1.0d, Double.NaN);
        double double14 = simpleRegression0.getInterceptStdErr();
        double double15 = simpleRegression0.getR();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.addData((double) (-1.0f), 3396.9796511627906d);
        simpleRegression0.addData((double) (-1L), (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getMeanSquareError();
        double double11 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getSumSquaredErrors();
        simpleRegression0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict((double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getR();
        simpleRegression0.clear();
        double double8 = simpleRegression0.getSumSquaredErrors();
        double double9 = simpleRegression0.getRSquare();
        double double11 = simpleRegression0.predict(9.100000000000014d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getSlopeStdErr();
        double double11 = simpleRegression0.getSlope();
        double double12 = simpleRegression0.getIntercept();
        double double13 = simpleRegression0.getIntercept();
        java.lang.Class<?> wildcardClass14 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlope();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getIntercept();
        java.lang.Class<?> wildcardClass6 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRSquare();
        double double7 = simpleRegression0.getInterceptStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression8 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long9 = simpleRegression8.getN();
        double double10 = simpleRegression8.getSumSquaredErrors();
        double double12 = simpleRegression8.predict((double) 10L);
        double double13 = simpleRegression8.getIntercept();
        simpleRegression8.addData((double) (byte) 100, (double) 100.0f);
        double double18 = simpleRegression8.predict((double) 100L);
        double double19 = simpleRegression8.getMeanSquareError();
        double double20 = simpleRegression8.getRSquare();
        simpleRegression8.clear();
        double double22 = simpleRegression8.getMeanSquareError();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression23 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long24 = simpleRegression23.getN();
        double double25 = simpleRegression23.getSumSquaredErrors();
        double double27 = simpleRegression23.predict((double) 10L);
        double double28 = simpleRegression23.getIntercept();
        simpleRegression23.addData((double) (byte) 100, (double) 100.0f);
        double double33 = simpleRegression23.predict((double) 100L);
        double double34 = simpleRegression23.getMeanSquareError();
        long long35 = simpleRegression23.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression36 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long37 = simpleRegression36.getN();
        double double38 = simpleRegression36.getRSquare();
        double double39 = simpleRegression36.getTotalSumSquares();
        double[] doubleArray44 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray49 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray50 = new double[][] { doubleArray44, doubleArray49 };
        simpleRegression36.addData(doubleArray50);
        simpleRegression23.addData(doubleArray50);
        double double53 = simpleRegression23.getSlope();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression54 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long55 = simpleRegression54.getN();
        double double56 = simpleRegression54.getSumSquaredErrors();
        double double58 = simpleRegression54.predict((double) 10L);
        double double59 = simpleRegression54.getIntercept();
        double double60 = simpleRegression54.getRegressionSumSquares();
        long long61 = simpleRegression54.getN();
        double double62 = simpleRegression54.getR();
        double double63 = simpleRegression54.getSlope();
        double double64 = simpleRegression54.getRegressionSumSquares();
        double[] doubleArray67 = new double[] { 1L, ' ' };
        double[] doubleArray70 = new double[] { 1L, ' ' };
        double[] doubleArray73 = new double[] { 1L, ' ' };
        double[] doubleArray76 = new double[] { 1L, ' ' };
        double[] doubleArray79 = new double[] { 1L, ' ' };
        double[] doubleArray82 = new double[] { 1L, ' ' };
        double[][] doubleArray83 = new double[][] { doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79, doubleArray82 };
        simpleRegression54.addData(doubleArray83);
        simpleRegression23.addData(doubleArray83);
        simpleRegression8.addData(doubleArray83);
        simpleRegression0.addData(doubleArray83);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.030303030303030304d + "'", double53 == 0.030303030303030304d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double6 = simpleRegression0.getInterceptStdErr();
        double double8 = simpleRegression0.predict((double) 1);
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getR();
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double[] doubleArray13 = new double[] { 1L, ' ' };
        double[] doubleArray16 = new double[] { 1L, ' ' };
        double[] doubleArray19 = new double[] { 1L, ' ' };
        double[] doubleArray22 = new double[] { 1L, ' ' };
        double[] doubleArray25 = new double[] { 1L, ' ' };
        double[] doubleArray28 = new double[] { 1L, ' ' };
        double[][] doubleArray29 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 };
        simpleRegression0.addData(doubleArray29);
        double double32 = simpleRegression0.predict((double) (short) 100);
        double double33 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData((double) 1L, 0.0d);
        double double37 = simpleRegression0.getSumSquaredErrors();
        double double38 = simpleRegression0.getInterceptStdErr();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 32.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getSlopeStdErr();
        double double9 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getSlope();
        double double4 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        long long4 = simpleRegression0.getN();
        double[][] doubleArray5 = new double[][] {};
        simpleRegression0.addData(doubleArray5);
        double double7 = simpleRegression0.getTotalSumSquares();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getSlopeStdErr();
        double double10 = simpleRegression0.getIntercept();
        double double11 = simpleRegression0.getSlopeStdErr();
        simpleRegression0.clear();
        double double14 = simpleRegression0.predict((double) 1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getRegressionSumSquares();
        double double2 = simpleRegression0.getInterceptStdErr();
        double double3 = simpleRegression0.getSlope();
        double double5 = simpleRegression0.predict((double) 10);
        double double6 = simpleRegression0.getSlopeStdErr();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getRSquare();
        double double5 = simpleRegression0.getTotalSumSquares();
        double double6 = simpleRegression0.getInterceptStdErr();
        double double7 = simpleRegression0.getTotalSumSquares();
        simpleRegression0.clear();
        double double9 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getRSquare();
        double double10 = simpleRegression0.getRegressionSumSquares();
        double double11 = simpleRegression0.getSlopeStdErr();
        double double12 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getInterceptStdErr();
        double double15 = simpleRegression0.getSlope();
        long long16 = simpleRegression0.getN();
        double double18 = simpleRegression0.predict(0.06677226996917d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        long long7 = simpleRegression0.getN();
        double double8 = simpleRegression0.getRSquare();
        double double9 = simpleRegression0.getIntercept();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression10 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long11 = simpleRegression10.getN();
        double double12 = simpleRegression10.getSumSquaredErrors();
        double double14 = simpleRegression10.predict((double) 10L);
        double double15 = simpleRegression10.getIntercept();
        double double16 = simpleRegression10.getRegressionSumSquares();
        long long17 = simpleRegression10.getN();
        double double18 = simpleRegression10.getR();
        double double19 = simpleRegression10.getSlope();
        double double20 = simpleRegression10.getRegressionSumSquares();
        simpleRegression10.addData((double) 100, Double.NaN);
        double double24 = simpleRegression10.getSumSquaredErrors();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression25 = new org.apache.commons.math.stat.regression.SimpleRegression();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression26 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long27 = simpleRegression26.getN();
        double double28 = simpleRegression26.getRSquare();
        double double29 = simpleRegression26.getTotalSumSquares();
        double[] doubleArray34 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray39 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray40 = new double[][] { doubleArray34, doubleArray39 };
        simpleRegression26.addData(doubleArray40);
        simpleRegression25.addData(doubleArray40);
        simpleRegression10.addData(doubleArray40);
        simpleRegression0.addData(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getSumSquaredErrors();
        double double2 = simpleRegression0.getTotalSumSquares();
        double double3 = simpleRegression0.getSlope();
        long long4 = simpleRegression0.getN();
        double double5 = simpleRegression0.getIntercept();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getTotalSumSquares();
        double double14 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.predict((double) (short) 1);
        double double18 = simpleRegression0.predict((double) '#');
        double double19 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        simpleRegression0.addData((double) 10L, (double) (-1.0f));
        double double8 = simpleRegression0.getSlope();
        double double9 = simpleRegression0.getTotalSumSquares();
        long long10 = simpleRegression0.getN();
        double double11 = simpleRegression0.getMeanSquareError();
        java.lang.Class<?> wildcardClass12 = simpleRegression0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        simpleRegression0.clear();
        double double6 = simpleRegression0.getSlope();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        long long2 = simpleRegression0.getN();
        double double3 = simpleRegression0.getRSquare();
        double double4 = simpleRegression0.getRegressionSumSquares();
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.clear();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        double double6 = simpleRegression0.getRegressionSumSquares();
        double double7 = simpleRegression0.getSumSquaredErrors();
        double double8 = simpleRegression0.getMeanSquareError();
        double double9 = simpleRegression0.getRegressionSumSquares();
        double double10 = simpleRegression0.getSumSquaredErrors();
        double double11 = simpleRegression0.getSlope();
        simpleRegression0.clear();
        double double13 = simpleRegression0.getTotalSumSquares();
        double double14 = simpleRegression0.getTotalSumSquares();
        double double16 = simpleRegression0.predict((double) (short) 1);
        double double18 = simpleRegression0.predict((double) '#');
        // The following exception was thrown during execution in test generation
        try {
            double double19 = simpleRegression0.getSlopeConfidenceInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        double double12 = simpleRegression0.getRSquare();
        simpleRegression0.clear();
        double double14 = simpleRegression0.getSumSquaredErrors();
        double double15 = simpleRegression0.getTotalSumSquares();
        double double17 = simpleRegression0.predict((-0.2946963824289245d));
        // The following exception was thrown during execution in test generation
        try {
            double double19 = simpleRegression0.getSlopeConfidenceInterval(2.2737367544323207E-14d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        long long3 = simpleRegression0.getN();
        double double5 = simpleRegression0.predict(100.0d);
        double double7 = simpleRegression0.predict(3396.9796511627906d);
        double double8 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getRSquare();
        double double3 = simpleRegression0.getRegressionSumSquares();
        double double4 = simpleRegression0.getSlope();
        simpleRegression0.addData((double) (byte) 10, (double) (-1.0f));
        simpleRegression0.addData((double) 0L, (double) 'a');
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression11 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long12 = simpleRegression11.getN();
        double double13 = simpleRegression11.getSumSquaredErrors();
        double double15 = simpleRegression11.predict((double) 10L);
        double double16 = simpleRegression11.getIntercept();
        double double17 = simpleRegression11.getRegressionSumSquares();
        double double18 = simpleRegression11.getSumSquaredErrors();
        double double19 = simpleRegression11.getMeanSquareError();
        double double20 = simpleRegression11.getRegressionSumSquares();
        double double21 = simpleRegression11.getSumSquaredErrors();
        double[] doubleArray25 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray29 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray33 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray37 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray41 = new double[] { (byte) 1, 0L, 'a' };
        double[] doubleArray45 = new double[] { (byte) 1, 0L, 'a' };
        double[][] doubleArray46 = new double[][] { doubleArray25, doubleArray29, doubleArray33, doubleArray37, doubleArray41, doubleArray45 };
        simpleRegression11.addData(doubleArray46);
        simpleRegression0.addData(doubleArray46);
        double double49 = simpleRegression0.getSignificance();
        long long50 = simpleRegression0.getN();
        double double51 = simpleRegression0.getIntercept();
        double double52 = simpleRegression0.getSlopeStdErr();
        double double53 = simpleRegression0.getSumSquaredErrors();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 0.0, 97.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.5366294777987983d + "'", double49 == 0.5366294777987983d);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 8L + "'", long50 == 8L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 17.45945945945946d + "'", double51 == 17.45945945945946d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 4.166196710774793d + "'", double52 == 4.166196710774793d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 7706.594594594594d + "'", double53 == 7706.594594594594d);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        double double1 = simpleRegression0.getRegressionSumSquares();
        double double2 = simpleRegression0.getInterceptStdErr();
        double double3 = simpleRegression0.getSlopeStdErr();
        double double5 = simpleRegression0.predict(1.0099999999999998d);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = simpleRegression0.getSlopeConfidenceInterval((double) 3L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double3 = simpleRegression0.getRegressionSumSquares();
        simpleRegression0.addData(0.0d, (-1.0d));
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression7 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long8 = simpleRegression7.getN();
        double double9 = simpleRegression7.getSumSquaredErrors();
        double double11 = simpleRegression7.predict((double) 10L);
        double double12 = simpleRegression7.getIntercept();
        simpleRegression7.addData((double) (byte) 100, (double) 100.0f);
        double double17 = simpleRegression7.predict((double) 100L);
        double double18 = simpleRegression7.getR();
        double[] doubleArray21 = new double[] { 100L, 100.0d };
        double[] doubleArray24 = new double[] { 100L, 100.0d };
        double[] doubleArray27 = new double[] { 100L, 100.0d };
        double[] doubleArray30 = new double[] { 100L, 100.0d };
        double[] doubleArray33 = new double[] { 100L, 100.0d };
        double[] doubleArray36 = new double[] { 100L, 100.0d };
        double[][] doubleArray37 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        simpleRegression7.addData(doubleArray37);
        simpleRegression0.addData(doubleArray37);
        double double40 = simpleRegression0.getRSquare();
        double double41 = simpleRegression0.getR();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression42 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long43 = simpleRegression42.getN();
        double double44 = simpleRegression42.getSumSquaredErrors();
        double double46 = simpleRegression42.predict((double) 10L);
        double double47 = simpleRegression42.getIntercept();
        double double48 = simpleRegression42.getSlopeStdErr();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression49 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long50 = simpleRegression49.getN();
        double double51 = simpleRegression49.getSumSquaredErrors();
        long long52 = simpleRegression49.getN();
        long long53 = simpleRegression49.getN();
        double[][] doubleArray54 = new double[][] {};
        simpleRegression49.addData(doubleArray54);
        simpleRegression42.addData(doubleArray54);
        simpleRegression0.addData(doubleArray54);
        simpleRegression0.clear();
        double double59 = simpleRegression0.getSlope();
        double double60 = simpleRegression0.getInterceptStdErr();
        simpleRegression0.clear();
        double double63 = simpleRegression0.predict(0.06787386507806925d);
        double double64 = simpleRegression0.getRegressionSumSquares();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9999999999999998d + "'", double40 == 0.9999999999999998d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.9999999999999999d + "'", double41 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getMeanSquareError();
        simpleRegression0.addData(Double.NaN, (double) 7L);
        double double9 = simpleRegression0.getSlope();
        double double10 = simpleRegression0.getR();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression0 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long1 = simpleRegression0.getN();
        double double2 = simpleRegression0.getSumSquaredErrors();
        double double4 = simpleRegression0.predict((double) 10L);
        double double5 = simpleRegression0.getIntercept();
        simpleRegression0.addData((double) (byte) 100, (double) 100.0f);
        double double10 = simpleRegression0.predict((double) 100L);
        double double11 = simpleRegression0.getMeanSquareError();
        long long12 = simpleRegression0.getN();
        org.apache.commons.math.stat.regression.SimpleRegression simpleRegression13 = new org.apache.commons.math.stat.regression.SimpleRegression();
        long long14 = simpleRegression13.getN();
        double double15 = simpleRegression13.getRSquare();
        double double16 = simpleRegression13.getTotalSumSquares();
        double[] doubleArray21 = new double[] { 1L, 'a', 0L, 10.0d };
        double[] doubleArray26 = new double[] { 1L, 'a', 0L, 10.0d };
        double[][] doubleArray27 = new double[][] { doubleArray21, doubleArray26 };
        simpleRegression13.addData(doubleArray27);
        simpleRegression0.addData(doubleArray27);
        simpleRegression0.addData((double) 10, (-1.0d));
        long long33 = simpleRegression0.getN();
        long long34 = simpleRegression0.getN();
        simpleRegression0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double36 = simpleRegression0.getSignificance();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 97.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
    }
}


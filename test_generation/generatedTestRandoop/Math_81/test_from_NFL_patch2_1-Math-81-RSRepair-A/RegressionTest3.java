import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray12, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl15.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl15.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl15.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getD();
        double[] doubleArray15 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        double[] doubleArray11 = eigenDecompositionImpl9.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl9.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl7.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double double11 = eigenDecompositionImpl7.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        double double22 = eigenDecompositionImpl21.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl21.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl21.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix24, 0.0d);
        double[] doubleArray27 = eigenDecompositionImpl26.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl17.getSolver();
        double double21 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl17.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver22);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = new double[] { (short) 0 };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray9, 100.0d);
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray14, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl18.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl18.getD();
        double[] doubleArray23 = eigenDecompositionImpl18.getImagEigenvalues();
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        double[] doubleArray30 = new double[] { (short) 0 };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray31, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray31, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl37 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray31, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray31, (double) 100L);
        org.apache.commons.math.linear.RealVector realVector41 = eigenDecompositionImpl39.getEigenvector(0);
        double[] doubleArray42 = eigenDecompositionImpl39.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0]");
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) 1.0f);
        java.lang.Class<?> wildcardClass20 = eigenDecompositionImpl19.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl13.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (-1.0d));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        double double14 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) (short) 1);
        double double12 = eigenDecompositionImpl10.getImagEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        double[] doubleArray17 = eigenDecompositionImpl15.getRealEigenvalues();
        java.lang.Class<?> wildcardClass18 = doubleArray17.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl10.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) 0L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        double[] doubleArray21 = eigenDecompositionImpl17.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl11.getImagEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        double[] doubleArray20 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealVector realVector22 = eigenDecompositionImpl11.getEigenvector((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl11.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        double[] doubleArray18 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getV();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        java.lang.Class<?> wildcardClass11 = eigenDecompositionImpl7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (-1.0d));
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, 0.0d);
        double double12 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl12.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl10.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 0.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl14.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl14.getEigenvector(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver15);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray15 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray23, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver28 = eigenDecompositionImpl27.getSolver();
        double[] doubleArray29 = eigenDecompositionImpl27.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl27.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = eigenDecompositionImpl27.getVT();
        double[] doubleArray32 = eigenDecompositionImpl27.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray32, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl7.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass12 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        java.lang.Class<?> wildcardClass15 = realMatrix14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getD();
        double double11 = eigenDecompositionImpl7.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl12.getRealEigenvalues();
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl17.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double[] doubleArray20 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        double[] doubleArray27 = new double[] { (short) 0 };
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray27, doubleArray28, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray28, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl32.getVT();
        double[] doubleArray34 = eigenDecompositionImpl32.getImagEigenvalues();
        double[] doubleArray35 = eigenDecompositionImpl32.getRealEigenvalues();
        double[] doubleArray36 = eigenDecompositionImpl32.getRealEigenvalues();
        double[] doubleArray37 = eigenDecompositionImpl32.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray37, (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        double[] doubleArray14 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl17.getSolver();
        double double19 = eigenDecompositionImpl17.getDeterminant();
        double[] doubleArray20 = eigenDecompositionImpl17.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 1.0d);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double double13 = eigenDecompositionImpl10.getRealEigenvalue(0);
        double[] doubleArray14 = eigenDecompositionImpl10.getRealEigenvalues();
        double double16 = eigenDecompositionImpl10.getRealEigenvalue((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector((int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl4.getEigenvector((int) (short) 0);
        double double16 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) ' ');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl17.getSolver();
        double double19 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl7.getSolver();
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl7.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = eigenDecompositionImpl4.getRealEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        double double15 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        double[] doubleArray16 = eigenDecompositionImpl14.getImagEigenvalues();
        double double17 = eigenDecompositionImpl14.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) '#');
        java.lang.Class<?> wildcardClass15 = eigenDecompositionImpl14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getRealEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl4.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getVT();
        double[] doubleArray12 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        double double15 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl11.getRealEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(decompositionSolver8);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl16.getSolver();
        double[] doubleArray23 = eigenDecompositionImpl16.getRealEigenvalues();
        double double24 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl16.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl4.getEigenvector((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        double double18 = eigenDecompositionImpl11.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl11.getEigenvector((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, 1.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, 100.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = eigenDecompositionImpl4.getRealEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl16.getSolver();
        double[] doubleArray19 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl31.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver33 = eigenDecompositionImpl31.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl31.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix34, (double) (-1));
        double double38 = eigenDecompositionImpl36.getImagEigenvalue(0);
        double[] doubleArray39 = eigenDecompositionImpl36.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl41 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray39, (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(decompositionSolver33);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0]");
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 0.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = eigenDecompositionImpl4.getImagEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (-1));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1L);
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getVT();
        java.lang.Class<?> wildcardClass21 = realMatrix20.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getRealEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl17.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        double double18 = eigenDecompositionImpl15.getImagEigenvalue((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl14.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector((int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl4.getEigenvector((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 0.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, 10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl16.getEigenvector((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getD();
        double[] doubleArray19 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector24 = eigenDecompositionImpl17.getEigenvector(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1);
        double[] doubleArray8 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double double15 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        double double17 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl17.getEigenvector(0);
        double[] doubleArray22 = eigenDecompositionImpl17.getRealEigenvalues();
        double double24 = eigenDecompositionImpl17.getRealEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double double10 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl4.getEigenvector((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) -1);
        double[] doubleArray22 = eigenDecompositionImpl21.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (byte) 1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl16.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector24 = eigenDecompositionImpl16.getEigenvector((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        double[] doubleArray16 = eigenDecompositionImpl15.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl15.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver17);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        double[] doubleArray19 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray20 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector10 = eigenDecompositionImpl4.getEigenvector((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double double13 = eigenDecompositionImpl11.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, 0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl18.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, 1.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 10L);
        double double12 = eigenDecompositionImpl11.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl11.getRealEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getRealEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl4.getEigenvector((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (-1.0d));
        double[] doubleArray18 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass12 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl16.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver17);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass12 = realMatrix11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        double double22 = eigenDecompositionImpl17.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector24 = eigenDecompositionImpl17.getEigenvector((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray12 = new double[] { (short) 0 };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray13, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getVT();
        double double17 = eigenDecompositionImpl15.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl15.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl15.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl15.getD();
        double double22 = eigenDecompositionImpl15.getDeterminant();
        double[] doubleArray23 = eigenDecompositionImpl15.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray23, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl12.getVT();
        java.lang.Class<?> wildcardClass15 = eigenDecompositionImpl12.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        double[] doubleArray11 = eigenDecompositionImpl9.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl9.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl9.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl9.getRealEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 10L);
        double double12 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, 100.0d);
        double[] doubleArray19 = eigenDecompositionImpl18.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl18.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        double[] doubleArray6 = new double[] { (short) -1, (short) -1, (short) -1, 1, 0.0d, (byte) 1 };
        double[] doubleArray8 = new double[] { (short) 0 };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray9, 100.0d);
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray14, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl18.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl18.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl18.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix22, (double) 1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver25 = eigenDecompositionImpl24.getSolver();
        double[] doubleArray26 = eigenDecompositionImpl24.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray26, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, -1.0, -1.0, 1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(decompositionSolver25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        double double14 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getVT();
        double double26 = eigenDecompositionImpl24.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector28 = eigenDecompositionImpl24.getEigenvector(0);
        double double29 = eigenDecompositionImpl24.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl24.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix30, (double) 10L);
        double double33 = eigenDecompositionImpl32.getDeterminant();
        double[] doubleArray34 = eigenDecompositionImpl32.getImagEigenvalues();
        double double35 = eigenDecompositionImpl32.getDeterminant();
        double[] doubleArray36 = eigenDecompositionImpl32.getImagEigenvalues();
        double[] doubleArray37 = eigenDecompositionImpl32.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray37, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray10 = new double[] { (short) 0 };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray11, 100.0d);
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray16, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl20.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl20.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl20.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl20.getD();
        double[] doubleArray25 = eigenDecompositionImpl20.getImagEigenvalues();
        double[] doubleArray27 = new double[] { (short) 0 };
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray27, doubleArray28, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray28, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray28, (double) (-1));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl17.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl17.getEigenvector((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = eigenDecompositionImpl17.getRealEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl16.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        double double20 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl16.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl12.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl12.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl12.getRealEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl17.getEigenvector(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl11.getEigenvector(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        double double20 = eigenDecompositionImpl17.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, 1.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = eigenDecompositionImpl4.getRealEigenvalue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl12.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver13);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, (double) (-1));
        double double14 = eigenDecompositionImpl13.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, 100.0d);
        org.apache.commons.math.linear.RealVector realVector28 = eigenDecompositionImpl26.getEigenvector(0);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = eigenDecompositionImpl26.getImagEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realVector28);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10.0f);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl10.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double double15 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        double double18 = eigenDecompositionImpl11.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl11.getEigenvector((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl14.getD();
        java.lang.Class<?> wildcardClass19 = realMatrix18.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double double17 = eigenDecompositionImpl11.getRealEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        java.lang.Class<?> wildcardClass9 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 0.0f);
        double double10 = eigenDecompositionImpl9.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl10.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 0.0f);
        double[] doubleArray15 = eigenDecompositionImpl14.getRealEigenvalues();
        java.lang.Class<?> wildcardClass16 = doubleArray15.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] { (short) 0 };
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl5 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray2, doubleArray3, 100.0d);
        double[] doubleArray6 = eigenDecompositionImpl5.getRealEigenvalues();
        double double7 = eigenDecompositionImpl5.getDeterminant();
        double double9 = eigenDecompositionImpl5.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl5.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) (short) -1);
        double[] doubleArray15 = eigenDecompositionImpl14.getRealEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl14.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray0, doubleArray16, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double double13 = eigenDecompositionImpl11.getRealEigenvalue(0);
        double[] doubleArray14 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        double[] doubleArray20 = eigenDecompositionImpl19.getRealEigenvalues();
        double double21 = eigenDecompositionImpl19.getDeterminant();
        double[] doubleArray22 = eigenDecompositionImpl19.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl19.getV();
        double double25 = eigenDecompositionImpl19.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver26 = eigenDecompositionImpl19.getSolver();
        double[] doubleArray27 = eigenDecompositionImpl19.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray27, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        double[] doubleArray11 = eigenDecompositionImpl7.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        double[] doubleArray13 = eigenDecompositionImpl7.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        double double22 = eigenDecompositionImpl21.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl21.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl21.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix24, 0.0d);
        double[] doubleArray27 = eigenDecompositionImpl26.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]");
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double9 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        double double15 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getVT();
        double double23 = eigenDecompositionImpl21.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector25 = eigenDecompositionImpl21.getEigenvector(0);
        double double26 = eigenDecompositionImpl21.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix27, (double) 10L);
        double[] doubleArray30 = eigenDecompositionImpl29.getImagEigenvalues();
        double[] doubleArray32 = new double[] { (short) 0 };
        double[] doubleArray33 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray32, doubleArray33, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl37 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray30, doubleArray33, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray33, (double) (short) 100);
        double[] doubleArray41 = new double[] { (short) 0 };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl44 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray41, doubleArray42, 100.0d);
        double[] doubleArray46 = new double[] { (short) 0 };
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl49 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray46, doubleArray47, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl51 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray41, doubleArray47, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver52 = eigenDecompositionImpl51.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix53 = eigenDecompositionImpl51.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix54 = eigenDecompositionImpl51.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl56 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix54, (double) (byte) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl58 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix54, (double) 1.0f);
        double[] doubleArray59 = eigenDecompositionImpl58.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl61 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray59, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver52);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0]");
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        double double10 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl7.getImagEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver15);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        double double14 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 0);
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        double[] doubleArray18 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10.0f);
        double[] doubleArray13 = eigenDecompositionImpl12.getRealEigenvalues();
        java.lang.Class<?> wildcardClass14 = doubleArray13.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver10);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        double[] doubleArray24 = new double[] { (short) 0 };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray25, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray25, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver30 = eigenDecompositionImpl29.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = eigenDecompositionImpl29.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver32 = eigenDecompositionImpl29.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl29.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix33, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = eigenDecompositionImpl35.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = eigenDecompositionImpl35.getV();
        double[] doubleArray38 = eigenDecompositionImpl35.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray38, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(decompositionSolver32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0]");
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl4.getSolver();
        double double15 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray16 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver14);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) (short) 1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl21.getSolver();
        double double24 = eigenDecompositionImpl21.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl21.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix20, (double) 100L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix20, (double) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver25 = eigenDecompositionImpl24.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(decompositionSolver25);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.apache.commons.math.linear.RealMatrix realMatrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl2 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix0, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) (short) 1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl21.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl21.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray10 = new double[] { (short) 0 };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray11, 100.0d);
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray10, doubleArray16, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl20.getSolver();
        double double22 = eigenDecompositionImpl20.getDeterminant();
        double[] doubleArray23 = eigenDecompositionImpl20.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray8, doubleArray23, 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getRealEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        double double16 = eigenDecompositionImpl11.getRealEigenvalue((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl11.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl12.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix20, (double) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        double[] doubleArray20 = eigenDecompositionImpl19.getRealEigenvalues();
        double double21 = eigenDecompositionImpl19.getDeterminant();
        double[] doubleArray22 = eigenDecompositionImpl19.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray22, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double double17 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        double[] doubleArray16 = eigenDecompositionImpl14.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        double double18 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray19 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray20 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealVector realVector22 = eigenDecompositionImpl11.getEigenvector((int) (short) 0);
        java.lang.Class<?> wildcardClass23 = realVector22.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl4.getEigenvector((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        double double20 = eigenDecompositionImpl19.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl19.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl14.getSolver();
        double[] doubleArray16 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl14.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl14.getSolver();
        double[] doubleArray16 = eigenDecompositionImpl14.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl28.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver30 = eigenDecompositionImpl28.getSolver();
        double[] doubleArray31 = eigenDecompositionImpl28.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver32 = eigenDecompositionImpl28.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl28.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl35 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix33, 100.0d);
        double[] doubleArray36 = eigenDecompositionImpl35.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl38 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray36, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(decompositionSolver30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl18.getEigenvector(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) (byte) 10);
        java.lang.Class<?> wildcardClass11 = realMatrix8.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) (short) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl12.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl12.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl7.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl19.getImagEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double[] doubleArray18 = eigenDecompositionImpl16.getImagEigenvalues();
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        double[] doubleArray25 = new double[] { (short) 0 };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray25, doubleArray26, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray26, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver33 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl30.getD();
        double[] doubleArray35 = eigenDecompositionImpl30.getImagEigenvalues();
        double[] doubleArray37 = new double[] { (short) 0 };
        double[] doubleArray38 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray37, doubleArray38, 100.0d);
        double[] doubleArray42 = new double[] { (short) 0 };
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl45 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray42, doubleArray43, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl47 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray37, doubleArray43, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl49 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray35, doubleArray43, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl51 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray43, (double) 100L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl53 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray43, (double) ' ');
        double[] doubleArray54 = eigenDecompositionImpl53.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(decompositionSolver33);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0]");
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getVT();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        double double21 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl11.getEigenvector((int) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(decompositionSolver20);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        double double18 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 0.0d);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl10.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        double double18 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray19 = eigenDecompositionImpl16.getImagEigenvalues();
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver32 = eigenDecompositionImpl31.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl31.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver34 = eigenDecompositionImpl31.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = eigenDecompositionImpl31.getD();
        double[] doubleArray36 = eigenDecompositionImpl31.getImagEigenvalues();
        double[] doubleArray38 = new double[] { (short) 0 };
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl41 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray38, doubleArray39, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl43 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray36, doubleArray39, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl45 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray39, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl47 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray19, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(decompositionSolver34);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getV();
        double[] doubleArray14 = eigenDecompositionImpl7.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, 10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getV();
        double[] doubleArray17 = eigenDecompositionImpl15.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        double double20 = eigenDecompositionImpl17.getImagEigenvalue(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl17.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver21);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getVT();
        double double23 = eigenDecompositionImpl21.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector25 = eigenDecompositionImpl21.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver28 = eigenDecompositionImpl21.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix29, (double) '#');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl31.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl31.getV();
        double[] doubleArray34 = eigenDecompositionImpl31.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray34, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(decompositionSolver28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl4.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl10.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 0.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl14.getSolver();
        double double16 = eigenDecompositionImpl14.getDeterminant();
        double double17 = eigenDecompositionImpl14.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl14.getSolver();
        double double18 = eigenDecompositionImpl14.getRealEigenvalue(0);
        double[] doubleArray19 = eigenDecompositionImpl14.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl14.getRealEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl30.getVT();
        double double35 = eigenDecompositionImpl30.getRealEigenvalue(0);
        double[] doubleArray36 = eigenDecompositionImpl30.getRealEigenvalues();
        double double37 = eigenDecompositionImpl30.getDeterminant();
        double[] doubleArray38 = eigenDecompositionImpl30.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0]");
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getVT();
        double double23 = eigenDecompositionImpl21.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector25 = eigenDecompositionImpl21.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl21.getD();
        double[] doubleArray27 = eigenDecompositionImpl21.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl21.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl21.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix29, (double) 100.0f);
        double[] doubleArray32 = eigenDecompositionImpl31.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray32, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl17.getImagEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) (byte) 100);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) '4');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl22.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(decompositionSolver23);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl9.getV();
        double double12 = eigenDecompositionImpl9.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl9.getVT();
        double[] doubleArray14 = eigenDecompositionImpl9.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0]");
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl21.getSolver();
        java.lang.Class<?> wildcardClass24 = eigenDecompositionImpl21.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double double17 = eigenDecompositionImpl11.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, (double) ' ');
        double[] doubleArray19 = eigenDecompositionImpl18.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl18.getRealEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 0.0d);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 1.0d);
        java.lang.Class<?> wildcardClass11 = realMatrix8.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 100L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 100);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl18.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(decompositionSolver19);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getVT();
        java.lang.Class<?> wildcardClass12 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getV();
        double double13 = eigenDecompositionImpl10.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getD();
        double double23 = eigenDecompositionImpl17.getImagEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl14.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) 100L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) (-1L));
        double[] doubleArray18 = eigenDecompositionImpl17.getImagEigenvalues();
        java.lang.Class<?> wildcardClass19 = eigenDecompositionImpl17.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl21.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector25 = eigenDecompositionImpl21.getEigenvector((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.RealVector realVector24 = eigenDecompositionImpl17.getEigenvector(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 100);
        double double15 = eigenDecompositionImpl14.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        double[] doubleArray22 = eigenDecompositionImpl17.getImagEigenvalues();
        java.lang.Class<?> wildcardClass23 = doubleArray22.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl16.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl12.getSolver();
        double double16 = eigenDecompositionImpl12.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl12.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl12.getImagEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, 0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl13.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl13.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl13.getEigenvector((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double17 = eigenDecompositionImpl11.getRealEigenvalue(0);
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl23.getVT();
        double double25 = eigenDecompositionImpl23.getDeterminant();
        double[] doubleArray26 = eigenDecompositionImpl23.getRealEigenvalues();
        double[] doubleArray27 = eigenDecompositionImpl23.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray27, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getVT();
        double[] doubleArray21 = eigenDecompositionImpl19.getRealEigenvalues();
        double double22 = eigenDecompositionImpl19.getDeterminant();
        double double23 = eigenDecompositionImpl19.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1L);
        double double17 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl16.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl16.getEigenvector((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver18);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1);
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl7.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        double double12 = eigenDecompositionImpl7.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray17 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        double[] doubleArray23 = eigenDecompositionImpl22.getRealEigenvalues();
        double double24 = eigenDecompositionImpl22.getDeterminant();
        double[] doubleArray25 = eigenDecompositionImpl22.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl22.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix26, (double) 1.0f);
        double[] doubleArray29 = eigenDecompositionImpl28.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray29, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0]");
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 1L);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getD();
        double[] doubleArray18 = eigenDecompositionImpl16.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl17.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl17.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver24 = eigenDecompositionImpl17.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(decompositionSolver24);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        double double18 = eigenDecompositionImpl16.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getVT();
        double[] doubleArray21 = eigenDecompositionImpl16.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 10.0f);
        double double15 = eigenDecompositionImpl14.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl14.getEigenvector((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl7.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl4.getV();
        double double17 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver18);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) '4');
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double double12 = eigenDecompositionImpl10.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl10.getImagEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (-1.0d));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 1.0d);
        double double20 = eigenDecompositionImpl19.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass10 = realMatrix9.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl7.getSolver();
        double double14 = eigenDecompositionImpl7.getRealEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl17.getSolver();
        double[] doubleArray20 = eigenDecompositionImpl17.getImagEigenvalues();
        double double22 = eigenDecompositionImpl17.getImagEigenvalue((int) (byte) 0);
        double double23 = eigenDecompositionImpl17.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (-1.0d));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl4.getEigenvector(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) 100);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray20, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver25 = eigenDecompositionImpl24.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl24.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver27 = eigenDecompositionImpl24.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl24.getD();
        double[] doubleArray29 = eigenDecompositionImpl24.getImagEigenvalues();
        double double31 = eigenDecompositionImpl24.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl24.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl24.getVT();
        double[] doubleArray34 = eigenDecompositionImpl24.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray12, doubleArray34, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(decompositionSolver27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getImagEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl7.getD();
        double[] doubleArray16 = eigenDecompositionImpl7.getRealEigenvalues();
        double double18 = eigenDecompositionImpl7.getRealEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double double17 = eigenDecompositionImpl16.getDeterminant();
        double double19 = eigenDecompositionImpl16.getRealEigenvalue((int) (short) 0);
        double[] doubleArray20 = eigenDecompositionImpl16.getImagEigenvalues();
        double[] doubleArray22 = new double[] { (short) 0 };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray23, 100.0d);
        double[] doubleArray27 = new double[] { (short) 0 };
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray27, doubleArray28, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray28, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver33 = eigenDecompositionImpl32.getSolver();
        double[] doubleArray34 = eigenDecompositionImpl32.getImagEigenvalues();
        double double35 = eigenDecompositionImpl32.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = eigenDecompositionImpl32.getVT();
        double[] doubleArray37 = eigenDecompositionImpl32.getRealEigenvalues();
        double[] doubleArray38 = eigenDecompositionImpl32.getRealEigenvalues();
        double double39 = eigenDecompositionImpl32.getDeterminant();
        double[] doubleArray40 = eigenDecompositionImpl32.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl42 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray40, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0]");
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        double double14 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 0.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 1.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl19.getImagEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl17.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl17.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl21.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl21.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl21.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(decompositionSolver23);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 1.0f);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray14, (double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        java.lang.Class<?> wildcardClass16 = eigenDecompositionImpl14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl11.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray16, (double) 'a');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl20.getSolver();
        double[] doubleArray22 = eigenDecompositionImpl20.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl20.getD();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector25 = eigenDecompositionImpl20.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl11.getRealEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl14.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double double12 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double13 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl17.getSolver();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = eigenDecompositionImpl4.getRealEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) (-1L));
        double double19 = eigenDecompositionImpl17.getRealEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray19, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver24 = eigenDecompositionImpl23.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl23.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver26 = eigenDecompositionImpl23.getSolver();
        double[] doubleArray27 = eigenDecompositionImpl23.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray27, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(decompositionSolver26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl12.getEigenvector((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl7.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl18.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) (short) -1);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl23.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl23.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix25, (double) (short) 10);
        double[] doubleArray28 = eigenDecompositionImpl27.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray28, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = eigenDecompositionImpl4.getRealEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl9.getV();
        double double13 = eigenDecompositionImpl9.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl9.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl9.getD();
        java.lang.Class<?> wildcardClass12 = realMatrix11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, 10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getV();
        double[] doubleArray21 = eigenDecompositionImpl19.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        double[] doubleArray16 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl14.getD();
        java.lang.Class<?> wildcardClass18 = realMatrix17.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl17.getEigenvector((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        double[] doubleArray20 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        double double19 = eigenDecompositionImpl17.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = eigenDecompositionImpl30.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl30.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix34);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getVT();
        double double20 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl11.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getVT();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        double double22 = eigenDecompositionImpl17.getDeterminant();
        double[] doubleArray23 = eigenDecompositionImpl17.getRealEigenvalues();
        double double24 = eigenDecompositionImpl17.getDeterminant();
        double double25 = eigenDecompositionImpl17.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getV();
        double[] doubleArray21 = eigenDecompositionImpl17.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl7.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        double double19 = eigenDecompositionImpl17.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl17.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(decompositionSolver20);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl16.getImagEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl17.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(decompositionSolver21);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 100L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl18.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = eigenDecompositionImpl4.getEigenvector((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector15 = eigenDecompositionImpl4.getEigenvector(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver10);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl4.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        double double16 = eigenDecompositionImpl15.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl15.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double[] doubleArray20 = eigenDecompositionImpl17.getImagEigenvalues();
        double double22 = eigenDecompositionImpl17.getRealEigenvalue(0);
        double[] doubleArray23 = eigenDecompositionImpl17.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) '4');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        double double22 = eigenDecompositionImpl21.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl21.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double25 = eigenDecompositionImpl21.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 10L);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl10.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl10.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getVT();
        double[] doubleArray22 = eigenDecompositionImpl17.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl14.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getV();
        double[] doubleArray22 = eigenDecompositionImpl17.getImagEigenvalues();
        double double23 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver31 = eigenDecompositionImpl30.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector33 = eigenDecompositionImpl30.getEigenvector((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver31);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl12.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) '4');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double8 = eigenDecompositionImpl4.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) '#');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, (double) (byte) 1);
        double double16 = eigenDecompositionImpl15.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl15.getVT();
        double double18 = eigenDecompositionImpl15.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl15.getImagEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 100L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) (short) -1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl24.getV();
        double[] doubleArray26 = eigenDecompositionImpl24.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        double double13 = eigenDecompositionImpl4.getDeterminant();
        double double15 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray18 = new double[] { (short) 0 };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray19, 100.0d);
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray18, doubleArray24, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl30 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray24, (double) (short) 0);
        double double31 = eigenDecompositionImpl30.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = eigenDecompositionImpl30.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix32);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getD();
        double double20 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getD();
        double[] doubleArray11 = eigenDecompositionImpl9.getRealEigenvalues();
        double double12 = eigenDecompositionImpl9.getDeterminant();
        double[] doubleArray13 = eigenDecompositionImpl9.getRealEigenvalues();
        java.lang.Class<?> wildcardClass14 = eigenDecompositionImpl9.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        java.lang.Class<?> wildcardClass16 = doubleArray15.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double double15 = eigenDecompositionImpl11.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl11.getEigenvector((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getV();
        java.lang.Class<?> wildcardClass15 = realMatrix14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getVT();
        double[] doubleArray20 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = eigenDecompositionImpl14.getRealEigenvalue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 0.0d);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl10.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl10.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl10.getRealEigenvalue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        java.lang.Class<?> wildcardClass11 = realMatrix10.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double double14 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl14.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
        org.junit.Assert.assertNotNull(decompositionSolver19);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getVT();
        double[] doubleArray35 = eigenDecompositionImpl33.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = eigenDecompositionImpl33.getVT();
        double double37 = eigenDecompositionImpl33.getDeterminant();
        double[] doubleArray38 = eigenDecompositionImpl33.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0]");
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        double[] doubleArray18 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl17.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl17.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        double[] doubleArray13 = eigenDecompositionImpl4.getImagEigenvalues();
        double double14 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl11.getSolver();
        double double17 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver18);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl15.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl15.getD();
        double[] doubleArray18 = eigenDecompositionImpl15.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getVT();
        double[] doubleArray21 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray23 = new double[] { (short) 0 };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray23, doubleArray24, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = eigenDecompositionImpl26.getV();
        double[] doubleArray28 = eigenDecompositionImpl26.getImagEigenvalues();
        double[] doubleArray29 = eigenDecompositionImpl26.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray29, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getVT();
        double[] doubleArray21 = eigenDecompositionImpl19.getRealEigenvalues();
        double double22 = eigenDecompositionImpl19.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = eigenDecompositionImpl19.getImagEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) 10.0f);
        double double20 = eigenDecompositionImpl19.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        double double21 = eigenDecompositionImpl17.getDeterminant();
        double[] doubleArray22 = eigenDecompositionImpl17.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl12.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl11.getRealEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        double double12 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray16, (double) 'a');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl20.getSolver();
        double[] doubleArray22 = eigenDecompositionImpl20.getRealEigenvalues();
        double[] doubleArray24 = new double[] { (short) 0 };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray25, 100.0d);
        double[] doubleArray29 = new double[] { (short) 0 };
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray29, doubleArray30, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray30, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver35 = eigenDecompositionImpl34.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = eigenDecompositionImpl34.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver37 = eigenDecompositionImpl34.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = eigenDecompositionImpl34.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = eigenDecompositionImpl34.getVT();
        double[] doubleArray40 = eigenDecompositionImpl34.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl42 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray40, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(decompositionSolver37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0]");
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix23, (double) 1.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver26 = eigenDecompositionImpl25.getSolver();
        double[] doubleArray27 = eigenDecompositionImpl25.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(decompositionSolver26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]");
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        double double20 = eigenDecompositionImpl17.getImagEigenvalue(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector22 = eigenDecompositionImpl17.getEigenvector(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getRealEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 1.0d);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        double[] doubleArray12 = eigenDecompositionImpl10.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl10.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl14.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray16, (double) 'a');
        double double21 = eigenDecompositionImpl20.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl20.getImagEigenvalue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) -1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        double double13 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        double[] doubleArray20 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealVector realVector22 = eigenDecompositionImpl11.getEigenvector((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        double[] doubleArray17 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        java.lang.Class<?> wildcardClass20 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        double[] doubleArray19 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl17.getSolver();
        double[] doubleArray21 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray22 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray24 = new double[] { (short) 0 };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray25, 100.0d);
        double[] doubleArray29 = new double[] { (short) 0 };
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray29, doubleArray30, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray30, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver35 = eigenDecompositionImpl34.getSolver();
        double[] doubleArray36 = eigenDecompositionImpl34.getImagEigenvalues();
        double double37 = eigenDecompositionImpl34.getDeterminant();
        double[] doubleArray38 = eigenDecompositionImpl34.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl40 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray22, doubleArray38, (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0]");
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        java.lang.Class<?> wildcardClass15 = realMatrix14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        java.lang.Class<?> wildcardClass11 = eigenDecompositionImpl4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl10.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = eigenDecompositionImpl10.getImagEigenvalue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0L);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (short) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl11.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, 100.0d);
        java.lang.Class<?> wildcardClass22 = realMatrix19.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getRealEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double double11 = eigenDecompositionImpl7.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) ' ');
        double[] doubleArray20 = eigenDecompositionImpl19.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        double[] doubleArray16 = eigenDecompositionImpl15.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl15.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix7, (double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl9.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix10);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver10 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(decompositionSolver10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getV();
        double[] doubleArray19 = eigenDecompositionImpl11.getRealEigenvalues();
        java.lang.Class<?> wildcardClass20 = doubleArray19.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl10.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) 0.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl14.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getD();
        double[] doubleArray35 = eigenDecompositionImpl33.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl11.getEigenvector(0);
        org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray21 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl11.getImagEigenvalue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getD();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl16.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealVector realVector19 = eigenDecompositionImpl11.getEigenvector((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = eigenDecompositionImpl11.getImagEigenvalue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl7.getSolver();
        double[] doubleArray15 = eigenDecompositionImpl7.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = eigenDecompositionImpl7.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double double17 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl16.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(decompositionSolver19);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getVT();
        double[] doubleArray17 = eigenDecompositionImpl11.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue(0);
        double double12 = eigenDecompositionImpl4.getImagEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        double double15 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        double double12 = eigenDecompositionImpl4.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double double10 = eigenDecompositionImpl4.getRealEigenvalue((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100L);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) '#');
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        double[] doubleArray0 = null;
        double[] doubleArray2 = new double[] { (short) 0 };
        double[] doubleArray3 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl5 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray2, doubleArray3, 100.0d);
        double[] doubleArray7 = new double[] { (short) 0 };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray8, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray2, doubleArray8, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl12.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl12.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver15 = eigenDecompositionImpl12.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl12.getD();
        double[] doubleArray17 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl12.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl12.getD();
        double[] doubleArray20 = eigenDecompositionImpl12.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray0, doubleArray20, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(decompositionSolver15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 1.0f);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl10.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getV();
        double double20 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getV();
        double double20 = eigenDecompositionImpl16.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl16.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl16.getRealEigenvalue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, (double) 1);
        double[] doubleArray11 = eigenDecompositionImpl10.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, 10.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl21 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix19, (double) 10L);
        double[] doubleArray22 = eigenDecompositionImpl21.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0]");
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl16.getSolver();
        double[] doubleArray23 = eigenDecompositionImpl16.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector25 = eigenDecompositionImpl16.getEigenvector((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl12.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getVT();
        double double20 = eigenDecompositionImpl17.getImagEigenvalue((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl10.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl10.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl15.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        double double14 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, 0.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = eigenDecompositionImpl22.getRealEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl10.getRealEigenvalue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 1.0d);
        double[] doubleArray11 = eigenDecompositionImpl10.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl10.getSolver();
        double double14 = eigenDecompositionImpl10.getImagEigenvalue((int) (short) 0);
        double double15 = eigenDecompositionImpl10.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix9, 0.0d);
        java.lang.Class<?> wildcardClass12 = eigenDecompositionImpl11.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = eigenDecompositionImpl4.getRealEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl11.getD();
        double[] doubleArray19 = eigenDecompositionImpl11.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        double[] doubleArray14 = eigenDecompositionImpl11.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = eigenDecompositionImpl11.getEigenvector((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) ' ');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) '#');
        double[] doubleArray10 = eigenDecompositionImpl9.getRealEigenvalues();
        double double11 = eigenDecompositionImpl9.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl9.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        double[] doubleArray12 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double double14 = eigenDecompositionImpl4.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = eigenDecompositionImpl4.getEigenvector((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl14.getD();
        double double19 = eigenDecompositionImpl14.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertNotNull(realMatrix8);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getD();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix7);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        double double14 = eigenDecompositionImpl11.getImagEigenvalue((int) (short) 0);
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double17 = eigenDecompositionImpl11.getDeterminant();
        double[] doubleArray18 = eigenDecompositionImpl11.getImagEigenvalues();
        double double19 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver18 = eigenDecompositionImpl11.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = eigenDecompositionImpl11.getEigenvector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(decompositionSolver18);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getImagEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (byte) -1);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl16.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(decompositionSolver17);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        double[] doubleArray17 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        double[] doubleArray24 = new double[] { (short) 0 };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray25, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray25, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver30 = eigenDecompositionImpl29.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = eigenDecompositionImpl29.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver32 = eigenDecompositionImpl29.getSolver();
        double[] doubleArray33 = eigenDecompositionImpl29.getImagEigenvalues();
        double[] doubleArray34 = eigenDecompositionImpl29.getRealEigenvalues();
        double[] doubleArray36 = new double[] { (short) 0 };
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl39 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray36, doubleArray37, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = eigenDecompositionImpl39.getVT();
        double double41 = eigenDecompositionImpl39.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector43 = eigenDecompositionImpl39.getEigenvector(0);
        double double44 = eigenDecompositionImpl39.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix45 = eigenDecompositionImpl39.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl47 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix45, (double) 10L);
        double[] doubleArray48 = eigenDecompositionImpl47.getImagEigenvalues();
        double[] doubleArray50 = new double[] { (short) 0 };
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl53 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray50, doubleArray51, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl55 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray48, doubleArray51, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl57 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray34, doubleArray51, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl59 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray34, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver30);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(decompositionSolver32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = eigenDecompositionImpl4.getRealEigenvalue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double7 = eigenDecompositionImpl4.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl10 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix8, 0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl10.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, (double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = eigenDecompositionImpl13.getRealEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double[] doubleArray13 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray16, (double) 'a');
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl20.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl20.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl20.getV();
        double double24 = eigenDecompositionImpl20.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl20.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector13 = eigenDecompositionImpl11.getEigenvector((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double double15 = eigenDecompositionImpl11.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        double double13 = eigenDecompositionImpl12.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl12.getD();
        double double15 = eigenDecompositionImpl12.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getVT();
        double double18 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver19);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getD();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double double10 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (byte) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (-1.0d));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl16.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver17);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl4.getEigenvector((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray14 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl4.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        double[] doubleArray18 = eigenDecompositionImpl17.getImagEigenvalues();
        double[] doubleArray19 = eigenDecompositionImpl17.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl17.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver21 = eigenDecompositionImpl17.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = eigenDecompositionImpl17.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(decompositionSolver21);
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        double double19 = eigenDecompositionImpl14.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.RealVector realVector22 = eigenDecompositionImpl14.getEigenvector(0);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver23 = eigenDecompositionImpl14.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(decompositionSolver23);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        double double18 = eigenDecompositionImpl11.getRealEigenvalue((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl11.getD();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = eigenDecompositionImpl11.getImagEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl7.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, 10.0d);
        org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl12.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl12.getV();
        double double16 = eigenDecompositionImpl12.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = eigenDecompositionImpl12.getEigenvector((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getVT();
        double[] doubleArray35 = eigenDecompositionImpl33.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix36 = eigenDecompositionImpl33.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix36);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver16 = eigenDecompositionImpl14.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl14.getRealEigenvalue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray12, (double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double[] doubleArray16 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getV();
        double double18 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl11.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver19);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl13 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix11, (double) (byte) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl13.getVT();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = eigenDecompositionImpl13.getRealEigenvalue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray10, (double) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        double double19 = eigenDecompositionImpl14.getRealEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl14.getD();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix16, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = eigenDecompositionImpl18.getRealEigenvalue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getV();
        double[] doubleArray6 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray7 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double[] doubleArray9 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        double[] doubleArray11 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray14 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        double[] doubleArray21 = new double[] { (short) 0 };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl24 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray21, doubleArray22, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray22, (double) 100.0f);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl28 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray22, (double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (short) 1);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        double[] doubleArray18 = eigenDecompositionImpl16.getRealEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl16.getVT();
        double[] doubleArray20 = eigenDecompositionImpl16.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        double[] doubleArray14 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray16 = new double[] { (short) 0 };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray16, doubleArray17, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix20, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl22.getVT();
        double[] doubleArray24 = eigenDecompositionImpl22.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl26 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray24, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0]");
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver13 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) (-1));
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        double double19 = eigenDecompositionImpl16.getImagEigenvalue(0);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getD();
        double[] doubleArray21 = eigenDecompositionImpl16.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector23 = eigenDecompositionImpl16.getEigenvector(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(decompositionSolver13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (byte) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl17.getSolver();
        double[] doubleArray23 = eigenDecompositionImpl17.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray8 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray15 = new double[] { (short) 0 };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl18 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray16, 100.0d);
        double[] doubleArray20 = new double[] { (short) 0 };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl23 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray20, doubleArray21, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray21, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = eigenDecompositionImpl25.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver27 = eigenDecompositionImpl25.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = eigenDecompositionImpl25.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl25.getVT();
        double double31 = eigenDecompositionImpl25.getRealEigenvalue(0);
        double[] doubleArray32 = eigenDecompositionImpl25.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl34 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray32, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(decompositionSolver27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]");
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getV();
        double double11 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(decompositionSolver12);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector8 = eigenDecompositionImpl4.getEigenvector(0);
        double double9 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix10, (double) 10L);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl12.getV();
        double[] doubleArray14 = eigenDecompositionImpl12.getImagEigenvalues();
        double[] doubleArray15 = eigenDecompositionImpl12.getRealEigenvalues();
        java.lang.Class<?> wildcardClass16 = doubleArray15.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl17.getRealEigenvalue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double double13 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, 10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) (byte) 0);
        double[] doubleArray15 = eigenDecompositionImpl14.getRealEigenvalues();
        double double16 = eigenDecompositionImpl14.getDeterminant();
        double[] doubleArray17 = eigenDecompositionImpl14.getRealEigenvalues();
        double[] doubleArray19 = new double[] { (short) 0 };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray19, doubleArray20, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl22.getVT();
        double double24 = eigenDecompositionImpl22.getDeterminant();
        org.apache.commons.math.linear.RealVector realVector26 = eigenDecompositionImpl22.getEigenvector(0);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = eigenDecompositionImpl22.getD();
        double[] doubleArray28 = eigenDecompositionImpl22.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = eigenDecompositionImpl22.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = eigenDecompositionImpl22.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl32 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix30, (double) 100.0f);
        double[] doubleArray33 = eigenDecompositionImpl32.getImagEigenvalues();
        double[] doubleArray34 = eigenDecompositionImpl32.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray34, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0]");
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double double18 = eigenDecompositionImpl17.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = eigenDecompositionImpl17.getV();
        double[] doubleArray20 = eigenDecompositionImpl17.getRealEigenvalues();
        double[] doubleArray21 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl17.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = eigenDecompositionImpl17.getVT();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getV();
        double[] doubleArray14 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        double double16 = eigenDecompositionImpl11.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector21 = eigenDecompositionImpl19.getEigenvector((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        double[] doubleArray9 = new double[] { (short) 0 };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl12 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray10, 100.0d);
        double[] doubleArray14 = new double[] { (short) 0 };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray14, doubleArray15, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray9, doubleArray15, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl19.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl19.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl19.getD();
        double[] doubleArray24 = eigenDecompositionImpl19.getImagEigenvalues();
        double[] doubleArray26 = new double[] { (short) 0 };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl29 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray26, doubleArray27, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl31 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray24, doubleArray27, (double) 'a');
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl33 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray7, doubleArray27, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = eigenDecompositionImpl33.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl36 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix34, (double) (short) 0);
        double double38 = eigenDecompositionImpl36.getImagEigenvalue((int) (short) 0);
        double double39 = eigenDecompositionImpl36.getDeterminant();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray7 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getVT();
        double double9 = eigenDecompositionImpl4.getDeterminant();
        double[] doubleArray10 = eigenDecompositionImpl4.getImagEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        double double6 = eigenDecompositionImpl4.getDeterminant();
        double double7 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl4.getV();
        double[] doubleArray9 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray10 = eigenDecompositionImpl4.getRealEigenvalues();
        double[] doubleArray11 = eigenDecompositionImpl4.getRealEigenvalues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl11.getV();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        double[] doubleArray15 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray17 = new double[] { (short) 0 };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray17, doubleArray18, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl22 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray15, doubleArray18, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = eigenDecompositionImpl22.getD();
        double[] doubleArray24 = eigenDecompositionImpl22.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = eigenDecompositionImpl22.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl27 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix25, (double) (-1));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        double[] doubleArray13 = eigenDecompositionImpl11.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl11.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 10.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl19 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix17, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver6 = eigenDecompositionImpl4.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver7 = eigenDecompositionImpl4.getSolver();
        double double8 = eigenDecompositionImpl4.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver11 = eigenDecompositionImpl4.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(decompositionSolver6);
        org.junit.Assert.assertNotNull(decompositionSolver7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(decompositionSolver11);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl15 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (short) 0);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix13, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = eigenDecompositionImpl17.getD();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl20 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix18, (double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl20.getD();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver22 = eigenDecompositionImpl20.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(decompositionSolver22);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray5 = eigenDecompositionImpl4.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = eigenDecompositionImpl4.getD();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = eigenDecompositionImpl4.getV();
        org.apache.commons.math.linear.RealVector realVector9 = eigenDecompositionImpl4.getEigenvector((int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        double[] doubleArray12 = eigenDecompositionImpl11.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector14 = eigenDecompositionImpl11.getEigenvector((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver8 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver9 = eigenDecompositionImpl7.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getVT();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl7.getV();
        double[] doubleArray13 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = eigenDecompositionImpl7.getV();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix14, (double) 100);
        double[] doubleArray17 = eigenDecompositionImpl16.getImagEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = eigenDecompositionImpl16.getImagEigenvalue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(decompositionSolver8);
        org.junit.Assert.assertNotNull(decompositionSolver9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix5 = eigenDecompositionImpl4.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl7 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix5, (double) (-1L));
        org.apache.commons.math.linear.RealMatrix realMatrix8 = eigenDecompositionImpl7.getVT();
        double[] doubleArray9 = eigenDecompositionImpl7.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = eigenDecompositionImpl7.getD();
        double[] doubleArray11 = eigenDecompositionImpl7.getImagEigenvalues();
        double[] doubleArray13 = new double[] { (short) 0 };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl16 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray13, doubleArray14, 100.0d);
        double[] doubleArray17 = eigenDecompositionImpl16.getRealEigenvalues();
        double double18 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray19 = eigenDecompositionImpl16.getImagEigenvalues();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = eigenDecompositionImpl16.getV();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = eigenDecompositionImpl16.getV();
        double double22 = eigenDecompositionImpl16.getDeterminant();
        double[] doubleArray23 = eigenDecompositionImpl16.getRealEigenvalues();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl25 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray11, doubleArray23, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]");
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver12 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver14 = eigenDecompositionImpl11.getSolver();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl17 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix15, (double) 1);
        double[] doubleArray18 = eigenDecompositionImpl17.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl17.getSolver();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver20 = eigenDecompositionImpl17.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(decompositionSolver12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(decompositionSolver14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
        org.junit.Assert.assertNotNull(decompositionSolver20);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        double[] doubleArray1 = new double[] { (short) 0 };
        double[] doubleArray2 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl4 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray2, 100.0d);
        double[] doubleArray6 = new double[] { (short) 0 };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl9 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray6, doubleArray7, 100.0d);
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl11 = new org.apache.commons.math.linear.EigenDecompositionImpl(doubleArray1, doubleArray7, (double) 100.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = eigenDecompositionImpl11.getVT();
        org.apache.commons.math.linear.EigenDecompositionImpl eigenDecompositionImpl14 = new org.apache.commons.math.linear.EigenDecompositionImpl(realMatrix12, (double) ' ');
        org.apache.commons.math.linear.RealMatrix realMatrix15 = eigenDecompositionImpl14.getVT();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = eigenDecompositionImpl14.getV();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver17 = eigenDecompositionImpl14.getSolver();
        double[] doubleArray18 = eigenDecompositionImpl14.getRealEigenvalues();
        org.apache.commons.math.linear.DecompositionSolver decompositionSolver19 = eigenDecompositionImpl14.getSolver();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(decompositionSolver17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]");
        org.junit.Assert.assertNotNull(decompositionSolver19);
    }
}

